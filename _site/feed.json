{
    "version": "https://jsonfeed.org/version/1",
    "title": "Milo Fultz",
    "home_page_url": "http://milofultz.com/",
    "feed_url": "http://milofultz.com/feed.json",
    "description": null,
    "icon": "http://milofultz.com/apple-touch-icon.png",
    "favicon": "http://milofultz.com/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Milo Fultz",
        "url": "http://milofultz.com",
        "avatar": null
    },
    
"items": [
    
        {
            "id": "http://milofultz.com/2022/06/03/minimalist",
            "title": "Minimalism",
            "summary": null,
            "content_text": "Minimalism isn‚Äôt about sterility, it‚Äôs about intimacy.Minimalism isn‚Äôt about having less, it‚Äôs about having more intentionality.Minimalism isn‚Äôt about design, it‚Äôs about use.Minimalism isn‚Äôt an aesthetic, it‚Äôs an action.References:  https://simonsarris.substack.com/p/patina-and-intimacy?s=r",
            "content_html": "<p>Minimalism isn‚Äôt about sterility, it‚Äôs about intimacy.</p><p>Minimalism isn‚Äôt about having less, it‚Äôs about having more intentionality.</p><p>Minimalism isn‚Äôt about design, it‚Äôs about use.</p><p>Minimalism isn‚Äôt an aesthetic, it‚Äôs an action.</p><h2 id=\"references\">References:</h2><ol>  <li>https://simonsarris.substack.com/p/patina-and-intimacy?s=r</li></ol><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2022/06/03/minimalist",
            
            
            
            
            
            "date_published": "2022-06-03T00:00:00+01:00",
            "date_modified": "2022-06-03T00:00:00+01:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2022/05/21/byonic-reading",
            "title": "üßæ Byonic Reading - 80/20 Version on Bionic Reading",
            "summary": "üßæ Byonic Reading - 80/20 Version on Bionic Reading",
            "content_text": "Check out the project files on Codeberg // See it in action here!According to the designer, Bionic Reading is a way to aid in reading comprehension and focus, particularly those with difficulties like dyslexia, etc.  Bionic Reading revises texts so that the most concise parts of words are highlighted. This guides the eye over the text and the brain remembers previously learned words more quickly.I recommend checking it out on their site so you can see what they‚Äôre getting at. On first glance, the example they used seemed to make sense. It looked like it was merely highlighting the first half of every word as bold. It seems after reading their page it does a lot more than that, but that initial spark got me wondering how easy it would be to implement this as a basic Javascript snippet?It ended up being fairly straightforward. The pseudocode of the whole thing is:MakeByonic(element):  FOR child of starting element    CASE element type of      text node:        Make first half of text bold        Replace original text node with newly formatted text      element node:        CALL MakeByonic on this child element    END CASE  END FORAn example looks something like this (in my implementation, anyway):Byonic Reading is a new method facilitating the reading process by guiding the eyes through text with artificial fixation points. As a result, the reader is only focusing on the highlighted initial letters and lets the brain center complete the word. In a digital world dominated by shallow forms of reading, Byonic Reading aims to encourage a more in-depth reading and understanding of written content.There are some weird things you have to do to make all this work with a webpage and some caveats I added to make it a but more readable and pleasant, but overall it‚Äôs pretty straightforward and was a fun project! I may eventually turn it into a Firefox extension because why not.",
            "content_html": "<p><a href=\"https://codeberg.org/milofultz/byonic-reading\">Check out the project files on Codeberg</a> // <a href=\"https://milofultz.codeberg.page/byonic-reading/\">See it in action here!</a></p><p>According to the designer, <a href=\"https://bionic-reading.com/\">Bionic Reading</a> is a way to aid in reading comprehension and focus, particularly those with difficulties like dyslexia, etc.</p><blockquote>  <p>Bionic Reading revises texts so that the most concise parts of words are highlighted. This guides the eye over the text and the brain remembers previously learned words more quickly.</p></blockquote><p>I recommend checking it out on their site so you can see what they‚Äôre getting at. On first glance, the example they used seemed to make sense. It looked like it was merely highlighting the first half of every word as bold. It seems after reading their page it does a lot more than that, but that initial spark got me wondering how easy it would be to implement this as a basic Javascript snippet?</p><p>It ended up being fairly straightforward. The pseudocode of the whole thing is:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>MakeByonic(element):  FOR child of starting element    CASE element type of      text node:        Make first half of text bold        Replace original text node with newly formatted text      element node:        CALL MakeByonic on this child element    END CASE  END FOR</code></pre></div></div><p>An example looks something like this (in my implementation, anyway):</p><p><span style=\"font-weight: bolder;\">Byo</span>nic <span style=\"font-weight: bolder;\">Read</span>ing <span style=\"font-weight: bolder;\">i</span>s <span style=\"font-weight: bolder;\">a</span> <span style=\"font-weight: bolder;\">ne</span>w <span style=\"font-weight: bolder;\">met</span>hod <span style=\"font-weight: bolder;\">facili</span>tating <span style=\"font-weight: bolder;\">th</span>e <span style=\"font-weight: bolder;\">read</span>ing <span style=\"font-weight: bolder;\">proc</span>ess <span style=\"font-weight: bolder;\">b</span>y <span style=\"font-weight: bolder;\">guid</span>ing <span style=\"font-weight: bolder;\">th</span>e <span style=\"font-weight: bolder;\">ey</span>es <span style=\"font-weight: bolder;\">thro</span>ugh <span style=\"font-weight: bolder;\">te</span>xt <span style=\"font-weight: bolder;\">wi</span>th <span style=\"font-weight: bolder;\">artif</span>icial <span style=\"font-weight: bolder;\">fixa</span>tion <span style=\"font-weight: bolder;\">poin</span>ts. <span style=\"font-weight: bolder;\">A</span>s <span style=\"font-weight: bolder;\">a</span> <span style=\"font-weight: bolder;\">resu</span>lt, <span style=\"font-weight: bolder;\">th</span>e <span style=\"font-weight: bolder;\">rea</span>der <span style=\"font-weight: bolder;\">i</span>s <span style=\"font-weight: bolder;\">on</span>ly <span style=\"font-weight: bolder;\">focu</span>sing <span style=\"font-weight: bolder;\">o</span>n <span style=\"font-weight: bolder;\">th</span>e <span style=\"font-weight: bolder;\">highli</span>ghted <span style=\"font-weight: bolder;\">init</span>ial <span style=\"font-weight: bolder;\">lett</span>ers <span style=\"font-weight: bolder;\">an</span>d <span style=\"font-weight: bolder;\">le</span>ts <span style=\"font-weight: bolder;\">th</span>e <span style=\"font-weight: bolder;\">bra</span>in <span style=\"font-weight: bolder;\">cen</span>ter <span style=\"font-weight: bolder;\">comp</span>lete <span style=\"font-weight: bolder;\">th</span>e <span style=\"font-weight: bolder;\">wor</span>d. <span style=\"font-weight: bolder;\">I</span>n <span style=\"font-weight: bolder;\">a</span> <span style=\"font-weight: bolder;\">digi</span>tal <span style=\"font-weight: bolder;\">wor</span>ld <span style=\"font-weight: bolder;\">domin</span>ated <span style=\"font-weight: bolder;\">b</span>y <span style=\"font-weight: bolder;\">shal</span>low <span style=\"font-weight: bolder;\">for</span>ms <span style=\"font-weight: bolder;\">o</span>f <span style=\"font-weight: bolder;\">read</span>ing, <span style=\"font-weight: bolder;\">Byo</span>nic <span style=\"font-weight: bolder;\">Read</span>ing <span style=\"font-weight: bolder;\">ai</span>ms <span style=\"font-weight: bolder;\">t</span>o <span style=\"font-weight: bolder;\">encou</span>rage <span style=\"font-weight: bolder;\">a</span> <span style=\"font-weight: bolder;\">mo</span>re <span style=\"font-weight: bolder;\">i</span>n-<span style=\"font-weight: bolder;\">dep</span>th <span style=\"font-weight: bolder;\">read</span>ing <span style=\"font-weight: bolder;\">an</span>d <span style=\"font-weight: bolder;\">underst</span>anding <span style=\"font-weight: bolder;\">o</span>f <span style=\"font-weight: bolder;\">writ</span>ten <span style=\"font-weight: bolder;\">cont</span>ent.</p><p>There are some weird things you have to do to make all this work with a webpage and some caveats I added to make it a but more readable and pleasant, but overall it‚Äôs pretty straightforward and was a fun project! I may eventually turn it into a Firefox extension because why not.</p><!-- ---- _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2022/05/21/byonic-reading",
            
            
            
            
            
            "date_published": "2022-05-21T00:00:00+01:00",
            "date_modified": "2022-05-21T00:00:00+01:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2022/05/02/ascii-name",
            "title": "‚å®Ô∏è My Name In ASCII",
            "summary": "Riffing on some ASCII art.",
            "content_text": "I saw some IBM logo[1] in ASCII and wanted to try and recreate it from scratch, so I did and added some shading, too. I‚Äôm sure I‚Äôll add more artistic ones later, once I get bored.‚ñà‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà        ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà    ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà        ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì   ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì    ‚ñì‚ñì‚ñì‚ñì    ‚ñì‚ñì‚ñì‚ñì       ‚ñì‚ñì‚ñì‚ñì  ‚ñì‚ñì‚ñì‚ñì ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì    ‚ñì‚ñì‚ñì‚ñì    ‚ñì‚ñì‚ñì‚ñì       ‚ñì‚ñì‚ñì‚ñì  ‚ñì‚ñì‚ñì‚ñì ‚ñí‚ñí‚ñí ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí ‚ñí‚ñí‚ñí    ‚ñí‚ñí‚ñí‚ñí    ‚ñí‚ñí‚ñí‚ñí       ‚ñí‚ñí‚ñí‚ñí  ‚ñí‚ñí‚ñí‚ñí ‚ñí‚ñí‚ñí  ‚ñí‚ñí‚ñí‚ñí‚ñí  ‚ñí‚ñí‚ñí    ‚ñí‚ñí‚ñí‚ñí    ‚ñí‚ñí‚ñí‚ñí   ‚ñí‚ñí  ‚ñí‚ñí‚ñí‚ñí  ‚ñí‚ñí‚ñí‚ñí ‚ñë‚ñë‚ñë‚ñë   ‚ñë‚ñë‚ñë   ‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë   ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë    ‚ñë    ‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë    ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì  ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí        ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì  ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí       ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñì‚ñì‚ñì‚ñì    ‚ñí‚ñí‚ñí‚ñí       ‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñì‚ñì‚ñì‚ñì    ‚ñí‚ñí‚ñí‚ñí       ‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà    ‚ñì‚ñì‚ñì‚ñì    ‚ñí‚ñí‚ñí‚ñí       ‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà    ‚ñì‚ñì‚ñì‚ñì    ‚ñí‚ñí‚ñí‚ñí   ‚ñí‚ñí  ‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì  ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí   ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà    ‚ñà    ‚ñà‚ñà‚ñà‚ñà  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì  ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí    ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñëReferences  https://github.com/Abhishek-Ghosh/IBM-ASCII-Logo-For-SSH",
            "content_html": "<p>I saw some IBM logo[1] in ASCII and wanted to try and recreate it from scratch, so I did and added some shading, too. I‚Äôm sure I‚Äôll add more artistic ones later, once I get bored.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>‚ñà‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà        ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà    ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà        ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì   ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì    ‚ñì‚ñì‚ñì‚ñì    ‚ñì‚ñì‚ñì‚ñì       ‚ñì‚ñì‚ñì‚ñì  ‚ñì‚ñì‚ñì‚ñì ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì    ‚ñì‚ñì‚ñì‚ñì    ‚ñì‚ñì‚ñì‚ñì       ‚ñì‚ñì‚ñì‚ñì  ‚ñì‚ñì‚ñì‚ñì ‚ñí‚ñí‚ñí ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí ‚ñí‚ñí‚ñí    ‚ñí‚ñí‚ñí‚ñí    ‚ñí‚ñí‚ñí‚ñí       ‚ñí‚ñí‚ñí‚ñí  ‚ñí‚ñí‚ñí‚ñí ‚ñí‚ñí‚ñí  ‚ñí‚ñí‚ñí‚ñí‚ñí  ‚ñí‚ñí‚ñí    ‚ñí‚ñí‚ñí‚ñí    ‚ñí‚ñí‚ñí‚ñí   ‚ñí‚ñí  ‚ñí‚ñí‚ñí‚ñí  ‚ñí‚ñí‚ñí‚ñí ‚ñë‚ñë‚ñë‚ñë   ‚ñë‚ñë‚ñë   ‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë   ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë    ‚ñë    ‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë    ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì  ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí        ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì  ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí       ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñì‚ñì‚ñì‚ñì    ‚ñí‚ñí‚ñí‚ñí       ‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñì‚ñì‚ñì‚ñì    ‚ñí‚ñí‚ñí‚ñí       ‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà    ‚ñì‚ñì‚ñì‚ñì    ‚ñí‚ñí‚ñí‚ñí       ‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà    ‚ñì‚ñì‚ñì‚ñì    ‚ñí‚ñí‚ñí‚ñí   ‚ñí‚ñí  ‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì  ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí   ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà    ‚ñà    ‚ñà‚ñà‚ñà‚ñà  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì  ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí    ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë</code></pre></div></div><h2 id=\"references\">References</h2><ol>  <li>https://github.com/Abhishek-Ghosh/IBM-ASCII-Logo-For-SSH</li></ol>",
            "url": "http://milofultz.com/2022/05/02/ascii-name",
            
            
            
            
            
            "date_published": "2022-05-02T00:00:00+01:00",
            "date_modified": "2022-05-02T00:00:00+01:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2022/04/17/my-task-management",
            "title": "My Task Management System",
            "summary": "The goal of my task management system is mainly to record captured tasks and be reminded that I care about things that aren't shiny objects.",
            "content_text": "The goal of my task management system is mainly to record captured tasks and be reminded that I care about things that aren‚Äôt shiny objects.V2UPDATE: It has been a few months, and I have essentially moved all my tasks to a plaintext file and use my tod_sh program with a simplified version of this system. It just works and is no nonsense.So V1 had its issues. Too much maintenance, too many moving parts. I want something simpler that requires essentially zero upkeep, is easy to search, and takes little to no organization. I really want to avoid a whole program, since that means I have to maintain that whole infrastructure, and I‚Äôd rather be in control of that.So far, a cool alternative I have found is todo.txt[7], which seems straightforward. Syntax is essentially parsed left to right with certain prefixes meaning certain things (reminiscent of Carmack‚Äôs plan files):            Prefix/Symbol      Meaning                  x      An x at the beginning represents complete.              (p)      p being a priority marker of some kind, like A-Z or 1-9.              YYYY-MM-DD      Depending on position, date of completion, creation, or date due.              +project      project being the project name.              @context      context being the context you can perform the task in.              key:value      An arbitrary key/value pair for your own needs      Another quick benefit of this rigid but simple syntax is that getting all your high priority tasks, your tasks from +project, or tasks within a certain @context is as simple as a ‚åò + F, and deleting/moving all your completed tasks from the file is a basic regex away: /^x\\s.+?(?=&gt;\\n)/.ExamplesEach of these are essentially optional, aside from the description, which is comprised of some text and the project, the context, and any other key/value pairs.A more complex example:x (A) 20211231 20211212 Cancel media subscriptions +budget @home due:20211231Completex  Priority  (A)      Completion Date      20211231               Creation Date               20211212                        Description                        Cancel media subscriptions +budget @home due:20211231And a much simpler one:x Cancel media subscriptionsDuh, right? That‚Äôs the goal.Obviously you get more benefit of organization/search with more metadata, but with less, you don‚Äôt have much to upkeep, so I will probably start with much less and bring in more only when necessary. I definitely have a problem with trying to do much all at once and being way too optimistic about what is possible, hence this pursuit and these goals.My SystemMy system within this will be a single txt file (since I will be able to open it on Dropbox mobile) that can be searched easily.Like I had with V1, I‚Äôll have my capture space where things get forwarded in from my email, random stuff I see online, conversations with friends, whatever. Then that will be processed at a regular interval and anything that is actionable can go into there.This will notably not be a place for dumping unrefined/unactionable tasks or what Tiago Forte‚Äôs PARA system[8] calls ‚ÄúAreas‚Äù (or continuous areas of commitment). These ‚ÄúAreas‚Äù include routines, habits, rituals, jobs, relationships, and essentially anything that is not a simple to define task or project with a defined end goal or end date.V1Note: This system used to work when I had a more regular schedule and was a freelancer. Now, it has become difficult to maintain something so complicated. I‚Äôm looking at other alternatives.This task management system is essentially a stripped down and extensible Getting Things Done system that is application- and tech-agnostic, largely based on this post by Sandra at idiomdrottning.org. I use this with a computer, but this could easily be done without one and some hipster PDAs or just notebooks.The goal of this system is to externalize as many of my tasks and projects away from my brain into something that I can fully trust. If you don‚Äôt have to worry about remembering random little things while you do something else, you can work smarter and not harder, as well as do useful analysis on your past, present, and future work.The SystemThe core system is comprised of these areas:  the inbox,  the backlog,  the projects,  the tasks,  and the todo.These areas can manifest as individual documents (which is what I do), but not necessarily.The InboxThe inbox is where I capture all my ideas and tasks that float around my head, I see online, I get as emails or texts, etc., etc. You really want to put everything in there. Assume anything that is not put in the inbox will be forgotten, because most of the time, that‚Äôs true. Emptying my workspaces (brain, email inbox, text messages, etc.) leads to more focused work and less time worrying about what I ‚Äúshould‚Äù be doing.This file is just a pile of unorganized stuff that will be processed later. I also use multiple inboxes, to ensure that I can capture wherever I am simply and easily.The BacklogThe backlog is where projects and tasks go that are not relevant right now, but I do want to do them sometime. This helps keep the projects document current and relevant while not losing anything important.This file is an unorganized pile of projects and tasks.The ProjectsThe projects are where I put anything that can‚Äôt (or shouldn‚Äôt) be done all at once. If a task needs to be broken down, it is a project. And that means if it needs to be broken down for you. If you have a hard time with task XYZ and breaking it down helps, do it.If a task within my project requires multiple steps, I break it down further within the same project. If my project is so big that it feels like I should break it down into more projects and that benefits me, I‚Äôll do it but making sure my projects always have extremely actionable tasks.This file is a list of projects, each with its own list of tasks.The TasksThe tasks are where I put tasks that are not associated with any projects. These are almost always quick and simple tasks that require nothing to prepare (as that would be more than one step and thus, a project).I also include a list of tasks that I need to do with regularity but are not rigidly scheduled (e.g. get a haircut), organized by what needs to be done next.This file is a list of recurring and non-recurring tasks.The TodoThe todo area is where I keep my todo list for the day, as well as templates of recurring tasks. This is what I will reference throughout the day as my stuff I need to do.At the bottom of my todo is a list that I use as a template for tasks I want/need to do every day, like feed my plants, meditate, read, etc.This file is comprised of a few separated sections with the tasks for the day at the top.OthersI also have a document where I keep things I want to read or listen to later, but I have found that I don‚Äôt ever really go in there as I don‚Äôt have a prompt to do so. I think if I were able to maintain everything within this system, it would be a win.Processing The InboxUsing a modified Eisenhower square, I will go through and be brutally honest about what is in there. Anything in this inbox needs to be placed into one of these categories:  Delete: be ruthless! Not everything needs to be done and the 80/20 mindset will benefit you here.  Delegate: this is something that needs to be done but is not my job. This is most applicable in work settings or for people who have assistants.  Do it: if the thing in my inbox will take less than five minutes, I‚Äôll just do it right then. No point in putting something that simple into your system.  Schedule: if it is something that must be done on a certain date like an appointment, I put it in my calendar. (If you just want to do it on a particular date, don‚Äôt do this. Put it in your projects or tasks instead.)  Backlog: it‚Äôs not important, but it is something I‚Äôll want to come back to eventually.  Projects: it‚Äôs something that requires multiple individual tasks. I‚Äôll put it in my projects and flesh it out into multiple discrete tasks.  Tasks: it‚Äôs something that doesn‚Äôt need to be broken down.I strive to have an empty inbox. An inbox is not a todo list and it shouldn‚Äôt be.For anything remaining within your system, the process flows like this:       ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ PROJECTS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê INBOX ‚îº‚îÄ BACKLOG ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îÇ       ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ TASKS‚îÄ‚îÄ‚îÄ‚îÄ‚î§                                TODOThings go from the inbox into projects or tasks, depending on their complexity, and then from projects or tasks into todo. (And to reiterate, lots of stuff from the inbox should be deleted, never to be seen again. Getting things done is also about having less things to do.)Using The SystemEach day, I delete my previous todo list, refill it with my daily template, and peruse my projects and tasks for more tasks to add for the day. When collecting from projects, I mark them as done, and from tasks, I delete them. I mark things in my todo as complete so I can log them at the end of the day.At a semi-regular interval (at this point, whenever I feel like it, which isn‚Äôt great), I review my projects, tasks, and backlog to ensure they are up to date and still relevant. This usually means cutting out the cruft and filling in gaps that I missed within projects.MetaI currently use TXT files with Dropbox, as that is where I keep my stuff synced anyway and you can edit TXT files on your phone in the Dropbox app. I assume you could do this whole system in the Notes app on OSX, as it syncs well, too.For the inbox, ensure that you can capture thoughts, todos, and ideas anywhere. That can mean you have a pen and paper system but have a Trello to forward emails to for simplicity and a notes app on your phone for quick jotting when your normal inbox isn‚Äôt handy. I use a TXT file, a Trello for emails and webpages I find, and my journal for brain dumps that usually happen at the beginning of the day while journaling.References  https://idiomdrottning.org/gtd-basics  https://idiomdrottning.org/supposedly-simpler-than-gtd  https://danlucraft.com/blog/2008/04/plain-text-organizer/  http://www.43folders.com/2005/08/17/life-inside-one-big-text-file  http://web.archive.org/web/20210411064159/https://www.curaytor.com/blog/Your-Inbox-is-Not-a-To-Do-List  https://jamesclear.com/eisenhower-box  https://github.com/todotxt/todo.txt  https://maggieappleton.com/basb  https://codeberg.org/milofultz/tod_sh",
            "content_html": "<p>The goal of my task management system is mainly to record captured tasks and be reminded that I care about things that aren‚Äôt shiny objects.</p><h2 id=\"v2\">V2</h2><p><em>UPDATE: It has been a few months, and I have essentially moved all my tasks to a plaintext file and use my <a href=\"https://codeberg.org/milofultz/tod_sh\"><code class=\"highlighter-rouge\">tod_sh</code></a> program with a simplified version of this system. It just works and is no nonsense.</em></p><p>So V1 had its issues. Too much maintenance, too many moving parts. I want something simpler that requires essentially zero upkeep, is easy to search, and takes little to no organization. I <em>really</em> want to avoid a whole program, since that means I have to maintain that whole infrastructure, and I‚Äôd rather be in control of that.</p><p>So far, a cool alternative I have found is <a href=\"https://github.com/todotxt/todo.txt\">todo.txt</a>[7], which seems straightforward. Syntax is essentially parsed left to right with certain prefixes meaning certain things (reminiscent of <a href=\"https://www.tinybrain.fans/the-carmack-plan.html\">Carmack‚Äôs plan files</a>):</p><table>  <thead>    <tr>      <th>Prefix/Symbol</th>      <th>Meaning</th>    </tr>  </thead>  <tbody>    <tr>      <td><code class=\"highlighter-rouge\">x</code></td>      <td>An <code class=\"highlighter-rouge\">x</code> at the beginning represents complete.</td>    </tr>    <tr>      <td><code class=\"highlighter-rouge\">(p)</code></td>      <td><code class=\"highlighter-rouge\">p</code> being a priority marker of some kind, like A-Z or 1-9.</td>    </tr>    <tr>      <td><code class=\"highlighter-rouge\">YYYY-MM-DD</code></td>      <td>Depending on position, date of completion, creation, or date due.</td>    </tr>    <tr>      <td><code class=\"highlighter-rouge\">+project</code></td>      <td><code class=\"highlighter-rouge\">project</code> being the project name.</td>    </tr>    <tr>      <td><code class=\"highlighter-rouge\">@context</code></td>      <td><code class=\"highlighter-rouge\">context</code> being the context you can perform the task in.</td>    </tr>    <tr>      <td><code class=\"highlighter-rouge\">key:value</code></td>      <td>An arbitrary <code class=\"highlighter-rouge\">key</code>/<code class=\"highlighter-rouge\">value</code> pair for your own needs</td>    </tr>  </tbody></table><p>Another quick benefit of this rigid but simple syntax is that getting all your high priority tasks, your tasks from <code class=\"highlighter-rouge\">+project</code>, or tasks within a certain <code class=\"highlighter-rouge\">@context</code> is as simple as a <kbd>‚åò</kbd> + <kbd>F</kbd>, and deleting/moving all your completed tasks from the file is a basic regex away: <code class=\"highlighter-rouge\">/^x\\s.+?(?=&gt;\\n)/</code>.</p><h3 id=\"examples\">Examples</h3><p>Each of these are essentially optional, aside from the <strong>description</strong>, which is comprised of some text and the project, the context, and any other key/value pairs.</p><p>A more complex example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>x (A) 20211231 20211212 Cancel media subscriptions +budget @home due:20211231Completex  Priority  (A)      Completion Date      20211231               Creation Date               20211212                        Description                        Cancel media subscriptions +budget @home due:20211231</code></pre></div></div><p>And a much simpler one:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>x Cancel media subscriptions</code></pre></div></div><p>Duh, right? <strong>That‚Äôs</strong> the goal.</p><p>Obviously you get more benefit of organization/search with more metadata, but with less, you don‚Äôt have much to upkeep, so I will probably start with much less and bring in more <strong>only when necessary</strong>. I definitely have a problem with trying to do much all at once and being way too optimistic about what is possible, hence this pursuit and these goals.</p><h3 id=\"my-system\">My System</h3><p>My system within this will be a single <code class=\"highlighter-rouge\">txt</code> file (since I will be able to open it on Dropbox mobile) that can be searched easily.</p><p>Like I had with V1, I‚Äôll have my capture space where things get forwarded in from my email, random stuff I see online, conversations with friends, whatever. Then that will be processed at a regular interval and anything that is actionable can go into there.</p><p>This will notably <strong>not</strong> be a place for dumping unrefined/unactionable tasks or what Tiago Forte‚Äôs PARA system[8] calls ‚ÄúAreas‚Äù (or continuous areas of commitment). These ‚ÄúAreas‚Äù include routines, habits, rituals, jobs, relationships, and essentially anything that is not a simple to define task or project with a defined end goal or end date.</p><h2 id=\"v1\">V1</h2><p><em>Note: This system used to work when I had a more regular schedule and was a freelancer. Now, it has become difficult to maintain something so complicated. I‚Äôm looking at other alternatives.</em></p><p>This task management system is essentially a stripped down and extensible Getting Things Done system that is application- and tech-agnostic, largely based on <a href=\"https://merveilles.town/web/statuses/107121945481166989\">this post by Sandra at idiomdrottning.org</a>. I use this with a computer, but this could easily be done without one and some <a href=\"https://en.wikipedia.org/wiki/Hipster_PDA\">hipster PDAs</a> or just notebooks.</p><p>The goal of this system is to externalize as many of my tasks and projects away from my brain into something that I can fully trust. If you don‚Äôt have to worry about remembering random little things while you do something else, you can work smarter and not harder, as well as do useful analysis on your past, present, and future work.</p><h3 id=\"the-system\">The System</h3><p>The core system is comprised of these areas:</p><ol>  <li>the <strong>inbox</strong>,</li>  <li>the <strong>backlog</strong>,</li>  <li>the <strong>projects</strong>,</li>  <li>the <strong>tasks</strong>,</li>  <li>and the <strong>todo</strong>.</li></ol><p>These areas can manifest as individual documents (which is what I do), but <a href=\"https://danlucraft.com/blog/2008/04/plain-text-organizer/\">not</a> <a href=\"http://www.43folders.com/2005/08/17/life-inside-one-big-text-file\">necessarily</a>.</p><h4 id=\"the-inbox\">The Inbox</h4><p>The inbox is where I capture all my ideas and tasks that float around my head, I see online, I get as emails or texts, etc., etc. You really want to put <strong>everything</strong> in there. Assume anything that is not put in the inbox will be forgotten, because most of the time, that‚Äôs true. Emptying my workspaces (brain, email inbox, text messages, etc.) leads to more focused work and less time worrying about what I ‚Äúshould‚Äù be doing.</p><p>This file is just a pile of unorganized stuff that will be processed later. I also use multiple inboxes, to ensure that I can capture wherever I am simply and easily.</p><h4 id=\"the-backlog\">The Backlog</h4><p>The backlog is where projects and tasks go that are not relevant right now, but I <em>do</em> want to do them sometime. This helps keep the projects document current and relevant while not losing anything important.</p><p>This file is an unorganized pile of projects and tasks.</p><h4 id=\"the-projects\">The Projects</h4><p>The projects are where I put anything that can‚Äôt (or shouldn‚Äôt) be done all at once. If a task needs to be broken down, it is a project. And that means if it needs to be broken down <strong>for you</strong>. If you have a hard time with task XYZ and breaking it down helps, do it.</p><p>If a task within my project requires multiple steps, I break it down further within the same project. If my project is so big that it feels like I should break it down into more projects and that benefits me, I‚Äôll do it but making sure my projects always have extremely actionable tasks.</p><p>This file is a list of projects, each with its own list of tasks.</p><h4 id=\"the-tasks\">The Tasks</h4><p>The tasks are where I put tasks that are not associated with any projects. These are almost always quick and simple tasks that require nothing to prepare (as that would be more than one step and thus, a project).</p><p>I also include a list of tasks that I need to do with regularity but are not rigidly scheduled (e.g. get a haircut), organized by what needs to be done next.</p><p>This file is a list of recurring and non-recurring tasks.</p><h4 id=\"the-todo\">The Todo</h4><p>The todo area is where I keep my todo list for the day, as well as templates of recurring tasks. This is what I will reference throughout the day as my stuff I need to do.</p><p>At the bottom of my todo is a list that I use as a template for tasks I want/need to do every day, like feed my plants, meditate, read, etc.</p><p>This file is comprised of a few separated sections with the tasks for the day at the top.</p><h4 id=\"others\">Others</h4><p>I also have a document where I keep things I want to read or listen to later, but I have found that I don‚Äôt ever really go in there as I don‚Äôt have a prompt to do so. I think if I were able to maintain <em>everything</em> within this system, it would be a win.</p><hr /><h4 id=\"processing-the-inbox\">Processing The Inbox</h4><p>Using a modified <a href=\"https://jamesclear.com/eisenhower-box\">Eisenhower square</a>, I will go through and be brutally honest about what is in there. Anything in this inbox needs to be placed into one of these categories:</p><ul>  <li>Delete: be ruthless! Not everything needs to be done and the <a href=\"https://en.wikipedia.org/wiki/Pareto_principle\">80/20</a> mindset will benefit you here.</li>  <li>Delegate: this is something that needs to be done but is not my job. This is most applicable in work settings or for people who have assistants.</li>  <li>Do it: if the thing in my inbox will take less than five minutes, I‚Äôll just do it right then. No point in putting something that simple into your system.</li>  <li>Schedule: if it is something that must be done on a certain date like an appointment, I put it in my calendar. (If you just <em>want</em> to do it on a particular date, <strong>don‚Äôt do this</strong>. Put it in your projects or tasks instead.)</li>  <li>Backlog: it‚Äôs not important, but it is something I‚Äôll want to come back to eventually.</li>  <li>Projects: it‚Äôs something that requires multiple individual tasks. I‚Äôll put it in my projects and flesh it out into multiple discrete tasks.</li>  <li>Tasks: it‚Äôs something that doesn‚Äôt need to be broken down.</li></ul><p>I strive to have an empty inbox. <a href=\"http://web.archive.org/web/20210411064159/https://www.curaytor.com/blog/Your-Inbox-is-Not-a-To-Do-List\">An inbox is not a todo list</a> and it shouldn‚Äôt be.</p><p>For anything remaining within your system, the process flows like this:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>       ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ PROJECTS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê INBOX ‚îº‚îÄ BACKLOG ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îÇ       ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ TASKS‚îÄ‚îÄ‚îÄ‚îÄ‚î§                                TODO</code></pre></div></div><p>Things go from the inbox into projects or tasks, depending on their complexity, and then from projects or tasks into todo. (And to reiterate, lots of stuff from the inbox should be deleted, never to be seen again. Getting things done is also about having less things to do.)</p><h4 id=\"using-the-system\">Using The System</h4><p>Each day, I delete my previous todo list, refill it with my daily template, and peruse my projects and tasks for more tasks to add for the day. When collecting from projects, I mark them as done, and from tasks, I delete them. I mark things in my todo as complete so I can log them at the end of the day.</p><p>At a semi-regular interval (at this point, whenever I feel like it, which isn‚Äôt great), I review my projects, tasks, and backlog to ensure they are up to date and still relevant. This usually means cutting out the cruft and filling in gaps that I missed within projects.</p><h3 id=\"meta\">Meta</h3><p>I currently use TXT files with Dropbox, as that is where I keep my stuff synced anyway and you can edit TXT files on your phone in the Dropbox app. I assume you could do this whole system in the Notes app on OSX, as it syncs well, too.</p><p>For the inbox, ensure that you can capture thoughts, todos, and ideas anywhere. That can mean you have a pen and paper system but have a Trello to forward emails to for simplicity and a notes app on your phone for quick jotting when your normal inbox isn‚Äôt handy. I use a TXT file, a Trello for emails and webpages I find, and my journal for brain dumps that usually happen at the beginning of the day while journaling.</p><h2 id=\"references\">References</h2><ol>  <li>https://idiomdrottning.org/gtd-basics</li>  <li>https://idiomdrottning.org/supposedly-simpler-than-gtd</li>  <li>https://danlucraft.com/blog/2008/04/plain-text-organizer/</li>  <li>http://www.43folders.com/2005/08/17/life-inside-one-big-text-file</li>  <li>http://web.archive.org/web/20210411064159/https://www.curaytor.com/blog/Your-Inbox-is-Not-a-To-Do-List</li>  <li>https://jamesclear.com/eisenhower-box</li>  <li>https://github.com/todotxt/todo.txt</li>  <li>https://maggieappleton.com/basb</li>  <li>https://codeberg.org/milofultz/tod_sh</li></ol>",
            "url": "http://milofultz.com/2022/04/17/my-task-management",
            
            
            
            
            
            "date_published": "2022-04-17T00:00:00+01:00",
            "date_modified": "2022-04-17T00:00:00+01:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2022/04/09/bonzo-buddy",
            "title": "ü¶ç Bonzo Buddy - Delegate your self-care",
            "summary": "Bonzo Buddy is a riff on Taylor.town's nowify to help delegate your self-care and other reminders to the computer.",
            "content_text": "Check out the project files on CodebergI have problems with taking care of myself. If given the option to do something that will give me long term benefits versus RIGHT NOW, I will almost 100% take the latter. That is, if I am the one who thinks of it. If somebody else mentions it, or I read about it in a book or something, my motivation increases an absurd and not logical amount, leading me to action.Is this ideal? Absolutely not. Is this the way my brain works? Yes, at least it seems so right now. So instead of doing what I usually do in this kind of a situation, which is just to fruitlessly ask ‚Äúwhy?‚Äù a hundred times until I get frustrated, I found a possible solution.A member of the Merveilles posted a link to Taylor.town‚Äôs nowify and it was intriguing. I‚Äôve made some projects that try and do this for me forever, expanding on the Pomodoro technique, and tried to implement different prompts throughout my life, with alarms, meditation, etc., but none of them seemed to stick.But this one seemed to make a little more sense for some reason. It‚Äôs barebones, simple, and self-perpetuating. It just does the thing as long as it is running, asking you if you‚Äôve done a thing yet that you yourself asked to be reminded of. There is nothing revolutionary about this, in fact this is the whole class of task managers, etc. that exist. But those are HUGE and made for much more complex uses. I just need a tap on the shoulder every once in a while.That‚Äôs all this does. At regular intervals (or until it is finished), you just get a ping and a prompt asking you if it‚Äôs done, not done, or to skip it. That‚Äôs it. Over the last week, I have done more to keep myself feeling emotionally regulated and physically healthy than I have in a while, and I feel great.So in summary, if you have daily one-time or recurring tasks that don‚Äôt have a specific time they need to be done, this could help you. I built this over a weekend with little iterations since then, and I would recommend just building your own, too, since it‚Äôs easy and lets you add your own little features along the way.",
            "content_html": "<p><a href=\"https://codeberg.org/milofultz/bonzo-buddy\">Check out the project files on Codeberg</a></p><p>I have problems with taking care of myself. If given the option to do something that will give me long term benefits versus RIGHT NOW, I will almost 100% take the latter. That is, if <em>I</em> am the one who thinks of it. If somebody else mentions it, or I read about it in a book or something, my motivation increases an absurd and not logical amount, leading me to action.</p><p>Is this ideal? Absolutely not. Is this the way my brain works? Yes, at least it seems so right now. So instead of doing what I usually do in this kind of a situation, which is just to fruitlessly ask ‚Äúwhy?‚Äù a hundred times until I get frustrated, I found a possible solution.</p><p>A member of the <a href=\"https://merveilles.town\">Merveilles</a> posted a link to <a href=\"https://taylor.town/projects/nowify\">Taylor.town‚Äôs nowify</a> and it was intriguing. I‚Äôve made some projects that try and do this for me forever, expanding on the Pomodoro technique, and tried to implement different prompts throughout my life, with alarms, meditation, etc., but none of them seemed to stick.</p><p>But this one seemed to make a little more sense for some reason. It‚Äôs barebones, simple, and self-perpetuating. It just does the thing as long as it is running, asking you if you‚Äôve done a thing yet <em>that you yourself asked to be reminded of</em>. There is nothing revolutionary about this, in fact this is the whole class of task managers, etc. that exist. But those are HUGE and made for much more complex uses. I just need a tap on the shoulder every once in a while.</p><p>That‚Äôs all this does. At regular intervals (or until it is finished), you just get a ping and a prompt asking you if it‚Äôs done, not done, or to skip it. That‚Äôs it. Over the last week, I have done more to keep myself feeling emotionally regulated and physically healthy than I have in a while, and I feel great.</p><p>So in summary, if you have daily one-time or recurring tasks that don‚Äôt have a specific time they need to be done, this could help you. I built this over a weekend with little iterations since then, and I would recommend just building your own, too, since it‚Äôs easy and lets you add your own little features along the way.</p><!-- ---- _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2022/04/09/bonzo-buddy",
            
            
            
            
            
            "date_published": "2022-04-09T00:00:00+01:00",
            "date_modified": "2022-04-09T00:00:00+01:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2022/03/12/brainfuck",
            "title": "üß† Making A Brainfuck Interpreter",
            "summary": "I made a brainfuck interpreter in C",
            "content_text": "Check out the my interpreter on Codeberg // The original minified interpreter by Urban MuellerFor a while now, I‚Äôve been digging into C to get a better handle of low-level languages, as well as various esolangs like FRACTRAN. When I found brainfuck, a Turing-complete language consisting of only 8 characters, I knew I had to do something with it.I‚Äôve always heard that one of brainfuck‚Äôs interesting uses for a programmer is that implementing a brainfuck interpreter in a new language is a really good way to learn how that language works. This case was no exception, as my initial run was to build it all from scratch in C, and I really did learn quite a bit. Beyond this, this stoked my desire to look into building compilers, interpreters, and language design in general.While this version was effective and worked, I also learned quite a bit and realized how much simpler I could have made my interpreter by looking at the original one by Urban Mueller (the language‚Äôs creator). This is a great example of super minified code, and I really enjoyed untying this knot and learning all the subtle intricacies of order of operations with prefix/postfix, comma operators, OR‚Äôs in place of if statements, etc.",
            "content_html": "<p><a href=\"https://codeberg.org/milofultz/brainfuck\">Check out the my interpreter on Codeberg</a> // <a href=\"https://codeberg.org/milofultz/decrypting-the-original-brainfuck-interpreter/src/branch/main/1%20pbi.c\">The original minified interpreter by Urban Mueller</a></p><p>For a while now, I‚Äôve been digging into C to get a better handle of low-level languages, as well as various esolangs like <a href=\"https://www.tinybrain.fans/fractran.html\">FRACTRAN</a>. When I found <a href=\"https://www.tinybrain.fans/brainfuck.html\">brainfuck</a>, a Turing-complete language consisting of only 8 characters, I knew I had to do <em>something</em> with it.</p><p>I‚Äôve always heard that one of brainfuck‚Äôs interesting uses for a programmer is that implementing a brainfuck interpreter in a new language is a really good way to learn how that language works. This case was no exception, as my initial run was to build it all from scratch in C, and I really did learn quite a bit. Beyond this, this stoked my desire to look into building compilers, interpreters, and language design in general.</p><p>While this version was effective and worked, I also learned quite a bit and realized how much simpler I could have made my interpreter by looking at the <a href=\"https://codeberg.org/milofultz/decrypting-the-original-brainfuck-interpreter/src/branch/main/1%20pbi.c\">original one by Urban Mueller (the language‚Äôs creator)</a>. This is a great example of super minified code, and I really enjoyed <a href=\"https://codeberg.org/milofultz/decrypting-the-original-brainfuck-interpreter/src/branch/main/3%20pbi%20-%20readable.c\">untying this knot</a> and learning all the subtle intricacies of order of operations with prefix/postfix, comma operators, OR‚Äôs in place of if statements, etc.</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2022/03/12/brainfuck",
            
            
            
            
            
            "date_published": "2022-03-12T00:00:00+00:00",
            "date_modified": "2022-03-12T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2022/02/04/deciphering-minimal-roguelike",
            "title": "üîé Deciphering This Minimal Roguelike in C",
            "summary": "üîé Deciphering This Minimal Roguelike in C",
            "content_text": "I recently found this rad minimal roguelike and wanted to try and figure out what the heck is going on. It‚Äôs only 512 bytes in C, which is insane, so I had to try and solve this little puzzle I was presented.It‚Äôs not worth going into super detail here, as it‚Äôs all in the code, and seeing it move from a jumbled code salad into something meaningful is so fascinating to me.Check out the original article and my annotated version.",
            "content_html": "<p>I recently found <a href=\"http://www.locklessinc.com/articles/512byte_roguelike/\">this rad minimal roguelike</a> and wanted to try and figure out what the heck is going on. It‚Äôs only 512 bytes in C, which is insane, so I had to try and solve this little puzzle I was presented.</p><p>It‚Äôs not worth going into super detail here, as it‚Äôs all in the code, and seeing it move from a jumbled code salad into something meaningful is so fascinating to me.</p><p>Check out <a href=\"http://www.locklessinc.com/articles/512byte_roguelike/\">the original article</a> and <a href=\"https://codeberg.org/milofultz/decrypting-the-minimal-roguelike/src/branch/main/3_annotated.c\">my annotated version</a>.</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2022/02/04/deciphering-minimal-roguelike",
            
            
            
            
            
            "date_published": "2022-02-04T00:00:00+00:00",
            "date_modified": "2022-02-04T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2022/02/01/sub2pub",
            "title": "üíª Sub2Pub - Convert Youtube Subtitles to EPUBs",
            "summary": "Sub2Pub - Convert Youtube Subtitles to EPUBs",
            "content_text": "Check out the project files on CodebergConverts the subtitles of a Youtube video into an EPUB, using yt-dlp, Calibre, and basic *nix tools in the shell. This technically works with suto generated subtitles, but it isn‚Äôt pretty.Pretty much downloads the raw subtitle file from the YT server, formats everything as an HTML file, and then converst it directly. Works pretty well, and was really fun!",
            "content_html": "<p><a href=\"https://codeberg.org/milofultz/sub2pub\">Check out the project files on Codeberg</a></p><p>Converts the subtitles of a Youtube video into an EPUB, using <a href=\"https://github.com/yt-dlp/yt-dlp\">yt-dlp</a>, <a href=\"https://manual.calibre-ebook.com/generated/en/cli-index.html\">Calibre</a>, and basic *nix tools in the shell. This technically works with suto generated subtitles, but it isn‚Äôt pretty.</p><p>Pretty much downloads the raw subtitle file from the YT server, formats everything as an HTML file, and then converst it directly. Works pretty well, and was really fun!</p>",
            "url": "http://milofultz.com/2022/02/01/sub2pub",
            
            
            
            
            
            "date_published": "2022-02-01T00:00:00+00:00",
            "date_modified": "2022-02-01T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2022/01/31/web-radio",
            "title": "My Favorite Web Radio Stations",
            "summary": "Web radio is sick and usually just community stations, which rule.",
            "content_text": "  Bootie Mashup Radio  DnB Radio  Freeform Portland  KWVA - University of Oregon Campus Radio  I can‚Äôt remember the name of this, but I must have saved it for some reason  UKG247 - UK Garage  XRAY PortlandSilly but cool:  Wreckage Systems  RELENTLESS DOPPELGANGER",
            "content_html": "<ul>  <li><a href=\"https://c7.radioboss.fm:18205/stream\">Bootie Mashup Radio</a></li>  <li><a href=\"http://trace.dnbradio.com:8000/dnbradio_main.mp3\">DnB Radio</a></li>  <li><a href=\"http://listen.freeformportland.org:8000/stream\">Freeform Portland</a></li>  <li><a href=\"http://kwvaradio.uoregon.edu:8000/stream/1/\">KWVA - University of Oregon Campus Radio</a></li>  <li><a href=\"https://project.stream.laut.fm/project?pl=m3u\">I can‚Äôt remember the name of this, but I must have saved it for some reason</a></li>  <li><a href=\"http://87.117.201.160:8200/listen.pls\">UKG247 - UK Garage</a></li>  <li><a href=\"http://listen.xray.fm:8000/stream\">XRAY Portland</a></li></ul><p>Silly but cool:</p><ul>  <li><a href=\"https://www.youtube.com/watch?v=PgbrzmFGUyQ\">Wreckage Systems</a></li>  <li><a href=\"https://www.youtube.com/watch?v=MwtVkPKx3RA&amp;t=0s\">RELENTLESS DOPPELGANGER</a></li></ul><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2022/01/31/web-radio",
            
            
            
            
            
            "date_published": "2022-01-31T00:00:00+00:00",
            "date_modified": "2022-01-31T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2022/01/28/tod-shell",
            "title": "üíª Tod - Plan and Manage Daily Tasks In The CLI (Shell)",
            "summary": "Tod - Plan and Manage Daily Tasks In The CLI",
            "content_text": "Check out the project files on CodebergA straightforward and simple task manager for your terminal.Ever since I wrote Tod the first time, I‚Äôve been using it for miscellaneous tasks at home and at work. It‚Äôs proven very effective as a barebones way to maintain focus on what‚Äôs important through the day and between sessions, and it‚Äôs one less Electron app to burden my computer.In the meantime, I‚Äôve completed a coding boot camp and started a new job working in full-stack web development, but still have a love of minimizing dependencies and aiming for ultimate simplicity without sacrificing usability. And while the Python implementation I have works, I knew I could make it simpler, faster, and less resource intensive.The Python VersionWhile this version served me well, it has grown very crufty and become a bit unwieldy, considering its simple purpose (not unlike essentially any other task management application out there, s/o to Zawinski‚Äôs Law). It became this way because this project was more or less a scratchpad for ideas and also that I built it when I had very bad (no) ideas regarding planning, maintenance, or any kind of long-termism.I‚Äôve been using it for work and it slowly dawned on me that most of the things I do are really either not that important or could be done without spinlocking the terminal window the whole time the timer isn‚Äôt running.So my goals in improving Tod were:  Removing the idle running of Tod when not active  Removing all the nasty un/underutilized cruft  Improving portability and simplicity  Learning more about C and the ShellSo surprisingly, most of shell programming is simple. Unix tools seem to be able to do everything in regards to file or line manipulation, with sed, awk, and perl being the main players. The one non-shell thing I wanted to learn more about and use (which is still probably unnecessary, but fun) was C and ncurses to build a timer, which is still pretty darn simple, fun, and straightforward. And at the end of the day, I made my timer for this using a background process in the shell anyway ü§∑‚Äç‚ôÄÔ∏è.Putting all this together, and it can do pretty much everything I care about on a day-to-day, though I will see what features I am missing from this stripped down version as I go. I love this process of rebuilding from scratch, seeing what I‚Äôve learned and how I can do better, as I still suck at almost everything, but manage to suck a little less each time.",
            "content_html": "<p><a href=\"https://codeberg.org/milofultz/tod_sh\">Check out the project files on Codeberg</a></p><p>A straightforward and simple task manager for your terminal.</p><p>Ever since I wrote Tod <a href=\"/2020/10/17/tod-python\">the first time</a>, I‚Äôve been using it for miscellaneous tasks at home and at work. It‚Äôs proven very effective as a barebones way to maintain focus on what‚Äôs important through the day and between sessions, and <a href=\"/2020/11/09/the-point-of-diminis\">it‚Äôs one less Electron app to burden my computer</a>.</p><p>In the meantime, I‚Äôve completed a coding boot camp and started a new job working in full-stack web development, but still have a love of minimizing dependencies and aiming for ultimate simplicity without sacrificing usability. And while the Python implementation I have works, I knew I could make it simpler, faster, and less resource intensive.</p><h2 id=\"the-python-version\">The Python Version</h2><p>While this version served me well, it has grown very crufty and become a bit unwieldy, considering its simple purpose (not unlike essentially any other task management application out there, s/o to <a href=\"https://en.wikipedia.org/wiki/Jamie_Zawinski#Zawinski's_Law\">Zawinski‚Äôs Law</a>). It became this way because this project was more or less a scratchpad for ideas and also that I built it when I had very bad (no) ideas regarding planning, maintenance, or any kind of long-termism.</p><p>I‚Äôve been using it for work and it slowly dawned on me that most of the things I do are really either not that important or could be done without spinlocking the terminal window the whole time the timer isn‚Äôt running.</p><p>So my goals in improving Tod were:</p><ul>  <li>Removing the idle running of Tod when not active</li>  <li>Removing all the nasty un/underutilized cruft</li>  <li>Improving portability and simplicity</li>  <li>Learning more about C and the Shell</li></ul><p>So surprisingly, most of shell programming is simple. Unix tools seem to be able to do everything in regards to file or line manipulation, with <code class=\"highlighter-rouge\">sed</code>, <code class=\"highlighter-rouge\">awk</code>, and <code class=\"highlighter-rouge\">perl</code> being the main players. The one non-shell thing I wanted to learn more about and use (which is still probably unnecessary, but fun) was C and ncurses to build a timer, which is still pretty darn simple, fun, and straightforward. And at the end of the day, I made my timer for this using a background process in the shell anyway ü§∑‚Äç‚ôÄÔ∏è.</p><p>Putting all this together, and it can do pretty much everything I care about on a day-to-day, though I will see what features I am missing from this stripped down version as I go. I love this process of rebuilding from scratch, seeing what I‚Äôve learned and how I can do better, as I still suck at almost everything, but manage to suck a little less each time.</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2022/01/28/tod-shell",
            
            
            
            
            
            "date_published": "2022-01-28T00:00:00+00:00",
            "date_modified": "2022-01-28T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2022/01/23/media",
            "title": "üôàüôâüôä My Favorite Media",
            "summary": "These are some essays that I want to remember to read.",
            "content_text": "Books  Marshall Rosenberg‚Äôs ‚ÄúNonviolent Communication‚Äù  Douglas Adams‚Äô ‚ÄúHitchhiker‚Äôs Guide to the Galaxy‚Äù  Irvin D. Yalom‚Äôs ‚ÄúStaring at the Sun‚Äù  Brian Christian and Tom Griffiths‚Äô ‚ÄúAlgorithms to Live By‚ÄùEssays      Bill Watterson‚Äôs ‚ÄúSOME THOUGHTS ON THE REAL WORLD BY ONE WHO GLIMPSED IT AND FLED‚Äù          When it seemed I would be writing about ‚ÄúMidnite Madness Sale-abrations‚Äù for the rest of my life, a friend used to console me that cream always rises to the top. I used to think, so do people who throw themselves into the sea.            Danny Barnes‚Äô ‚Äúhow to play in someone else‚Äôs band {gain twenty years of road experience with a five minute read}‚Äù          your path for achieving success is two fold: 1. play great. 2. in all things, be easy to deal with.            Jeremy Wagner‚Äôs ‚ÄúMake it boring‚Äù          The more common the problem, the better. Design systems should prioritize the mundane.      Poems  The Calf-PathVideos  The Shining  The Fifth Element  My Dinner With Andr√©Music  Deerhoof - La Isla Bonita  Earth, Wind &amp; Fire          Spirit      All ‚ÄòN All      I Am      Faces        Frank Zappa - Apostrophe  Judee Sill - Heart Flood  peer - Dances EP  Peter Gabriel - So  Tron - Original OST  WITT - Whip",
            "content_html": "<h2 id=\"books\">Books</h2><ul>  <li><a href=\"https://www.nonviolentcommunication.com/\">Marshall Rosenberg‚Äôs ‚ÄúNonviolent Communication‚Äù</a></li>  <li>Douglas Adams‚Äô ‚ÄúHitchhiker‚Äôs Guide to the Galaxy‚Äù</li>  <li><a href=\"https://www.yalom.com/staring-at-the-sun\">Irvin D. Yalom‚Äôs ‚ÄúStaring at the Sun‚Äù</a></li>  <li><a href=\"https://algorithmstoliveby.com/\">Brian Christian and Tom Griffiths‚Äô ‚ÄúAlgorithms to Live By‚Äù</a></li></ul><h2 id=\"essays\">Essays</h2><ul>  <li>    <p><a href=\"https://web.mit.edu/jmorzins/www/C-H-speech.html\">Bill Watterson‚Äôs ‚ÄúSOME THOUGHTS ON THE REAL WORLD BY ONE WHO GLIMPSED IT AND FLED‚Äù</a></p>    <blockquote>      <p>When it seemed I would be writing about ‚ÄúMidnite Madness Sale-abrations‚Äù for the rest of my life, a friend used to console me that cream always rises to the top. I used to think, so do people who throw themselves into the sea.</p>    </blockquote>  </li>  <li>    <p><a href=\"https://dannybarnes.com/blog/how-play-someone-elses-band\">Danny Barnes‚Äô ‚Äúhow to play in someone else‚Äôs band {gain twenty years of road experience with a five minute read}‚Äù</a></p>    <blockquote>      <p>your path for achieving success is two fold: 1. play great. 2. in all things, be easy to deal with.</p>    </blockquote>  </li>  <li>    <p><a href=\"https://jlwagner.net/blog/make-it-boring/\">Jeremy Wagner‚Äôs ‚ÄúMake it boring‚Äù</a></p>    <blockquote>      <p>The more common the problem, the better. Design systems should prioritize the mundane.</p>    </blockquote>  </li></ul><h2 id=\"poems\">Poems</h2><ul>  <li><a href=\"https://poets.org/poem/calf-path\">The Calf-Path</a></li></ul><h2 id=\"videos\">Videos</h2><ul>  <li>The Shining</li>  <li>The Fifth Element</li>  <li><a href=\"https://www.youtube.com/watch?v=s0wZ1RRh5uc\">My Dinner With Andr√©</a></li></ul><h2 id=\"music\">Music</h2><ul>  <li>Deerhoof - La Isla Bonita</li>  <li>Earth, Wind &amp; Fire    <ul>      <li>Spirit</li>      <li>All ‚ÄòN All</li>      <li>I Am</li>      <li>Faces</li>    </ul>  </li>  <li>Frank Zappa - Apostrophe</li>  <li>Judee Sill - Heart Flood</li>  <li><a href=\"http://pierre.slinckx.net/dances/\">peer - Dances EP</a></li>  <li>Peter Gabriel - So</li>  <li>Tron - Original OST</li>  <li><a href=\"https://www.discogs.com/release/4134857-WITT-Whip\">WITT - Whip</a></li></ul>",
            "url": "http://milofultz.com/2022/01/23/media",
            
            
            
            
            
            "date_published": "2022-01-23T00:00:00+00:00",
            "date_modified": "2022-01-23T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2022/01/01/proquabet",
            "title": "üî† Proquabet - Encode text in a five-letter mishmash",
            "summary": "üî† Proquabet - Encode text in a five-letter mishmash",
            "content_text": "Check out the project files on Codeberg  Hodoj; kudos kusob jitoz lanos kibod babap!Turn your prose into a constant stream of encrypted and meaningless-sounding five-letter words! This Python script will convert a string of text into UTF-8 codes, and then each of those characters into a proquint, and vice versa.ProquintsTo understand the proquabet, you must first understand proquints. Proquints are a way of encoding numbers into human-readable and pronounceable text by mapping subsets of that number to consonants and vowels. For instance, the 16-bit number 50,416 turns into cigub, and the 32-bit hexadecimal number 0x12345678 turns into damuh-jinum,The creation of a proquint from a number essentially goes like this:  Convert the number into its binary representation  For each set of bits in the map, find the corresponding consonant or vowel based on that number  If the number is greater than 16 bits, repeat this while separating each successive proquint with a hyphen  Put those characters together and bask in the glory of your new creationTo understand this better, check out the page on my wiki, as it is a bit confusing without examples.Character EncodingSo now that we have the basic idea of what proquints are, we should also talk about character encoding, the most basic of which is ASCII. As you can see in the ASCII table, each basic Western character is mapped to an 8-bit number from 0x00 to 0x7f in hexadecimal, or 0b00000000 to 0b01111111 in binary. Using this same premise, we now have UTF-8, or Unicode, which is an extendable international character standard that includes over 150 modern and historic scripts, symbols, emojis, and more. These characters are all stored anywhere between an 8-bit to a 32-bit number, for instance üòé is represented as 0x1F60E in hexadecimal, or 0b00000000000000011111011000001110.Okay, okay, what does it do thoSo now that you know a proquint can convert any number into a string of text and all characters are stored as numbers, we can see how a pipeline could emerge:Characters =&gt; Numbers =&gt; ProquintsFor instance, if we start with a string of characters, like danger lorries, we can convert these into a series of numbers, by consulting the ASCII table:d = 0x64a = 0x61n = 0x6eg = 0x67...Then once we have our numbers, we can convert those into proquints:0x64 = badoh0x61 = badod0x6e = badov0x67 = badol...This is kind of boring, and I knew that all basic ASCII characters were only eight bits long, so I found I could smush them together to make a more varied proquint. (This doesn‚Äôt work if UTF-8 characters are involved)0x6461 = kidod0x6e67 = kunol...If we did this with the whole phrase danger lorries, we would have:kidod kunol kijuf fados kutuf lanon kijugAnd this process can be reversed to bring back the characters we encoded.But why?For fun.References  https://www.tinybrain.fans/proquints.html  https://www.asciitable.com/  https://en.wikipedia.org/wiki/Unicode",
            "content_html": "<p><a href=\"https://codeberg.org/milofultz/proquabet\">Check out the project files on Codeberg</a></p><blockquote>  <p>Hodoj; kudos kusob jitoz lanos kibod babap!</p></blockquote><p>Turn your prose into a constant stream of encrypted and meaningless-sounding five-letter words! This Python script will convert a string of text into UTF-8 codes, and then each of those characters into a <a href=\"https://www.tinybrain.fans/proquints.html\">proquint</a>, and vice versa.</p><h2 id=\"proquints\">Proquints</h2><p>To understand the proquabet, you must first understand <a href=\"https://www.tinybrain.fans/proquints.html\">proquints</a>. Proquints are a way of encoding numbers into human-readable and pronounceable text by mapping subsets of that number to consonants and vowels. For instance, the 16-bit number 50,416 turns into <code class=\"highlighter-rouge\">cigub</code>, and the 32-bit hexadecimal number <code class=\"highlighter-rouge\">0x12345678</code> turns into <code class=\"highlighter-rouge\">damuh-jinum</code>,</p><p>The creation of a proquint from a number essentially goes like this:</p><ol>  <li>Convert the number into its binary representation</li>  <li>For each set of bits in the map, find the corresponding consonant or vowel based on that number</li>  <li>If the number is greater than 16 bits, repeat this while separating each successive proquint with a hyphen</li>  <li>Put those characters together and bask in the glory of your new creation</li></ol><p><em>To understand this better, check out the page on my <a href=\"https://www.tinybrain.fans/proquints.html\">wiki</a>, as it is a bit confusing without examples.</em></p><h2 id=\"character-encoding\">Character Encoding</h2><p>So now that we have the basic idea of what proquints are, we should also talk about character encoding, the most basic of which is ASCII. As you can see in the <a href=\"https://www.tinybrain.fans/proquints.html\">ASCII table</a>, each basic Western character is mapped to an 8-bit number from <code class=\"highlighter-rouge\">0x00</code> to <code class=\"highlighter-rouge\">0x7f</code> in hexadecimal, or <code class=\"highlighter-rouge\">0b00000000</code> to <code class=\"highlighter-rouge\">0b01111111</code> in binary. Using this same premise, we now have UTF-8, or <a href=\"https://en.wikipedia.org/wiki/Unicode\">Unicode</a>, which is an extendable international character standard that includes over 150 modern and historic scripts, symbols, emojis, and more. These characters are all stored anywhere between an 8-bit to a 32-bit number, for instance üòé is represented as <code class=\"highlighter-rouge\">0x1F60E</code> in hexadecimal, or <code class=\"highlighter-rouge\">0b00000000000000011111011000001110</code>.</p><h2 id=\"okay-okay-what-does-it-do-tho\">Okay, okay, what does it do tho</h2><p>So now that you know a proquint can convert any number into a string of text and all characters are stored as numbers, we can see how a pipeline could emerge:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Characters =&gt; Numbers =&gt; Proquints</code></pre></div></div><p>For instance, if we start with a string of characters, like <code class=\"highlighter-rouge\">danger lorries</code>, we can convert these into a series of numbers, by consulting the ASCII table:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>d = 0x64a = 0x61n = 0x6eg = 0x67...</code></pre></div></div><p>Then once we have our numbers, we can convert those into proquints:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>0x64 = badoh0x61 = badod0x6e = badov0x67 = badol...</code></pre></div></div><p>This is kind of boring, and I knew that all basic ASCII characters were only eight bits long, so I found I could smush them together to make a more varied proquint. (This doesn‚Äôt work if UTF-8 characters are involved)</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>0x6461 = kidod0x6e67 = kunol...</code></pre></div></div><p>If we did this with the whole phrase <code class=\"highlighter-rouge\">danger lorries</code>, we would have:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>kidod kunol kijuf fados kutuf lanon kijug</code></pre></div></div><p>And this process can be reversed to bring back the characters we encoded.</p><h2 id=\"but-why\">But why?</h2><p>For fun.</p><h2 id=\"references\">References</h2><ol>  <li>https://www.tinybrain.fans/proquints.html</li>  <li>https://www.asciitable.com/</li>  <li>https://en.wikipedia.org/wiki/Unicode</li></ol><!--- _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2022/01/01/proquabet",
            
            
            
            
            
            "date_published": "2022-01-01T00:00:00+00:00",
            "date_modified": "2022-01-01T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2021/12/12/open-source",
            "title": "Why Would Someone Pay For Something That's Free?",
            "summary": null,
            "content_text": "If people who make open source want to paid, why do they make it free? I understand the utopian ideal of wanting software to be free, but expecting donations for your work after explicitly making it free seems confusing.I mean this earnestly, as I also see the net advantage socially and culturally of free information, but in the reality of a capitalist world, it seems foolish to rely on hope of generosity of large orgs who may use your software and small devs who are in the same $$ boat as youI guess the core q is: if something like core-js or log4j wants to be paid, why is it not a licensed software? I see on log4j‚Äôs Apache license that it is a ‚Äúperpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright‚Äù. Why would pay be expected?And similarly and probably more interesting, why would a company pull this into their code expecting any support when shit hits the fan? If a multibillion dollar is comfortable pulling in an open source software, it seems that either they fully trust the maintainer/project who owes them nothing (which is wild in itself) or that they can fix it when it goes wrong, which might happen and I am totally ignorant of.My armchair thoughts are a lot of the behavior of open source devs feeling responsible for their users experience is a mix of capitalism‚Äôs effect on people feeling their worth in society, or as a human, is tied up in their work and therefore problems must be resolved or else, and also just pride in the art of coding.A lot of this smells like when I was full time in music. I would get asked a lot, ‚ÄúIf you love music, then why are you doing it for money?‚Äù and I‚Äôm like ?? I love to eat??Like it feels weird and borderline manipulative to blame people for not paying for software they weren‚Äôt asked to pay for, and explicitly told they didn‚Äôt need to in the license. I know culturally it now is sort of the expectation that open source projects should be given donations if you use them, but why not be explicit and make them licensed software?This again feels like the reason the music union collapsed after the 70‚Äôs. An influx of musicians playing ‚Äújust for fun‚Äù at bars for free cut the legs out from under those trying to make a living.And the thing was that behavior isn‚Äôt/wasn‚Äôt malicious. Playing music because you love it should be the default state. Writing code because you love it should be the default state.Capitalism be capitalism, and unfortunately that seems to warrant a level of protectiveness over the work we do in terms of keeping ourselves alive in the Maslow sense. I hate that we don‚Äôt live in the utopian ideal of our society yet, but to live as if we already do may cause these issues to occur more often.References  https://merveilles.town/@milofultz/107430969483198871",
            "content_html": "<p>If people who make open source want to paid, why do they make it free? I understand the utopian ideal of wanting software to be free, but expecting donations for your work after explicitly making it free seems confusing.</p><p>I mean this earnestly, as I also see the net advantage socially and culturally of free information, but in the reality of a capitalist world, it seems foolish to rely on hope of generosity of large orgs who may use your software and small devs who are in the same $$ boat as you</p><p>I guess the core q is: if something like <code class=\"highlighter-rouge\">core-js</code> or <code class=\"highlighter-rouge\">log4j</code> wants to be paid, why is it not a licensed software? I see on log4j‚Äôs Apache license that it is a ‚Äúperpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright‚Äù. Why would pay be expected?</p><p>And similarly and probably more interesting, why would a company pull this into their code expecting any support when shit hits the fan? If a multibillion dollar is comfortable pulling in an open source software, it seems that either they fully trust the maintainer/project who owes them nothing (which is wild in itself) or that they can fix it when it goes wrong, which might happen and I am totally ignorant of.</p><p>My armchair thoughts are a lot of the behavior of open source devs feeling responsible for their users experience is a mix of capitalism‚Äôs effect on people feeling their worth in society, or as a human, is tied up in their work and therefore problems must be resolved <strong>or else</strong>, and also just pride in the art of coding.</p><p>A lot of this smells like when I was full time in music. I would get asked a lot, ‚ÄúIf you love music, then why are you doing it for money?‚Äù and I‚Äôm like ?? I love to eat??</p><p>Like it feels weird and borderline manipulative to blame people for not paying for software they weren‚Äôt asked to pay for, and <em>explicitly</em> told they didn‚Äôt need to in the license. I know culturally it now is sort of the expectation that open source projects should be given donations if you use them, but why not be explicit and make them licensed software?</p><p>This again feels like the reason the music union collapsed after the 70‚Äôs. An influx of musicians playing ‚Äújust for fun‚Äù at bars for free cut the legs out from under those trying to make a living.</p><p>And the thing was that behavior isn‚Äôt/wasn‚Äôt malicious. Playing music because you love it <em>should</em> be the default state. Writing code because you love it <em>should</em> be the default state.</p><p>Capitalism be capitalism, and unfortunately that seems to warrant a level of protectiveness over the work we do in terms of keeping ourselves alive in the Maslow sense. I hate that we don‚Äôt live in the utopian ideal of our society yet, but to live as if we already do may cause these issues to occur more often.</p><h2 id=\"references\">References</h2><ol>  <li>https://merveilles.town/@milofultz/107430969483198871</li></ol>",
            "url": "http://milofultz.com/2021/12/12/open-source",
            
            
            
            
            
            "date_published": "2021-12-12T00:00:00+00:00",
            "date_modified": "2021-12-12T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2021/11/14/sorting-in-6502",
            "title": "üìä Sorting Algorithms in 6502 Assembly",
            "summary": "Implementing a sorting algorithm in Assembly is a pain (and fun), and now I KNOW what they do.",
            "content_text": "Check out the project files on GitHub!This uses Minicube64 to run, so a lot of this is necessary for that architecture. If you want the meat and potatoes, check out the ENUM, the variable initialization, and the ...Sort label to see how it all works.  20211109: Implement Bubble Sort  20211113: Optimized slightly by decrementing count every iteration of OuterLoop; Implement Selection Sort and Insertion Sort  20211114: Implement Quick Sort",
            "content_html": "<p><a href=\"https://github.com/milofultz/sorting-in-6502\">Check out the project files on GitHub!</a></p><p>This uses <a href=\"https://github.com/aeriform-io/minicube64/\">Minicube64</a> to run, so a lot of this is necessary for that architecture. If you want the meat and potatoes, check out the <code class=\"highlighter-rouge\">ENUM</code>, the variable initialization, and the <code class=\"highlighter-rouge\">...Sort</code> label to see how it all works.</p><ul>  <li><em>20211109: Implement Bubble Sort</em></li>  <li><em>20211113: Optimized slightly by decrementing count every iteration of OuterLoop; Implement Selection Sort and Insertion Sort</em></li>  <li><em>20211114: Implement Quick Sort</em></li></ul>",
            "url": "http://milofultz.com/2021/11/14/sorting-in-6502",
            
            
            
            
            
            "date_published": "2021-11-14T00:00:00+00:00",
            "date_modified": "2021-11-14T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2021/10/22/rubiks-cube-solution",
            "title": "üß© Discover Your Own Rubik's Cube Algorithms",
            "summary": "We can all look up the algorithms for Rubik's Cubes online. But can we discover them ourselves?",
            "content_text": "I have always wanted to solve a Rubik‚Äôs Cube but was not really interested in getting the solution handed to me. But solving seemed way too daunting to do all at once when I first encountered the cube as a kid. But since I‚Äôve spent a good amount of time in the interim solving puzzles, doing programming, and understanding algorithms, I figured I would take another shot.I‚Äôll be updating this page at the bottom with updates on my progress.The ChallengeGiven the cube and the names of each step, can I discover and document the steps that are necessary to solve the Rubik‚Äôs Cube?This challenge is a bit too much for me to try and figure it out TOTALLY from scratch, so I‚Äôm bringing in the names of the steps and the movement descriptors to aid in my documentation and discovery.Given InformationSteps  White cross  White corners  Second layer  Yellow cross  Yellow edges  Yellow corners  Orient yellow cornersGlossary of Singmaster notation            Notation      Description                  F (Front)      the side currently facing the solver              B (Back)      the side opposite the front              U (Up)      the side above or on top of the front side              D (Down)      the side opposite the top, underneath the Cube              L (Left)      the side directly to the left of the front              R (Right)      the side directly to the right of the front              M (Middle)      the layer between L and R, turn direction as L (top-down)              E (Equator)      the layer between U and D, turn direction as D (left-right)              S (Standing)      the layer between F and B, turn direction as F              x (axis)      rotate the entire Cube on R              y (axis)      rotate the entire Cube on U              z (axis)      rotate the entire Cube on F        Each of these notations means to rotate that segment clockwise respective to their face, with a ' on a step meaning rotate the segment anticlockwise. In both cases, the M/E/S layers follow their L/U/F counterparts.  A 2 after a notation means to perform that operation twice in a row.  w (wide) means to include the middle layer on the same axis (e.g. Fw includes the front face and the layer behind). For example, M2 Dw' F D' would mean:          Rotate the M (middle) twice;      Rotate the side underneath the cube and the layer adjacent to it anticlockwise;      Rotate the face of the cube clockwise;      Rotate the the side underneath the cube anticlockwise.        Piece notation is face/edge/corner. If edge or corner are omitted, assume they are the center. For example (lets assume X means ‚Äúnull‚Äù for these):          Piece F is the center piece of the F (front) face (could also be notated as FXX, as it is not an edge, nor a corner);      Piece FU is the U edge in the center column on the F face (could also be notated as FUX, as it is not a corner);      Piece FUR is the R corner of the U edge on the F face.      The Solution1. White CrossThe white cross step is pretty trivial, as far as I can tell. If there are algorithms, it kind of doesn‚Äôt seem to be super important. The goal is to get all the white squares together to make a cross shape, with the center included, like a +. Looking at it straight on should look like this:.X. // X's being white squares, andXXX //  dots representing anything.X. //  other than the white squares.2. White CornersFirst, select a corner/column to focus on. You need to rotate E and D layers until you have the white corner somewhere within the same column. This could mean on the underside of that column or somewhere on the side of that column.The algorithm that is simplest but will take the longest is this: R' D R D'. If this is repeated, eventually that black square will end up on the top of the cube.There are a few simpler ones that can be deduced from this and I will leave it to the cuber to figure them out. Practice will elucidate these algorithms very clearly!Once this is finished, the cube should have all of the white squares on top of the cube.3. Second LayerAssuming the white squares are on top of the cube, you first want to rotate Dw until you have the FU and F as the same color. Sometimes, you can end up with more than one set of connected colors on other layers (RU and R, LU and L, or BU and B) through successive rotations. Our goal is to have the maximum connections possible.Once this is complete, there are two possibilities with two different algorithms.Two adjacent faces with connected colors  Rotate x until the two connected color sections are on the L and B layers (i.e. the FU/F and RU/R pairs will not be the same. For example, FU would be green and F orange, and RU would be orange and R green).  Do the following: M D2 M' D M D' M'. When this is complete, the color that was on FU should be on UD, and vice versa.  Rotate x and repeat step 2.  Rotate x' and do the following: M D' M' x M D2 M' x' M D M'.Two opposite faces with connected colors  Rotate x until the two connected color sections are on the L and R layers (i.e. the FU/F and UU/U pairs will not be the same. For example, FU would be green and F orange, and UU would be orange and U green).  Do the following: M2 D2 M'2.Once complete with any of these situations, you should have all four colors connected on the M column of the T layer of the F, L, R, and B layers.NOTE: I have not figured out how to get the side pieces of T or E aligned yet.References      https://ruwix.com/the-rubiks-cube/notation/advanced/    20211022: Add instructions for steps 1, 2, and 3.  20211025: Added piece notation and revised my rotation notation.",
            "content_html": "<p>I have always wanted to solve a <a href=\"https://en.wikipedia.org/wiki/Rubik%27s_Cube\">Rubik‚Äôs Cube</a> but was not really interested in getting the solution handed to me. But solving seemed way too daunting to do all at once when I first encountered the cube as a kid. But since I‚Äôve spent a good amount of time in the interim solving puzzles, doing programming, and understanding algorithms, I figured I would take another shot.</p><p>I‚Äôll be updating this page at the bottom with updates on my progress.</p><h2 id=\"the-challenge\">The Challenge</h2><p><strong>Given the cube and the names of each step, can I discover and document the steps that are necessary to solve the Rubik‚Äôs Cube?</strong></p><p>This challenge is a bit too much for me to try and figure it out TOTALLY from scratch, so I‚Äôm bringing in the <em>names</em> of the steps and the movement descriptors to aid in my documentation and discovery.</p><h3 id=\"given-information\">Given Information</h3><h4 id=\"steps\">Steps</h4><ol>  <li>White cross</li>  <li>White corners</li>  <li>Second layer</li>  <li>Yellow cross</li>  <li>Yellow edges</li>  <li>Yellow corners</li>  <li>Orient yellow corners</li></ol><h4 id=\"glossary-of-singmaster-notation\">Glossary of Singmaster notation</h4><table>  <thead>    <tr>      <th>Notation</th>      <th>Description</th>    </tr>  </thead>  <tbody>    <tr>      <td><code class=\"highlighter-rouge\">F</code> (Front)</td>      <td>the side currently facing the solver</td>    </tr>    <tr>      <td><code class=\"highlighter-rouge\">B</code> (Back)</td>      <td>the side opposite the front</td>    </tr>    <tr>      <td><code class=\"highlighter-rouge\">U</code> (Up)</td>      <td>the side above or on top of the front side</td>    </tr>    <tr>      <td><code class=\"highlighter-rouge\">D</code> (Down)</td>      <td>the side opposite the top, underneath the Cube</td>    </tr>    <tr>      <td><code class=\"highlighter-rouge\">L</code> (Left)</td>      <td>the side directly to the left of the front</td>    </tr>    <tr>      <td><code class=\"highlighter-rouge\">R</code> (Right)</td>      <td>the side directly to the right of the front</td>    </tr>    <tr>      <td><code class=\"highlighter-rouge\">M</code> (Middle)</td>      <td>the layer between L and R, turn direction as L (top-down)</td>    </tr>    <tr>      <td><code class=\"highlighter-rouge\">E</code> (Equator)</td>      <td>the layer between U and D, turn direction as D (left-right)</td>    </tr>    <tr>      <td><code class=\"highlighter-rouge\">S</code> (Standing)</td>      <td>the layer between F and B, turn direction as F</td>    </tr>    <tr>      <td><code class=\"highlighter-rouge\">x</code> (axis)</td>      <td>rotate the entire Cube on R</td>    </tr>    <tr>      <td><code class=\"highlighter-rouge\">y</code> (axis)</td>      <td>rotate the entire Cube on U</td>    </tr>    <tr>      <td><code class=\"highlighter-rouge\">z</code> (axis)</td>      <td>rotate the entire Cube on F</td>    </tr>  </tbody></table><ul>  <li>Each of these notations means to rotate that segment clockwise respective to their face, with a <code class=\"highlighter-rouge\">'</code> on a step meaning rotate the segment anticlockwise. In both cases, the <code class=\"highlighter-rouge\">M</code>/<code class=\"highlighter-rouge\">E</code>/<code class=\"highlighter-rouge\">S</code> layers follow their <code class=\"highlighter-rouge\">L</code>/<code class=\"highlighter-rouge\">U</code>/<code class=\"highlighter-rouge\">F</code> counterparts.</li>  <li>A <code class=\"highlighter-rouge\">2</code> after a notation means to perform that operation twice in a row.</li>  <li><code class=\"highlighter-rouge\">w</code> (wide) means to include the middle layer on the same axis (e.g. <code class=\"highlighter-rouge\">Fw</code> includes the front face and the layer behind). For example, <code class=\"highlighter-rouge\">M2 Dw' F D'</code> would mean:    <ol>      <li>Rotate the <code class=\"highlighter-rouge\">M</code> (middle) twice;</li>      <li>Rotate the side underneath the cube <em>and</em> the layer adjacent to it anticlockwise;</li>      <li>Rotate the face of the cube clockwise;</li>      <li>Rotate the the side underneath the cube anticlockwise.</li>    </ol>  </li>  <li>Piece notation is <code class=\"highlighter-rouge\">face/edge/corner</code>. If <code class=\"highlighter-rouge\">edge</code> or <code class=\"highlighter-rouge\">corner</code> are omitted, assume they are the center. For example (lets assume <code class=\"highlighter-rouge\">X</code> means ‚Äúnull‚Äù for these):    <ul>      <li>Piece <code class=\"highlighter-rouge\">F</code> is the center piece of the <code class=\"highlighter-rouge\">F</code> (front) face (could also be notated as <code class=\"highlighter-rouge\">FXX</code>, as it is not an edge, nor a corner);</li>      <li>Piece <code class=\"highlighter-rouge\">FU</code> is the <code class=\"highlighter-rouge\">U</code> edge in the center column on the <code class=\"highlighter-rouge\">F</code> face (could also be notated as <code class=\"highlighter-rouge\">FUX</code>, as it is not a corner);</li>      <li>Piece <code class=\"highlighter-rouge\">FUR</code> is the <code class=\"highlighter-rouge\">R</code> corner of the <code class=\"highlighter-rouge\">U</code> edge on the <code class=\"highlighter-rouge\">F</code> face.</li>    </ul>  </li></ul><h2 id=\"the-solution\">The Solution</h2><h3 id=\"1-white-cross\">1. White Cross</h3><p>The white cross step is pretty trivial, as far as I can tell. If there are algorithms, it kind of doesn‚Äôt seem to be super important. The goal is to get all the white squares together to make a cross shape, with the center included, like a <code class=\"highlighter-rouge\">+</code>. Looking at it straight on should look like this:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.X. // X's being white squares, andXXX //  dots representing anything.X. //  other than the white squares.</code></pre></div></div><h3 id=\"2-white-corners\">2. White Corners</h3><p>First, select a corner/column to focus on. You need to rotate <code class=\"highlighter-rouge\">E</code> and <code class=\"highlighter-rouge\">D</code> layers until you have the white corner <em>somewhere</em> within the same column. This could mean on the underside of that column or somewhere on the side of that column.</p><p>The algorithm that is simplest but will take the longest is this: <code class=\"highlighter-rouge\">R' D R D'</code>. If this is repeated, eventually that black square will end up on the top of the cube.</p><p><em>There are a few simpler ones that can be deduced from this and I will leave it to the cuber to figure them out. Practice will elucidate these algorithms very clearly!</em></p><p>Once this is finished, the cube should have all of the white squares on top of the cube.</p><h3 id=\"3-second-layer\">3. Second Layer</h3><p>Assuming the white squares are on top of the cube, you first want to rotate <code class=\"highlighter-rouge\">Dw</code> until you have the <code class=\"highlighter-rouge\">FU</code> and <code class=\"highlighter-rouge\">F</code> as the same color. Sometimes, you can end up with more than one set of connected colors on other layers (<code class=\"highlighter-rouge\">RU</code> and <code class=\"highlighter-rouge\">R</code>, <code class=\"highlighter-rouge\">LU</code> and <code class=\"highlighter-rouge\">L</code>, or <code class=\"highlighter-rouge\">BU</code> and <code class=\"highlighter-rouge\">B</code>) through successive rotations. Our goal is to have the maximum connections possible.</p><p>Once this is complete, there are two possibilities with two different algorithms.</p><h4 id=\"two-adjacent-faces-with-connected-colors\">Two <em>adjacent</em> faces with connected colors</h4><ol>  <li>Rotate <code class=\"highlighter-rouge\">x</code> until the two connected color sections are on the <code class=\"highlighter-rouge\">L</code> and <code class=\"highlighter-rouge\">B</code> layers (i.e. the <code class=\"highlighter-rouge\">FU</code>/<code class=\"highlighter-rouge\">F</code> and <code class=\"highlighter-rouge\">RU</code>/<code class=\"highlighter-rouge\">R</code> pairs will <em>not</em> be the same. For example, <code class=\"highlighter-rouge\">FU</code> would be green and <code class=\"highlighter-rouge\">F</code> orange, and <code class=\"highlighter-rouge\">RU</code> would be orange and <code class=\"highlighter-rouge\">R</code> green).</li>  <li>Do the following: <code class=\"highlighter-rouge\">M D2 M' D M D' M'</code>. When this is complete, the color that was on <code class=\"highlighter-rouge\">FU</code> should be on <code class=\"highlighter-rouge\">UD</code>, and vice versa.</li>  <li>Rotate <code class=\"highlighter-rouge\">x</code> and repeat step 2.</li>  <li>Rotate <code class=\"highlighter-rouge\">x'</code> and do the following: <code class=\"highlighter-rouge\">M D' M' x M D2 M' x' M D M'</code>.</li></ol><h4 id=\"two-opposite-faces-with-connected-colors\">Two <em>opposite</em> faces with connected colors</h4><ol>  <li>Rotate <code class=\"highlighter-rouge\">x</code> until the two connected color sections are on the <code class=\"highlighter-rouge\">L</code> and <code class=\"highlighter-rouge\">R</code> layers (i.e. the <code class=\"highlighter-rouge\">FU</code>/<code class=\"highlighter-rouge\">F</code> and <code class=\"highlighter-rouge\">UU</code>/<code class=\"highlighter-rouge\">U</code> pairs will <em>not</em> be the same. For example, <code class=\"highlighter-rouge\">FU</code> would be green and <code class=\"highlighter-rouge\">F</code> orange, and <code class=\"highlighter-rouge\">UU</code> would be orange and <code class=\"highlighter-rouge\">U</code> green).</li>  <li>Do the following: <code class=\"highlighter-rouge\">M2 D2 M'2</code>.</li></ol><p>Once complete with any of these situations, you should have all four colors connected on the <code class=\"highlighter-rouge\">M</code> column of the <code class=\"highlighter-rouge\">T</code> layer of the <code class=\"highlighter-rouge\">F</code>, <code class=\"highlighter-rouge\">L</code>, <code class=\"highlighter-rouge\">R</code>, and <code class=\"highlighter-rouge\">B</code> layers.</p><p><em>NOTE: I have not figured out how to get the side pieces of <code class=\"highlighter-rouge\">T</code> or <code class=\"highlighter-rouge\">E</code> aligned yet.</em></p><h2 id=\"references\">References</h2><ul>  <li>    <p>https://ruwix.com/the-rubiks-cube/notation/advanced/</p>  </li>  <li><em>20211022: Add instructions for steps 1, 2, and 3.</em></li>  <li><em>20211025: Added piece notation and revised my rotation notation.</em></li></ul>",
            "url": "http://milofultz.com/2021/10/22/rubiks-cube-solution",
            
            
            
            
            
            "date_published": "2021-10-22T00:00:00+01:00",
            "date_modified": "2021-10-22T00:00:00+01:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2021/09/18/minicube64",
            "title": "üëæ Moving Rainbow in 6502 Assembly",
            "summary": "I made a moving rainbow in 6502 assembly for the Minicube64.",
            "content_text": "I‚Äôve been wanting to get into assembly language forever but haven‚Äôt found a way to iterate and test in a satisfying way to makes learning for me really easy. Recently, I saw flame from aeriform.io had developed the Minicube64, which is a fantasy console based on the 6502.The 6502 is the same chip that was found in early Commodores, the BBC Micro, the NES/Famicom, the Apple ][, and zillions of others. It‚Äôs a simplified amount of assembly instructions, which lends itself to picking it up much more easily and quickly than would be possible with a more expansive set like on modern processors. Perfect.After installing Minicube64, I did a tutorial, read a ton of reference materials, and took some notes while going through some of the demo files.Not too far after this, I saw that a gamejam for the Minicube64 was being held at itch.io and I set out to have a rainbow render on the screen, and if possible, animate it left to right. This felt like a manageable goal and through a LOT of trial and error, was finally able to get there.This is the code üëáinclude \"64cube.inc\" \t\t\t\t; Include the helper functionsENUM $0\t\t\t\t\t\t\t\t\t\t\t; Enumerate values starting at $0000\tinitColor rBYTE 1\t\t\t\t\t; set initColor as 1 byteENDE\t\t\t\t\t\t\t\t\t\t\t\t; End enumeration\torg $200\t\t\t\t\t\t\t\t\t; Set program origin to $0200\tsei\t\t\t\t\t\t\t\t\t\t\t\t; Set interrupt disable flag\t; Set the stack pointer to be #$ff (low bits of $0100-01ff)\tldx #$ff\t\t\t\t\t\t\t\t\t; Load value $ff into X\ttxs\t\t\t\t\t\t\t\t\t\t\t\t; Transfer value of X into the stack\t\t\t\t\t\t\t\t\t\t\t\t\t\t;   pointer\t; Set the video buffer page in the $f000 page in memory\tlda #$f\t\t\t\t\t\t\t\t\t\t; Load high byte of page into A\t\t\t\t\t\t\t\t\t\t\t\t\t\t;   register\tsta VIDEO\t\t\t\t\t\t\t\t\t; Store value in A at 'VIDEO'\t; Set the colors buffer page in the $5000 page in memory\tlda #$5\t\t\t\t\t\t\t\t\t\t; Load highbyte of page into 'a'\t\t\t\t\t\t\t\t\t\t\t\t\t\t;   register\tsta COLORS\t\t\t\t\t\t\t\t; Store value in A at 'COLORS'\t_setw IRQ, VBLANK_IRQ\t\t\t; Set value of VBLANK_IRQ to address of\t\t\t\t\t\t\t\t\t\t\t\t\t\t;   'IRQ' label\tcli\t\t\t\t\t\t\t\t\t\t\t\t; Clear interrupt disable flagInfinite:\t\t\t\t\t\t\t\t\t\t; Set 'Infinite' label\tdec initColor\t\t\t\t\t\t\t; Decrement initColor\tlda initColor\t\t\t\t\t\t\t; Load initColor into A\tand #$3f\t\t\t\t\t\t\t\t\t; Ensure A never goes above #$3f\tjsr Draw\t\t\t\t\t\t\t\t\t; Jump to 'Draw' subroutine\tjmp Infinite\t\t\t\t\t\t\t; Create infinite loopIRQ:\t\t\t\t\t\t\t\t\t\t\t\t; Set 'IRQ' label\trti\t\t\t\t\t\t\t\t\t\t\t\t; Return from interruptDraw:\t\t\t\t\t\t\t\t\t\t\t\t; Set 'Draw' label; This will draw a column of each color from one end of the color spectrum to;   the other. Eventually, I hope to have this scale from left to right with;   animation.;; A = Address of color within the COLORS page; X = Col counter (ff-00: ff being the last col of the last row within the;       four subrows, 00 being the first col of the first row in the subrows; Y = Row counter (ff-f0: ff being the last four subrows, ff being the first)\tldx #$0\t\t\t\t\t\t\t\t\t\t; Initialize column counter (X)\tldy #$f\t\t\t\t\t\t\t\t\t\t; Initialize row counter (Y)\tLoop:\t\tlda initColor\t\t\t\t\t\t; Set accumulator to color value\t\tSubLoop:\t\t\t\t\t\t\t\t; Create a subloop label\t\t\tand #$3f\t\t\t\t\t\t\t; Ensure A never goes above #$3f\t\t\tsta $f000,X\t\t\t\t\t\t; Store A in video page plus X for\t\t\tsta $f100,X\t\t\t\t\t\t;   all columns\t\t\tsta $f200,X\t\t\tsta $f300,X\t\t\tsta $f400,X\t\t\tsta $f500,X\t\t\tsta $f600,X\t\t\tsta $f700,X\t\t\tsta $f800,X\t\t\tsta $f900,X\t\t\tsta $fa00,X\t\t\tsta $fb00,X\t\t\tsta $fc00,X\t\t\tsta $fd00,X\t\t\tsta $fe00,X\t\t\tsta $ff00,X\t\t\tsec\t\t\t\t\t\t\t\t\t\t; Set carry flag to wrangle SBC\t\t\tsbc #1\t\t\t\t\t\t\t\t; Decrement the color value\t\t\tdex\t\t\t\t\t\t\t\t\t\t; Decrement column counter (X)\t\t\tbne SubLoop\t\t\t\t\t\t; If color value is not zero, go to subloop\t\tdex\t\t\t\t\t\t\t\t\t\t\t; Decrement col counter (X)\t\tdey\t\t\t\t\t\t\t\t\t\t\t; Decrement row counter (Y)\t\tbne Loop\t\t\t\t\t\t\t\t; If Y is not zero, go to Loop\trts\t\t\t\t\t\t\t\t\t\t\t\t; Else return from the subroutinePalette:\t\t\t\t\t\t\t\t\t\t; Set 'Palette' label; This will set the palette of colors available in the COLORS page, enumerating;   from $00 upward within that page.\torg $0500\t\t\t\t\t\t\t\t\t; Set program origin to $0500\thex FF0000\t\t\t\t\t\t\t\t; Set these colors in colors page\thex FF1500\thex FF2F00\thex FF4400\thex FF5E00\thex FF7700\thex FF8C00\thex FFA600\thex FFBF00\thex FFD500\thex FFEE00\thex FBFF00\thex E1FF00\thex C8FF00\thex B3FF00\thex 99FF00\thex 80FF00\thex 6AFF00\thex 51FF00\thex 3CFF00\thex 22FF00\thex 09FF00\thex 00FF0D\thex 00FF26\thex 00FF40\thex 00FF55\thex 00FF6E\thex 00FF84\thex 00FF9D\thex 00FFB7\thex 00FFCC\thex 00FFE5\thex 00FFFF\thex 00EAFF\thex 00D0FF\thex 00BBFF\thex 00A2FF\thex 0088FF\thex 0073FF\thex 0059FF\thex 0040FF\thex 002AFF\thex 0011FF\thex 0400FF\thex 1E00FF\thex 3700FF\thex 4C00FF\thex 6600FF\thex 8000FF\thex 9500FF\thex AE00FF\thex C300FF\thex DD00FF\thex F700FF\thex FF00F2\thex FF00D9\thex FF00BF\thex FF00AA\thex FF0090\thex FF007B\thex FF0062\thex FF0048\thex FF0033\thex FF0019I‚Äôve added quite a bit of annotation to this, but will probably dig into it more in depth at a later date. To get it running:  install Minicube64  create a new file called rainbow.s and put the above contents within it  run this in your shell: ./minicube ./path/to/rainbow.s",
            "content_html": "<p>I‚Äôve been wanting to get into assembly language forever but haven‚Äôt found a way to iterate and test in a satisfying way to makes learning for me really easy. Recently, I saw <a href=\"https://merveilles.town/web/accounts/124\">flame from aeriform.io</a> had developed the <a href=\"https://github.com/aeriform-io/minicube64/\">Minicube64</a>, which is a fantasy console based on the 6502.</p><p>The 6502 is the same chip that was found in early Commodores, the BBC Micro, the NES/Famicom, the Apple ][, and zillions of others. It‚Äôs a simplified amount of assembly instructions, which lends itself to picking it up much more easily and quickly than would be possible with a more expansive set like on modern processors. Perfect.</p><p>After installing <a href=\"https://github.com/aeriform-io/minicube64/\">Minicube64</a>, I did <a href=\"http://skilldrick.github.io/easy6502/\">a tutorial</a>, read a ton of <a href=\"http://www.6502.org/tutorials/6502opcodes.html\">reference materials</a>, and <a href=\"https://www.tinybrain.fans/minicube64.html\">took some notes</a> while going through some of the demo files.</p><p>Not too far after this, I saw that a gamejam for the <a href=\"https://github.com/aeriform-io/minicube64/\">Minicube64</a> was being held at <a href=\"https://itch.io/jam/minicubejam\">itch.io</a> and I set out to have a rainbow render on the screen, and if possible, animate it left to right. This felt like a manageable goal and through a LOT of trial and error, was finally able to get there.</p><p>This is the code üëá</p><pre><code class=\"language-assembly\">include \"64cube.inc\" \t\t\t\t; Include the helper functionsENUM $0\t\t\t\t\t\t\t\t\t\t\t; Enumerate values starting at $0000\tinitColor rBYTE 1\t\t\t\t\t; set initColor as 1 byteENDE\t\t\t\t\t\t\t\t\t\t\t\t; End enumeration\torg $200\t\t\t\t\t\t\t\t\t; Set program origin to $0200\tsei\t\t\t\t\t\t\t\t\t\t\t\t; Set interrupt disable flag\t; Set the stack pointer to be #$ff (low bits of $0100-01ff)\tldx #$ff\t\t\t\t\t\t\t\t\t; Load value $ff into X\ttxs\t\t\t\t\t\t\t\t\t\t\t\t; Transfer value of X into the stack\t\t\t\t\t\t\t\t\t\t\t\t\t\t;   pointer\t; Set the video buffer page in the $f000 page in memory\tlda #$f\t\t\t\t\t\t\t\t\t\t; Load high byte of page into A\t\t\t\t\t\t\t\t\t\t\t\t\t\t;   register\tsta VIDEO\t\t\t\t\t\t\t\t\t; Store value in A at 'VIDEO'\t; Set the colors buffer page in the $5000 page in memory\tlda #$5\t\t\t\t\t\t\t\t\t\t; Load highbyte of page into 'a'\t\t\t\t\t\t\t\t\t\t\t\t\t\t;   register\tsta COLORS\t\t\t\t\t\t\t\t; Store value in A at 'COLORS'\t_setw IRQ, VBLANK_IRQ\t\t\t; Set value of VBLANK_IRQ to address of\t\t\t\t\t\t\t\t\t\t\t\t\t\t;   'IRQ' label\tcli\t\t\t\t\t\t\t\t\t\t\t\t; Clear interrupt disable flagInfinite:\t\t\t\t\t\t\t\t\t\t; Set 'Infinite' label\tdec initColor\t\t\t\t\t\t\t; Decrement initColor\tlda initColor\t\t\t\t\t\t\t; Load initColor into A\tand #$3f\t\t\t\t\t\t\t\t\t; Ensure A never goes above #$3f\tjsr Draw\t\t\t\t\t\t\t\t\t; Jump to 'Draw' subroutine\tjmp Infinite\t\t\t\t\t\t\t; Create infinite loopIRQ:\t\t\t\t\t\t\t\t\t\t\t\t; Set 'IRQ' label\trti\t\t\t\t\t\t\t\t\t\t\t\t; Return from interruptDraw:\t\t\t\t\t\t\t\t\t\t\t\t; Set 'Draw' label; This will draw a column of each color from one end of the color spectrum to;   the other. Eventually, I hope to have this scale from left to right with;   animation.;; A = Address of color within the COLORS page; X = Col counter (ff-00: ff being the last col of the last row within the;       four subrows, 00 being the first col of the first row in the subrows; Y = Row counter (ff-f0: ff being the last four subrows, ff being the first)\tldx #$0\t\t\t\t\t\t\t\t\t\t; Initialize column counter (X)\tldy #$f\t\t\t\t\t\t\t\t\t\t; Initialize row counter (Y)\tLoop:\t\tlda initColor\t\t\t\t\t\t; Set accumulator to color value\t\tSubLoop:\t\t\t\t\t\t\t\t; Create a subloop label\t\t\tand #$3f\t\t\t\t\t\t\t; Ensure A never goes above #$3f\t\t\tsta $f000,X\t\t\t\t\t\t; Store A in video page plus X for\t\t\tsta $f100,X\t\t\t\t\t\t;   all columns\t\t\tsta $f200,X\t\t\tsta $f300,X\t\t\tsta $f400,X\t\t\tsta $f500,X\t\t\tsta $f600,X\t\t\tsta $f700,X\t\t\tsta $f800,X\t\t\tsta $f900,X\t\t\tsta $fa00,X\t\t\tsta $fb00,X\t\t\tsta $fc00,X\t\t\tsta $fd00,X\t\t\tsta $fe00,X\t\t\tsta $ff00,X\t\t\tsec\t\t\t\t\t\t\t\t\t\t; Set carry flag to wrangle SBC\t\t\tsbc #1\t\t\t\t\t\t\t\t; Decrement the color value\t\t\tdex\t\t\t\t\t\t\t\t\t\t; Decrement column counter (X)\t\t\tbne SubLoop\t\t\t\t\t\t; If color value is not zero, go to subloop\t\tdex\t\t\t\t\t\t\t\t\t\t\t; Decrement col counter (X)\t\tdey\t\t\t\t\t\t\t\t\t\t\t; Decrement row counter (Y)\t\tbne Loop\t\t\t\t\t\t\t\t; If Y is not zero, go to Loop\trts\t\t\t\t\t\t\t\t\t\t\t\t; Else return from the subroutinePalette:\t\t\t\t\t\t\t\t\t\t; Set 'Palette' label; This will set the palette of colors available in the COLORS page, enumerating;   from $00 upward within that page.\torg $0500\t\t\t\t\t\t\t\t\t; Set program origin to $0500\thex FF0000\t\t\t\t\t\t\t\t; Set these colors in colors page\thex FF1500\thex FF2F00\thex FF4400\thex FF5E00\thex FF7700\thex FF8C00\thex FFA600\thex FFBF00\thex FFD500\thex FFEE00\thex FBFF00\thex E1FF00\thex C8FF00\thex B3FF00\thex 99FF00\thex 80FF00\thex 6AFF00\thex 51FF00\thex 3CFF00\thex 22FF00\thex 09FF00\thex 00FF0D\thex 00FF26\thex 00FF40\thex 00FF55\thex 00FF6E\thex 00FF84\thex 00FF9D\thex 00FFB7\thex 00FFCC\thex 00FFE5\thex 00FFFF\thex 00EAFF\thex 00D0FF\thex 00BBFF\thex 00A2FF\thex 0088FF\thex 0073FF\thex 0059FF\thex 0040FF\thex 002AFF\thex 0011FF\thex 0400FF\thex 1E00FF\thex 3700FF\thex 4C00FF\thex 6600FF\thex 8000FF\thex 9500FF\thex AE00FF\thex C300FF\thex DD00FF\thex F700FF\thex FF00F2\thex FF00D9\thex FF00BF\thex FF00AA\thex FF0090\thex FF007B\thex FF0062\thex FF0048\thex FF0033\thex FF0019</code></pre><p>I‚Äôve added quite a bit of annotation to this, but will probably dig into it more in depth at a later date. To get it running:</p><ul>  <li><a href=\"https://github.com/aeriform-io/minicube64/releases\">install Minicube64</a></li>  <li>create a new file called <code class=\"highlighter-rouge\">rainbow.s</code> and put the above contents within it</li>  <li>run this in your shell: <code class=\"highlighter-rouge\">./minicube ./path/to/rainbow.s</code></li></ul><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2021/09/18/minicube64",
            
            
            
            
            
            "date_published": "2021-09-18T00:00:00+01:00",
            "date_modified": "2021-09-18T00:00:00+01:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2021/07/04/make-a-simple-wiki",
            "title": "üìÑ Make A Simple Wiki with Markdown",
            "summary": "How to make your own simple wiki with backlinking out of Markdown files with {{SWIKI}}.",
            "content_text": "For the last year or so, I‚Äôve been keeping notes about programming and what I‚Äôve been learning about it, which has been super helpful for me. But I‚Äôve also found myself sending out some of these files to people for reference, which is fine but not ideal. I always thought that what would be WAY nicer is to have a wiki online that I could send people to so that they would have a reference now and for the future, plus then they could reference it for whatever else, as well. My note-taking is essentially my learning process, so why not share it?I recently did this for those notes at https://www.tinybrain.fans, and will continue using it for any wiki/Zettelkasten material I generate.Set UpThis setup requires {{SWIKI}}, a Github repository where you will put your built static site, and optionally, a domain to host it on.{{SWIKI}}You will need to use Markdown files with the Jekyll-style front matter for your pages, and to create the necessary files that SWIKI needs to build it (learn more about the features and specifics of {{SWIKI}} here). After getting those created and placed, you should be able to build your site and output a set of static HTML files.Create a new folder where you will keep this built out site. You will want to initiate a new Git repository there and after you build your site in that folder, commit your changes.NOTE: Github Pages also requires an empty .nojekyll file be in the root directory if you are creating a static site with no build step like Jekyll. If you don‚Äôt have this in there, it may build but will eventually fail.Github PagesCreate a new Github repo which will house your built site and connect it to the Git repo you built in the last step. If you aren‚Äôt using a custom domain, be sure to name this using yourusername.github.io or you may not be able to host it correctly on the Github Pages URL.Go ahead and push up those newly built files to the remote repo. If you don‚Äôt do this first, it won‚Äôt let you set up your Github Pages.After completing this, go into this repo‚Äôs settings and open the ‚ÄúPages‚Äù or ‚ÄúGithub Pages‚Äù tab. Set the source to be the root folder,    and you should be able to go to the URL listed to see your new site.Custom DomainIf you end up wanting to use a custom domain for hosting, you will need to put the custom domain‚Äôs URL into the Github Pages settings first. After completing this, go into the DNS settings of your custom domain and change your ‚ÄúCustom resource records‚Äù. You will need to add an ‚ÄúA‚Äù type to point the domain at the Github Pages, using these four IP addresses:185.199.108.153185.199.109.153185.199.110.153185.199.111.153WAITYou may not see any updates to your website for the next 48-hours, so give it time. Go for a walk, eat dinner, I dunno.You‚Äôre done!After this, your page should be visible at your chosen domain. To make updates to your wiki, just update your Markdown files, rebuild your site, commit the changes in Git, and push it up. These changes should be visible within about a minute of pushing up.  20211019: Add note for required .nojekyll file to build correctly.",
            "content_html": "<p>For the last year or so, I‚Äôve been keeping notes about programming and what I‚Äôve been learning about it, which has been super helpful for me. But I‚Äôve also found myself sending out some of these files to people for reference, which is fine but not ideal. I always thought that what would be WAY nicer is to have a wiki online that I could send people to so that they would have a reference now <em>and</em> for the future, plus then they could reference it for whatever else, as well. My note-taking is essentially my learning process, so why not share it?</p><p>I recently did this for those notes at <a href=\"https://www.tinybrain.fans\">https://www.tinybrain.fans</a>, and will continue using it for any wiki/Zettelkasten material I generate.</p><h2 id=\"set-up\">Set Up</h2><p>This setup requires <a href=\"https://github.com/milofultz/swiki\">{{SWIKI}}</a>, a <a href=\"https://github.com/\">Github</a> repository where you will put your built static site, and optionally, a domain to host it on.</p><h3 id=\"swiki\"><a href=\"https://github.com/milofultz/swiki\">{{SWIKI}}</a></h3><p>You will need to use Markdown files with the <a href=\"https://jekyllrb.com/docs/front-matter/\">Jekyll-style front matter</a> for your pages, and to create the necessary files that SWIKI needs to build it (learn more about the features and specifics of <a href=\"https://github.com/milofultz/swiki\">{{SWIKI}}</a> here). After getting those created and placed, you should be able to build your site and output a set of static HTML files.</p><p>Create a new folder where you will keep this built out site. You will want to <a href=\"https://kbroman.org/github_tutorial/pages/init.html\">initiate a new Git repository</a> there and after you build your site in that folder, commit your changes.</p><p><strong>NOTE:</strong> Github Pages also requires an empty <code class=\"highlighter-rouge\">.nojekyll</code> file be in the root directory if you are creating a static site with no build step like Jekyll. If you don‚Äôt have this in there, it may build but will eventually fail.</p><h3 id=\"github-pages\">Github Pages</h3><p>Create a new Github repo which will house your built site and connect it to the Git repo you built in the last step. If you aren‚Äôt using a custom domain, <a href=\"https://guides.github.com/features/pages/\">be sure to name this using yourusername.github.io</a> or you may not be able to host it correctly on the Github Pages URL.</p><p>Go ahead and push up those newly built files to the remote repo. If you don‚Äôt do this first, it won‚Äôt let you set up your Github Pages.</p><p>After completing this, go into this repo‚Äôs settings and open the ‚ÄúPages‚Äù or ‚ÄúGithub Pages‚Äù tab. Set the source to be the root folder,    and you should be able to go to the URL listed to see your new site.</p><h3 id=\"custom-domain\">Custom Domain</h3><p>If you end up wanting to use a custom domain for hosting, you will need to put the custom domain‚Äôs URL into the Github Pages settings first. After completing this, go into the DNS settings of your custom domain and change your ‚ÄúCustom resource records‚Äù. You will need to add an ‚ÄúA‚Äù type to point the domain at the Github Pages, using these four IP addresses:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>185.199.108.153185.199.109.153185.199.110.153185.199.111.153</code></pre></div></div><h3 id=\"wait\">WAIT</h3><p>You may not see any updates to your website for the next 48-hours, so give it time. Go for a walk, eat dinner, I dunno.</p><h2 id=\"youre-done\">You‚Äôre done!</h2><p>After this, your page should be visible at your chosen domain. To make updates to your wiki, just update your Markdown files, rebuild your site, commit the changes in Git, and push it up. These changes should be visible within about a minute of pushing up.</p><ul>  <li>20211019: <a href=\"https://github.community/t/github-pages-build-failed-although-it-passed-a-few-months-ago/10271\">Add note for required <code class=\"highlighter-rouge\">.nojekyll</code> file to build correctly</a>.</li></ul><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2021/07/04/make-a-simple-wiki",
            
            
            
            
            
            "date_published": "2021-07-04T00:00:00+01:00",
            "date_modified": "2021-07-04T00:00:00+01:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2021/07/03/swiki-tinybrainfans",
            "title": "üîñ {{SWIKI}} / tinybrain.fans",
            "summary": "{{SWIKI}} is a flat-file wiki generator and the basis of my Zettelkasten at tinybrainfans.com.",
            "content_text": "Check it out here! // Check out  on Codeberg{{SWIKI}} is a flatfile wiki generator using Python. Using some basic configuration and template files, you can build a wiki out of Markdown files and some {{double brackets}}.  Any page that is linked out locally will have the current page backlinked on that page, allowing for easy trawling through related information and finding new stuff.  The structure of the web pages is defined by a static ‚Äúframe‚Äù HTML file where the content is injected.  Produces a ‚Äúfatfile‚Äù page that contains all of the content of every page, which makes for easy searching of the entire wiki with just ctrl + f.Check it out on Codeberg to learn more about how it works, and go to https://www.tinybrain.fans to play around in a working demo.",
            "content_html": "<p><a href=\"https://www.tinybrain.fans/\"><strong>Check it out here!</strong></a> // <a href=\"https://codeberg.org/milofultz/swiki\">Check out  on Codeberg</a></p><p>{{SWIKI}} is a flatfile wiki generator using Python. Using some basic configuration and template files, you can build a wiki out of Markdown files and some {{double brackets}}.</p><ul>  <li>Any page that is linked out locally will have the current page backlinked on that page, allowing for easy trawling through related information and finding new stuff.</li>  <li>The structure of the web pages is defined by a static ‚Äúframe‚Äù HTML file where the content is injected.</li>  <li>Produces a ‚Äúfatfile‚Äù page that contains all of the content of every page, which makes for easy searching of the entire wiki with just <code class=\"highlighter-rouge\">ctrl</code> + <code class=\"highlighter-rouge\">f</code>.</li></ul><p><a href=\"https://codeberg.org/milofultz/swiki\">Check it out on Codeberg</a> to learn more about how it works, and go to <a href=\"https://www.tinybrain.fans\">https://www.tinybrain.fans</a> to play around in a working demo.</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2021/07/03/swiki-tinybrainfans",
            
            
            
            
            
            "date_published": "2021-07-03T00:00:00+01:00",
            "date_modified": "2021-07-03T00:00:00+01:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2021/04/11/tiny-font-3-by-3",
            "title": "üìï Make A Tiny 3x3 Font",
            "summary": "How readable and how satisfying is a font using only a 3x3 grid?",
            "content_text": "Check it out here! // Check out the font file on GitHubI was inpired by zserge‚Äôs post on making a tiny 2x3 font and wanted to see if I could make a readable 3x3 font myself. This challenge is exponentialy easier as there is so much more fidelity there, and it gave me a chance to play with Affinity Designer, which I‚Äôd never used before, as well as some basic bit shifting practice.The end result is surprisingly readable, and even has punctuation!",
            "content_html": "<p><a href=\"http://milofultz.com/3x3/tinyfont3x3--font.html\"><strong>Check it out here!</strong></a> // <a href=\"https://github.com/milofultz/3x3\">Check out the font file on GitHub</a></p><p>I was inpired by zserge‚Äôs post on <a href=\"https://zserge.com/posts/tiny-font/\">making a tiny 2x3 font</a> and wanted to see if I could make a readable 3x3 font myself. This challenge is exponentialy easier as there is so much more fidelity there, and it gave me a chance to play with Affinity Designer, which I‚Äôd never used before, as well as some basic bit shifting practice.</p><p>The end result is surprisingly readable, and even has punctuation!</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2021/04/11/tiny-font-3-by-3",
            
            
            
            
            
            "date_published": "2021-04-11T00:00:00+01:00",
            "date_modified": "2021-04-11T00:00:00+01:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2021/03/06/sublime-keymap",
            "title": "Find and Remove Autocompletes in Sublime Text 3",
            "summary": "Ever had trouble diagnosing where an autocompleted character is coming from and how to stop it?",
            "content_text": "I just spent forever trying to find a solution for this, so I figure putting it up here will be helpful for me and hopefully for others, too.In my case, I have been using Emmet to write HTML and CSS much faster. The issue that first came up was that when typing a colon in CSS, by default Sublime Text will add a semicolon. This doesn‚Äôt allow Emmet to expand correctly, or at best leaves you with an extra semicolon. After getting a hacky fix for this that didn‚Äôt fix the same problem in a Sass package, I had to actually figure out how to solve the root issue.OdatNurd on StackOverflow provided a fantastic walkthrough to a similar problem and left me with the tools to actually diagnose and solve the problem. You can use this to find out what is happening and in what part of the program, not just flailing and hoping you fix something.  Open the console (View &gt; Show Console or ctrl + ` on OSX).  In the console, enter in sublime.log_commands(True).  Do what you need to recreate the issue. Immediately after triggering the unwanted behavior, document what you think is causing it that is in the console. In my case it was command: insert_snippet {\"contents\": \":$0;\"}.  Depending on which syntax you are in, or which plugin is listed/suspected, use the command palette to View Package File and type in the syntax/plugin. This will show files that are hidden, as well, which makes diagnosing issues with default plugins/syntaxes much easier.  Once you find a possible file, open it. Save As in the Packages directory under a new folder called the name of the plugin or syntax. e.g. for the Sass plugin/syntax, I created a folder in Packages called Sass and saved a copy of the Default.sublime-keymap file there, which included my additions. You can find more on overriding packages here.  In my case, I copied the old rule over and changed the {\"contents\": \":$0;\"} object to {\"contents\": \":$0\"}, which allowed the colon to be typed without adding any additional characters.",
            "content_html": "<p>I just spent forever trying to find a solution for this, so I figure putting it up here will be helpful for me and hopefully for others, too.</p><p>In my case, I have been using Emmet to write HTML and CSS much faster. The issue that first came up was that when typing a colon in CSS, by default Sublime Text will add a semicolon. This doesn‚Äôt allow Emmet to expand correctly, or at best leaves you with an extra semicolon. After getting a hacky fix for this that didn‚Äôt fix the same problem in a Sass package, I had to actually figure out how to solve the root issue.</p><p><a href=\"https://stackoverflow.com/questions/59635627/how-to-override-sublime-text-3-packages-css3-completion-syntax\">OdatNurd on StackOverflow</a> provided a fantastic walkthrough to a similar problem and left me with the tools to actually diagnose and solve the problem. You can use this to find out <em>what</em> is happening and in <em>what</em> part of the program, not just flailing and hoping you fix something.</p><ol>  <li>Open the console (<code class=\"highlighter-rouge\">View &gt; Show Console</code> or <code class=\"highlighter-rouge\">ctrl + `</code> on OSX).</li>  <li>In the console, enter in <code class=\"highlighter-rouge\">sublime.log_commands(True)</code>.</li>  <li>Do what you need to recreate the issue. Immediately after triggering the unwanted behavior, document what you think is causing it that is in the console. In my case it was <code class=\"highlighter-rouge\">command: insert_snippet {\"contents\": \":$0;\"}</code>.</li>  <li>Depending on which syntax you are in, or which plugin is listed/suspected, use the command palette to <code class=\"highlighter-rouge\">View Package File</code> and type in the syntax/plugin. This will show files that are hidden, as well, which makes diagnosing issues with default plugins/syntaxes much easier.</li>  <li>Once you find a possible file, open it. <code class=\"highlighter-rouge\">Save As</code> in the <code class=\"highlighter-rouge\">Packages</code> directory under a new folder called the name of the plugin or syntax. e.g. for the Sass plugin/syntax, I created a folder in <code class=\"highlighter-rouge\">Packages</code> called <code class=\"highlighter-rouge\">Sass</code> and saved a copy of the <code class=\"highlighter-rouge\">Default.sublime-keymap</code> file there, which included my additions. <a href=\"https://www.sublimetext.com/docs/3/packages.html\">You can find more on overriding packages here</a>.</li>  <li>In my case, I copied the old rule over and changed the <code class=\"highlighter-rouge\">{\"contents\": \":$0;\"}</code> object to <code class=\"highlighter-rouge\">{\"contents\": \":$0\"}</code>, which allowed the colon to be typed without adding any additional characters.</li></ol><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2021/03/06/sublime-keymap",
            
            
            
            
            
            "date_published": "2021-03-06T00:00:00+00:00",
            "date_modified": "2021-03-06T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2021/01/28/snake-js",
            "title": "üêç SNAKEHACK - snake with constantly changing controls",
            "summary": "I just got started on this, but the goal is to make a snake game with more or less arbitrary rules that change as you play. Part Warioware, part snake, whatever.",
            "content_text": "Try it out here! // Check out the up-to-date version on GitHubI just got started on this, but the goal is to make a snake game with more or less arbitrary rules that change as you play. Part Warioware, part snake, whatever.Mainly making this as a way to practice basic website construction, HTML5 canvas drawing, and fun.",
            "content_html": "<p><a href=\"https://www.milofultz.com/snake_js\"><strong>Try it out here!</strong></a> // <a href=\"https://github.com/milofultz/snake_js\"><strong>Check out the up-to-date version on GitHub</strong></a></p><p>I just got started on this, but the goal is to make a snake game with more or less arbitrary rules that change as you play. Part Warioware, part snake, whatever.</p><p>Mainly making this as a way to practice basic website construction, HTML5 canvas drawing, and fun.</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2021/01/28/snake-js",
            
            
            
            
            
            "date_published": "2021-01-28T00:00:00+00:00",
            "date_modified": "2021-01-28T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2021/01/08/my-apps",
            "title": "Apps, Software, and More That I Use Everyday",
            "summary": "This is a list of all my most useful or relevant apps.",
            "content_text": "ProgramsaText: This is the text and snippet expander that I moved to after using TextExpander for years. It‚Äôs only $5 instead of a $36/year subscription and essentially the same program but with more features available, most notably automated keystrokes. I use it most often in my copywriting for podcasts, emails, and projects with a lot of repetition, but it‚Äôs also super useful in generating timestamps, datestamps, and ensuring you won‚Äôt write important info down wrong. Much more fun to use than the built-in OSX feature.Bonzo Buddy: I use this to keep on track with my self-care every day. It prompts me throughout the day on various activities and routines I need to do and keeps a log of what I did or didn‚Äôt do. Super useful for someone like me who gets tunnel vision during long computer sessions. Bonehead simple terminal app that stores your routines and log in plain text.DiskInventoryX: A small utility application for macOS that graphically shows the disk usage within a file system. I use this to monitor unruly client Dropbox folders as well as runaway audio/video projects.Dozer: Free and open source app to hide menu bar icons to give your Mac a cleaner look. Helps me not get distracted by unimportant stuff.EasyRes: Menubar app that allows you to switch screen resolutions quickly and easily. Most useful when using multiple monitors or external keyboard/mouse configs that put the laptop farther away from your eyes.Firefox: I prefer not to use Chrome because I don‚Äôt really want to enourage Google. Plus, Firefox generally works the way I expect and I have seen no downsides in my development and browsing experience. Here‚Äôs the extensions I use regularly:  Clickbait Remover for Youtube: Lowercases all titles and makes thumbnail an actual mid-video screenshot. Surprisingly effective!  Decentraleyes: This allows you to not be tracked by sites that offer common libraries via CDN (Google, etc.) by emulating a CDN through local caching.  New Tab Override: Choose a specific homepage to show on every new tab, not just new windows.  NoScript: Automatically disables Javascript everywhere and allows you to define custom rules on specific domains for using scripts. Lets you really simplify web browsing and keep you safe from maliciously downloaded JS code.  Privacy Badger: Blocks invisible trackers when browsing the web. Good for foiling gross advertisers and data miners trying to get your info.  Redirector: Use regex and wildcards to automatically modify matching URLs before going there. Useful for things like forcing the use of in-browser options in things like Zoom, looking at all Medium posts on Scribe.rip, etc.  Refined Github: Makes the Github experience much more pleasant.  uBlacklist: Block certain websites from showing up in your search results on the major engines.  uBlock Origin: An adblocker and general purpose content filter. I have used it to remove ads using their preloaded ad filters, related videos sections, sidebars, elements with classnames matching a pattern, disable Javascript on some or all sites, limit automatic media downloads for files over a certain size, etc. Can do essentially anything.f.lux: Warms your screen color at sundown until sunup so it doesn‚Äôt destroy your eyes in the dark. Just essential and makes using a computer without it almost unbearable.Flycut: Simple and straightforward clipboard manager. No bullshit, just works.Hazel: Allows you to conditionally automate and script file handling. I personally use it for cleaning up screenshots, moving things out of my downloads into another folder, backing up old files, and managing my trash usage. Powerusers have made it do much cooler things.iTerm2: Terminal that allows multiple tabs, styling, font choice, etc. Just better than OSX built in.Karabiner-Elements: A powerful and stable keyboard customizer for macOS. I use this to map capslock to escape, the bottom right alt button to insert, for some of those old DOS programs, and flip the F-row buttons from having to use fn every time I want to press any actual F key.Nativefier: A way to make web applications ‚Äúnative‚Äù with Electron. I‚Äôm not a big Electron guy, as the apps I use that utilize it are bloated as all hell (Slack, VS Code, etc.), but it does the thing to help compartmentalize app spaces. A spiritual successor to fluid.1Password / Keepass (Free): I use Lastpass (I used to use Lastpass, but they are lacking on security, and their free model will only work on a single device at a time, making it useless if you use a phone and computer with it), but use ANY password manager, please please please.OcenAudio: If Audacity was actually pleasant to use. Not as powerful, but for 99% of what I do, it is much better for audio editing/manipulation in every way.PyCharm: A much nicer environment to write Python in. Preferred over VSCodium for the built-in Python specific console and debugger.QuodLibet: A great music library manager for people who like owning our music. Also a great tagging software. This doesn‚Äôt do everything for me, so I will still often use VLC.Quitter: One of my most useful apps. Quits an app based on minutes of inactivity. Super useful for very distracting and/or power-hungry apps like Messages, Slack, etc.Reaper: I used to use this for all my podcast editing because of the ability to make super useful keyboard shortcuts and Lua scripts along with the varispeed that can go over 2x speed (looking at you, Logic).Rectangle / ShiftIt: Window manager that uses keyboard shortcuts. Super easy to arrange windows into quandrants, screen halves/thirds, etc., or move windows over to other screens. Just overall very useful for smaller single-monitor or large multi-monitor setups.SublimeText [wiki]: This is my coding scratchpad as well as my daily task manager using PlainTasks. Not as full featured towards any given language as PyCharm or as huge as VSCodium, but fantastic, fast, and a pleasure to use. Packages I use:  Emmet: If you do any HTML/CSS/JS, get Emmet.  HTML-CSS-JS Prettify: Auto-formats different web files for easy editing/analysis a la Prettier.  Monokai Pro: Beautiful theme that just feels nice. Definitely a splurge on my part, as it does cost $10 which is $10 more than most themes, but I just like it a lot.  PlainTasks: Great todo app. I use it for all my workflows and SOP‚Äôs since it is not proprietary and is saved as plaintext so anyone can read it.  RainbowBrackets: Shows your matching brackets at a glance. Makes debugging missed brackets simple.  Sync Settings: Helps sync settings across multiple computers.Tod: This is the todo app I use every day. Terminal based, will work on essentially any *nix shell, and is bonehead simple. Essentially is a plain text file at the end of the day.Trash-CLI: A way to tone down deleting files in the terminal so it isn‚Äôt all or nothing, like rm.Typora: Super simple and pretty markdown editor I use all of the time for my blog posts, code diary, note taking, and any other markdown-related stuff. Interchangeable CSS themes make it really easy to customize, too.Vim: Terminal text editor that is built in to pretty much any *nix system. It can do pretty much anything, if you spend enough time with it. Check out my notes on Vim. Extensions I use:  Pathogen: Easy installing of Vim plugins. Do this first.  delimitMate: Handles automatic closing of brackets  Emmet: It‚Äôs emmet.  Fugitive: A git wrapper for Vim  Repeat: Repeat complex commands with .  Surround: Insert, change, or remove brackets easilyVLC: Great media player than can play pretty much anything you throw at it.VSCodium: An open source version of Microsoft‚Äôs VSCode, meaning it had none of the bloat that MS adds like tracking, telemetry, etc. Extensions I use:  Colorize: Shows what colors are in your CSS/Sass when using any color method including variables.  ESLint: Javascript linter.  Indent-Rainbow: Like bracket colorizers, this gives your indentation a coloring so you can understand indentation more at a glance.  Monokai Pro: Same as above.  Prettier: Helpful for keeping your code matching code style standards. Auto-formats your code according to user-set rules.  Stylelint: A CSS linter.FontsAtkinson Hyperlegible Font: I use this as my default font for sans-serif on my browser so I can set the default font size much smaller and still be readable.Iosevka: I love Iosevka because it is SO THIN. You can fit so many characters on a page and have it still be legible. Seuper useful for coding, and terminal use in general. Good ligatures, as well.Manrope: A nice sans-serif more akin to Helvetica.Etc.Dotfiles Backup: I use a method like this to maintain and backup the following files:.zshrc.bashrc.bash_profile.vimrc.gitignore.gitconfig.tod.bonzo~/.vim/~/.config/# Daily backup for aText# JSON dump of Redirector for Firefox  20210206: Added f.lux and Lastpass, SublimeText and VSCodium extensions to programs, Atkinson Hyperlegible to fonts  20210403: Removed Lastpass and added 1Password, HTML-CSS-JS Prettify, Sync Settings  20211027: Add Flycut, Hazel, Nativefier, revise various elements  20211129: Replaced Grand Perspective with DiskInventoryX  20211231: Added Manrope font; removed Bracket Colorizer for VSCode, as it‚Äôs built in now; Firefox and plugins  20220412: Added Iosevka, Vim, VLC, and some of my own personal apps.  20220507: Added dotfiles backup  20220515: Added trash-cli  20220528: Added Firefox privacy plugins from this Reddit post",
            "content_html": "<h3 id=\"programs\">Programs</h3><p><a href=\"https://trankynam.com/atext/\">aText</a>: This is the text and snippet expander that I moved to after using TextExpander for years. It‚Äôs only $5 instead of a $36/year subscription and essentially the same program but with more features available, most notably automated keystrokes. I use it most often in my copywriting for podcasts, emails, and projects with a lot of repetition, but it‚Äôs also super useful in generating timestamps, datestamps, and ensuring you won‚Äôt write important info down wrong. Much more fun to use than the built-in OSX feature.</p><p><a href=\"https://codeberg.org/milofultz/bonzo-buddy\">Bonzo Buddy</a>: I use this to keep on track with my self-care every day. It prompts me throughout the day on various activities and routines I need to do and keeps a log of what I did or didn‚Äôt do. Super useful for someone like me who gets tunnel vision during long computer sessions. Bonehead simple terminal app that stores your routines and log in plain text.</p><p><a href=\"http://derlien.com/\">DiskInventoryX</a>: A small utility application for macOS that graphically shows the disk usage within a file system. I use this to monitor unruly client Dropbox folders as well as runaway audio/video projects.</p><p><a href=\"https://github.com/Mortennn/Dozer\">Dozer</a>: Free and open source app to hide menu bar icons to give your Mac a cleaner look. Helps me not get distracted by unimportant stuff.</p><p><a href=\"http://easyresapp.com/\">EasyRes</a>: Menubar app that allows you to switch screen resolutions quickly and easily. Most useful when using multiple monitors or external keyboard/mouse configs that put the laptop farther away from your eyes.</p><p><a href=\"https://www.mozilla.org/en-US/firefox/new/\">Firefox</a>: I prefer not to use Chrome because I don‚Äôt really want to enourage Google. Plus, Firefox generally works the way I expect and I have seen no downsides in my development and browsing experience. Here‚Äôs the extensions I use regularly:</p><ul>  <li><a href=\"https://github.com/pietervanheijningen/clickbait-remover-for-youtube\">Clickbait Remover for Youtube</a>: Lowercases all titles and makes thumbnail an actual mid-video screenshot. Surprisingly effective!</li>  <li><a href=\"https://decentraleyes.org/\">Decentraleyes</a>: This allows you to not be tracked by sites that offer common libraries via CDN (Google, etc.) by emulating a CDN through local caching.</li>  <li><a href=\"https://addons.mozilla.org/en-US/firefox/addon/new-tab-override/\">New Tab Override</a>: Choose a specific homepage to show on every new <em>tab</em>, not just new <em>windows</em>.</li>  <li><a href=\"https://noscript.net/\">NoScript</a>: Automatically disables Javascript everywhere and allows you to define custom rules on specific domains for using scripts. Lets you really simplify web browsing and keep you safe from maliciously downloaded JS code.</li>  <li><a href=\"https://privacybadger.org/\">Privacy Badger</a>: Blocks invisible trackers when browsing the web. Good for foiling gross advertisers and data miners trying to get your info.</li>  <li><a href=\"https://addons.mozilla.org/en-US/firefox/addon/redirector/\">Redirector</a>: Use regex and wildcards to automatically modify matching URLs before going there. Useful for things like forcing the use of in-browser options in things like Zoom, looking at all Medium posts on <a href=\"http://scribe.rip\">Scribe.rip</a>, etc.</li>  <li><a href=\"https://github.com/refined-github/refined-github\">Refined Github</a>: Makes the Github experience much more pleasant.</li>  <li><a href=\"https://github.com/iorate/uBlacklist\">uBlacklist</a>: Block certain websites from showing up in your search results on the major engines.</li>  <li><a href=\"https://ublockorigin.com/\">uBlock Origin</a>: An adblocker and general purpose content filter. I have used it to remove ads using their preloaded ad filters, related videos sections, sidebars, elements with classnames matching a pattern, disable Javascript on some or all sites, limit automatic media downloads for files over a certain size, etc. Can do essentially anything.</li></ul><p><a href=\"https://justgetflux.com/\">f.lux</a>: Warms your screen color at sundown until sunup so it doesn‚Äôt destroy your eyes in the dark. Just essential and makes using a computer without it almost unbearable.</p><p><a href=\"https://github.com/TermiT/Flycut\">Flycut</a>: Simple and straightforward clipboard manager. No bullshit, just works.</p><p><a href=\"https://www.noodlesoft.com/\">Hazel</a>: Allows you to conditionally automate and script file handling. I personally use it for cleaning up screenshots, moving things out of my downloads into another folder, backing up old files, and managing my trash usage. Powerusers have made it do <a href=\"https://www.asianefficiency.com/technology/hazel-intro/\">much cooler things</a>.</p><p><a href=\"https://iterm2.com/\">iTerm2</a>: Terminal that allows multiple tabs, styling, font choice, etc. Just better than OSX built in.</p><p><a href=\"https://karabiner-elements.pqrs.org/\">Karabiner-Elements</a>: A powerful and stable keyboard customizer for macOS. I use this to map capslock to escape, the bottom right alt button to insert, for some of those old DOS programs, and flip the F-row buttons from having to use <code class=\"highlighter-rouge\">fn</code> every time I want to press any actual F key.</p><p><a href=\"https://github.com/nativefier/nativefier\">Nativefier</a>: A way to make web applications ‚Äúnative‚Äù with Electron. I‚Äôm not a big Electron guy, as the apps I use that utilize it are bloated as all hell (Slack, VS Code, etc.), but it does the thing to help compartmentalize app spaces. A spiritual successor to <a href=\"https://www.fluidapp.com/developer/\">fluid</a>.</p><p><a href=\"https://www.1password.com/\">1Password</a> / <a href=\"https://keepass.info/index.html\">Keepass (Free)</a>: <del>I use Lastpass</del> (I used to use Lastpass, but <a href=\"https://en.wikipedia.org/wiki/LastPass\">they are lacking on security</a>, and their free model will only work on a single device at a time, making it useless if you use a phone and computer with it), but <a href=\"https://www.tomsguide.com/us/password-manager-pros-cons,news-19018.html\">use ANY password manager</a>, please please please.</p><p><a href=\"https://www.ocenaudio.com/en/\">OcenAudio</a>: If Audacity was actually pleasant to use. Not <em>as</em> powerful, but for 99% of what I do, it is much better for audio editing/manipulation in every way.</p><p><a href=\"https://www.jetbrains.com/pycharm/\">PyCharm</a>: A much nicer environment to write Python in. Preferred over VSCodium for the built-in Python specific console and debugger.</p><p><a href=\"https://quodlibet.readthedocs.io/en/latest/\">QuodLibet</a>: A great music library manager for people who like owning our music. Also a great tagging software. This doesn‚Äôt do everything for me, so I will still often use VLC.</p><p><a href=\"https://marco.org/apps\">Quitter</a>: One of my most useful apps. Quits an app based on minutes of inactivity. Super useful for very distracting and/or power-hungry apps like Messages, Slack, etc.</p><p><a href=\"https://www.reaper.fm/\">Reaper</a>: I used to use this for all my podcast editing because of the ability to make super useful keyboard shortcuts and Lua scripts along with the varispeed that can go over 2x speed (looking at you, Logic).</p><p><a href=\"https://rectangleapp.com/\">Rectangle</a> / <a href=\"https://github.com/fikovnik/ShiftIt\">ShiftIt</a>: Window manager that uses keyboard shortcuts. Super easy to arrange windows into quandrants, screen halves/thirds, etc., or move windows over to other screens. Just overall very useful for smaller single-monitor or large multi-monitor setups.</p><p><a href=\"https://www.sublimetext.com/\">SublimeText</a> <a href=\"https://www.tinybrain.fans/sublime-text.html\">[wiki]</a>: This is my coding scratchpad as well as my daily task manager using <a href=\"https://github.com/aziz/PlainTasks\">PlainTasks</a>. Not as full featured towards any given language as PyCharm or as huge as VSCodium, but fantastic, fast, and a pleasure to use. Packages I use:</p><ul>  <li><a href=\"https://emmet.io/blog/sublime-text-3/\">Emmet</a>: If you do any HTML/CSS/JS, get Emmet.</li>  <li><a href=\"https://packagecontrol.io/packages/HTML-CSS-JS%20Prettify\">HTML-CSS-JS Prettify</a>: Auto-formats different web files for easy editing/analysis a la <a href=\"https://prettier.io/\">Prettier</a>.</li>  <li><a href=\"https://monokai.pro/\">Monokai Pro</a>: Beautiful theme that just feels nice. Definitely a splurge on my part, as it does cost $10 which is $10 more than most themes, but I just like it a lot.</li>  <li><a href=\"https://github.com/aziz/PlainTasks\">PlainTasks</a>: Great todo app. I use it for all my workflows and SOP‚Äôs since it is not proprietary and is saved as plaintext so anyone can read it.</li>  <li><a href=\"https://packagecontrol.io/packages/RainbowBrackets\">RainbowBrackets</a>: Shows your matching brackets at a glance. Makes debugging missed brackets simple.</li>  <li><a href=\"https://packagecontrol.io/packages/Sync%20Settings\">Sync Settings</a>: Helps sync settings across multiple computers.</li></ul><p><a href=\"https://codeberg.org/milofultz/tod_sh\">Tod</a>: This is the todo app I use every day. Terminal based, will work on essentially any *nix shell, and is bonehead simple. Essentially is a plain text file at the end of the day.</p><p><a href=\"https://github.com/andreafrancia/trash-cli\">Trash-CLI</a>: A way to tone down deleting files in the terminal so it isn‚Äôt all or nothing, like <code class=\"highlighter-rouge\">rm</code>.</p><p><a href=\"https://typora.io/\">Typora</a>: Super simple and pretty markdown editor I use all of the time for my blog posts, code diary, note taking, and any other markdown-related stuff. Interchangeable CSS themes make it really easy to customize, too.</p><p><a href=\"https://www.vim.org/\">Vim</a>: Terminal text editor that is built in to pretty much any *nix system. It can do pretty much anything, if you spend enough time with it. Check out <a href=\"https://www.tinybrain.fans/vim.html\">my notes on Vim</a>. Extensions I use:</p><ul>  <li><a href=\"https://github.com/tpope/vim-pathogen\">Pathogen</a>: Easy installing of Vim plugins. Do this first.</li>  <li><a href=\"https://github.com/Raimondi/delimitMate\">delimitMate</a>: Handles automatic closing of brackets</li>  <li><a href=\"https://github.com/mattn/emmet-vim\">Emmet</a>: It‚Äôs emmet.</li>  <li><a href=\"https://github.com/tpope/vim-fugitive\">Fugitive</a>: A git wrapper for Vim</li>  <li><a href=\"https://github.com/tpope/vim-repeat\">Repeat</a>: Repeat complex commands with <code class=\"highlighter-rouge\">.</code></li>  <li><a href=\"https://github.com/tpope/vim-surround\">Surround</a>: Insert, change, or remove brackets easily</li></ul><p><a href=\"https://www.videolan.org/vlc/\">VLC</a>: Great media player than can play pretty much anything you throw at it.</p><p><a href=\"https://vscodium.com/\">VSCodium</a>: An open source version of Microsoft‚Äôs VSCode, meaning it had none of the bloat that MS adds like tracking, telemetry, etc. Extensions I use:</p><ul>  <li><a href=\"https://github.com/KamiKillertO/vscode-colorize/\">Colorize</a>: Shows what colors are in your CSS/Sass when using any color method including variables.</li>  <li><a href=\"https://eslint.org/\">ESLint</a>: Javascript linter.</li>  <li><a href=\"https://open-vsx.org/vscode/item?itemName=oderwat.indent-rainbow\">Indent-Rainbow</a>: Like bracket colorizers, this gives your indentation a coloring so you can understand indentation more at a glance.</li>  <li><a href=\"https://monokai.pro/\">Monokai Pro</a>: Same as above.</li>  <li><a href=\"https://prettier.io/\">Prettier</a>: Helpful for keeping your code matching code style standards. Auto-formats your code according to user-set rules.</li>  <li><a href=\"https://stylelint.io/\">Stylelint</a>: A CSS linter.</li></ul><h3 id=\"fonts\">Fonts</h3><p><a href=\"https://brailleinstitute.org/freefont\">Atkinson Hyperlegible Font</a>: I use this as my default font for sans-serif on my browser so I can set the default font size much smaller and still be readable.</p><p><a href=\"https://typeof.net/Iosevka/\">Iosevka</a>: I love Iosevka because it is SO THIN. You can fit so many characters on a page and have it still be legible. Seuper useful for coding, and terminal use in general. Good ligatures, as well.</p><p><a href=\"https://manropefont.com/\">Manrope</a>: A nice sans-serif more akin to Helvetica.</p><h3 id=\"etc\">Etc.</h3><p><a href=\"https://kb.levine.org/homelab/how-to/general/how-to-backup-dotfiles-to-github/\">Dotfiles Backup</a>: I use a method like this to maintain and backup the following files:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.zshrc.bashrc.bash_profile.vimrc.gitignore.gitconfig.tod.bonzo~/.vim/~/.config/# Daily backup for aText# JSON dump of Redirector for Firefox</code></pre></div></div><hr /><ul>  <li><em>20210206: Added f.lux and Lastpass, SublimeText and VSCodium extensions to programs, Atkinson Hyperlegible to fonts</em></li>  <li><em>20210403: Removed Lastpass and added 1Password, HTML-CSS-JS Prettify, Sync Settings</em></li>  <li><em>20211027: Add Flycut, Hazel, Nativefier, revise various elements</em></li>  <li><em>20211129: Replaced Grand Perspective with DiskInventoryX</em></li>  <li><em>20211231: Added Manrope font; removed Bracket Colorizer for VSCode, as it‚Äôs built in now; Firefox and plugins</em></li>  <li><em>20220412: Added Iosevka, Vim, VLC, and some of my own personal apps.</em></li>  <li><em>20220507: Added dotfiles backup</em></li>  <li><em>20220515: Added trash-cli</em></li>  <li><em>20220528: Added Firefox privacy plugins from <a href=\"https://teddit.net/r/pcmasterrace/comments/uqn7kv/choose_wisely/i8scel6/#c\">this Reddit post</a></em></li></ul><!-- ---- _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2021/01/08/my-apps",
            
            
            
            
            
            "date_published": "2021-01-08T00:00:00+00:00",
            "date_modified": "2021-01-08T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2021/01/06/reverse-horoscope",
            "title": "üåå Reverse Horoscope - Find Out Your Real Birthday (JS)",
            "summary": "Find out when you were supposed to be born. Answer some questions and discover your true sign and your real birthday.",
            "content_text": "Try it out here! // Check out the project files on GitHubIf you ever thought that your zodiac sign didn‚Äôt truly represent you, this is for you. Take this quiz to find out what your real birthday should be based on these twelve questions!When beginning the quiz, the questions are pulled from the list of horoscopes and then populate the question elements. These are then loaded one by one via jQuery before submitting the final question.Once the questions are submitted, the winning sign is decided and the birthday is created from these results. By knowing the midpoint of each sign, the birthday date is chosen through calculating the adjusted midpoint based on the scores of the adjacent signs.Uses Charts.css for the bar graph at the end and jQuery for animation and DOM population.",
            "content_html": "<p><a href=\"https://www.milofultz.com/reverse-horoscope\"><strong>Try it out here!</strong></a> // <a href=\"https://github.com/milofultz/reverse_horoscope\">Check out the project files on GitHub</a></p><p>If you ever thought that your zodiac sign didn‚Äôt <em>truly</em> represent you, this is for you. Take this quiz to find out what your real birthday should be based on these twelve questions!</p><hr /><p>When beginning the quiz, the questions are pulled from the list of horoscopes and then populate the question elements. These are then loaded one by one via jQuery before submitting the final question.</p><p>Once the questions are submitted, the winning sign is decided and the birthday is created from these results. By knowing the midpoint of each sign, the birthday date is chosen through calculating the adjusted midpoint based on the scores of the adjacent signs.</p><p>Uses <a href=\"https://chartscss.org/\">Charts.css</a> for the bar graph at the end and <a href=\"https://jquery.com/\">jQuery</a> for animation and DOM population.</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2021/01/06/reverse-horoscope",
            
            
            
            
            
            "date_published": "2021-01-06T00:00:00+00:00",
            "date_modified": "2021-01-06T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/12/27/atlb-notes",
            "title": "üìï Algorithms To Live By - Book Notes",
            "summary": "Algorithms To Live By - Book Notes",
            "content_text": "These are notes from the book Algorithms To Live By by Brian Christian and Tom Griffiths. These are all just my paraphrasings and may not be 100% accurate, but I tried to transcribe what I thought were the most salient points and put them up. All unattributed quotes are merely citations from the book.Explore/Exploit: AKA What‚Äôs New/What‚Äôs BestIntervalThe length of an interval and where you are within it defines whether one should be in a mode of explore or exploit. At the beginning of an interval, one has time and necessity to explore and the highest return on investment of time. At the end, the ROI are almost none to exploring and therefore exploit becomes much more valuable.A/B Tests  A/B tests are when multiple presentations or implementations are used until the best option is decided upon; then the process repeats with the winner and another option.  In A/B testing, the user is the product. The user is being used to gain something that can‚Äôt otherwise be gained. This is why online services can be free, is that the providers are getting valuable data.Zelen‚Äôs AlgorithmZelen‚Äôs algorithm is a variant of the A/B test that increases the likelihood of the most successful choice and minimizes the likelihood of the other. It is one way to better quantify the A/B test.  There are two choices or tests (A and B). These are chosen at random as if balls in a hat.  When one of the random choices or tests succeeds, the successful choice or test is increased in probability, as in adding another of those balls to the hat. If the choice is a failure, the other choice is increased in probability, as in adding another of those balls to the hat.Regret and OptimismYour amount of regret will always increase, even if you chose the best choice. If you choose the best choice, it may increase more slowly or slow down, but it is still there. The minimum possible regret increases logarithmically.  In the long run, optimism is the best prevention for regret.Upper Confidence Bounds are the highest payout that an option could possibly have, based on the knowledge we have.  The UCB is always higher than the expected value but by less and less as we get more experience with a particular option.Summary            Explore      Exploit                  Necessary at the beginning      Impossible without explore              Only explore means no ability to connect or grow with discoveries      Only exploit means no more potential bests; can‚Äôt find any new              Exploring determines there is not a clear end in sight      Exploiting signals an end of the interval              Children are almost exclusively here      Adults are almost exclusively here      Optimal Stopping - Knowing When To Move OnOptimal stopping is a way to know when to cut losses and move on. Don‚Äôt waste potential opportunities or resources on irrational ideas or scenarios.No Information ScenariosThis applies only in ‚Äúno information‚Äù games, where no information is provided on the data that is being looked through: the number of things, the things to come, the total population, etc. In this situation, you can only compare the elements to one another and not to a standard or metric.  Look then leap: set a predetermined time to gather data and don‚Äôt choose anything. After that, be willing to commit to anything that is better than what you saw before.  37%: A variant of Look then leap, the 37% rule is a rule derived from the idea of optimal stopping. 37% into a search, one should be prepared to pounce on the first thing they find that is better than what they saw before. First 37% is only looking and gathering data. Used in house searches, hiring, etc.Second Chance ScenariosIn second chance scenarios, being restless and having doubt is important. Since you never know if you have the best **and **you have a second chance, this is important in getting the best.  To live in a restless word requires a certain restlessness in oneself.Full Information ScenariosThis is when you are using knowable and measurable things as a criteria or a standard with no second chances.The problem of when to sell an item is a full information problem. In this case, the cost of holding an item is the equivalent of a cost of running out of elements to search through. In both cases, the longer you wait, the less chance you have of turning a profit (or in the latter, the less chance of choosing an ideal element). The cost of holding goes up, be willing to accept less sooner, and vice versa.The threshold rule is used to pick somebody based upon their rating within the group after X amount of elements have passed by. If an element at X position within Y total elements has a rating above Z percentile, then you should choose them and look at any following elements. Or, choose element if over Z percentile and Y elements are left.Sorting - Reducing Future Search TimeSorting is only important in reducing future search time. As the cost of searching drops, the value of sorting goes down, and similarly, as the amount of elements to sort goes up, the speed in which it is done goes down.Instead of sorting by comparing elements to each other, a more efficient way to sort is by comparing to an external standard or measure. This is called a ‚Äúcardinal number‚Äù instead of an ‚Äúordinal number‚Äù. A benchmark like this allows sorting without time intensive systems. Overall it may be incorrect, but it‚Äôs good enough , saves time and potential problems, and is therefore acceptable. (Example: The ‚Äúlaw of gross tonnage‚Äù states that smaller yields to bigger. This may not always be true, but it is true a large amount of the time and will yield less expended less resources for a high accuracy.)AlgorithmsBig OBig O notation is about hard guarantees and deadlines.            Notation      Name      Analogy                  O(1)      Constant      Cleaning the house before a party              O(n)      Linear      Giving drinks to every guest              O(n log n)      Linearithmic      ¬†              O(n^2)      Quadratic      Every person meeting every person              O(2^n)      Exponential      ¬†              O(n!)      Factorial      Must organize everyone in every possible permutation      The fastest way to sort a list can‚Äôt be less than O(n) because you have to check all of the elements and that is at least the length of the list itself.More efficient algorithms can sacrifice accuracy for speed. For instance, errors in Mergesort can compound quickly, when simpler sorts like Bubblesort are much safer.Quadratic SortsBubble Sort  Start at the beginning  Test each element against the next one  If A &gt; B, swap A and B  Continue to the end of the elements  Repeat the above steps until all elements are sortedInsertion Sort  Start at the beginning  Copy each element into a new array  Put the copied element in order in the new array  Repeat the above steps until all elements have been copied into the new arrayLinearithmic SortMergesort  Start at the beginning of the array and take every two elements out as a pair  Compare each pair of elements and put them in order (element 1 and element 2, element 3 and element 4, etc.)  Now pair each group up with another group  Compare each pair of elements across groups and place them in order  Repeat this process until all groups have become one groupCaching - Minimize Searching, Maximize UseThe goal of a cache management system is to minimize the amount of times you need to search your ‚Äúbase‚Äù and maximize the times you find what you need in your ‚Äúcache‚Äù. Memory hierarchies are like a pyramid: the base in largest and accessed the least; the highest is accessed the most and is the smallest. For example, a library is the base and your checked out books are at the top.The alogirthms with which information in the cache is replaced by new information is similar to many algorithms and heuristics used in minimalism and getting rid of stuff (how long have I had it? when did I use it last?).Least Recently UsedThe Least Recently Used (LRU) algorithm is where you make LRU data more accessible, either via distance, ease, speed, location, etc. LRU is effective because of ‚ÄúTemporal Locality‚Äù: if it is in cache, it will probably be used again. Self organizing lists use LRU:  Put documents in a pile  When a document is recalled, put it on top when finished.  End result: least recently used is at the bottom (long term storage), most recently used at the top (cache)  The nearest thing to clairvoyance is to assume that history will repeat itself backwards.Our human memory is not limited but the time spent searching is. It is a library with one infinitely long bookshelf. Using LRU, the most popular things come to the front/top of mind, and vice versa. The aging mind getting slower is not due to lack of agility or speed. It is due to abundance of information and difficulty in successfully caching.Scheduling - Focus not on getting things done, but getting ‚Äúweighty‚Äù things doneHow you tackle your todo list is based on your goal. If your goal is to minimize time to total completion, do what has the shortest completion time first. THis makes each person waiting for their deliverables with the shortest amount of time. This also reduces total tasks on the todo list quickest. If your goal is to minimize oppressiveness/weight of tasks, divide the oppressiveness/weight of each task by the estimated completion time, and then do the tasks with the highest unit of weight per unit of time.The oppressiveness/weight metric needs an importance or price as a scale. The example below you could think of the weight metric as importance or dollars per hour to illustrate. Example (using a 1-10 scale of weight/oppressiveness with higher numbers being more oppressive, and an hour scale for time):  Task 1:          Weight: 1 (low)      Time: 8      Result: 1/8        Task 2:          Weight: 10 (high)      Time: 1      Result: 10/1        Comparison          Task 1 vs. Task 2 == 1/8 : 10/1 == Task 1 (1/8) is less important to do now than Task 2 (10/1).      In the context of debt reduction, stemming from these two algorithms are two different schools of thought:  Debt Snowball: focus is on removing the sources of the smallest balances first (using the ‚Äúminimize time to total completion‚Äù algorithm above).  Debt Avalanche: focus on removing the sources with the highest interest rates first (using the ‚Äúminimize oppressiveness/weight of tasks‚Äù algorithm above)Anti-PatternsPreemption is the ability to stop mid-task and start another. Using previous algorithms, preemption allows flexibility with tasks that can‚Äôt be started until a certain time or requisite is met. If receiving a new task in the middle of another one, comparing them using a weighted SPT ratio of weight/time is the best option.Context switching is work that is done in switching tasks to ensure that new task can be done, also known as meta-work. The cost of context switching is throughput. More responsiveness (more context switching with a lower threshold of rejection) leads to less throughput overall Lower responsiveness (less context switching with a higher threshold of rejection) leads to higher throughput overall.Thrashing is when this meta-work is taking up all of your time and no actual work can be done. If one finds themselves in a thrashing state, the best thing to do at that point is to do whatever tasks in whatever order to open up more resources.Priority inversion is where a lower level task is blocking a higher level task.Pre-crastination is when you choose smaller subtasks over a major task, with the goal being to lessen the total load of tasks. Pre-crastinators act with the wrong metric in mind: when a major task is difficult to manage, they try to lessen this difficulty by going for the ‚Äúminimize time to total completion‚Äù algorithm instead of the ‚Äúminimize oppressiveness‚Äù algorithm. This is most common in systems with no weighting system in place. For instance, email icons show all unread messages, including those messages that are unimportant as well as those that are. In trying to deal with the most weighty emails, this leads people to lower the total number of unread messages instead of dealing with those weighty emails, in an attempt to relieve the problem. If the goal is just to have less unreads, then this is the best choice, but if the goal is to do what is important, then the other algorithm is best, and therefore, managing the most weighty emails first is the best choice.  In the case of app badges, if we can‚Äôt get them to reflect our actual priorities, and can‚Äôt overcome the impulse to optimally reduce any numerical figure thrown in out face, then perhaps the next best thing is to turn the badges off.Best PracticesSetting minimum periods with no interruptions allow both the throughput and responsiveness without sacrificing either, a la Pomodoro Method. Determine the minimum acceptable limit of responsiveness and then be no more responsive than that.Interrupt coalescing is the grouping of like interrupts to all be done at once. Let all interrupts of type X wait until a minimum acceptable responsiveness and then attend to them all at once.When priority inversion is an issue, use priority inheritance, where that lower level task that is blocking the higher level task inherits the priority of that task. If you can‚Äôt do task Y because task Z isn‚Äôt done yet, then task Z is now the most important task to be done.Predictions  Events are always experienced at their proper frequencies, but this isn‚Äôt true of language.Good predictions require good priors. People generally have a ton of information from past experience and this allows good models. However, we retell interesting stories because of how interesting they are. This makes them seem to be more likely than they really are to be.The Stanford Marshmallow Experiment and its successive study to replicate it‚Äôs findings was not at its core a study of delayed gratification, as much as it was trust that the system will honor its word in giving you the marshmallow it promised. Kids who lived in places with less trust in authority or the words of others were less likely to wait as it would have no perceived benefit to them.Laws and RulesLaplace‚Äôs LawWith no priors or prior information given or known, the probability of a given event happening is (the number of successes + 1) / (the number of attempts + 2).Bayes‚Äôs RuleThis shows the probability of one scenario given that another scenario is true. The formula is written as Probability of A given B = [(Probability of B given A) multiplied by (Probability of A)] / (Probability of B).Example: What is the probability that the person is a librarian and not a farmer given a description? (from 3Blue1Brown‚Äôs video on Bayes Rule)The total options available are that the person described is either a farmer or a librarian.P(librarian | description) = ( P(description | librarian) * P(librarian) ) / P(description)  P(description | librarian) = the likelihood that the description fits a given librarian, let‚Äôs say 40%  P(librarian) = the percentage of librarians (10) to farmers (200), ~5%  P(description) = the likelihood that the description fits a given librarian AND the likelihood that the description fits a given farmer;          Librarian: let‚Äôs say 40%      Farmer: let‚Äôs say 10%      Total: (.4 * 10 + .1 * 200) / 210 = 11%      P(librarian | description) = ( 40 * 5 ) / 11 = 200/11 = 18% probability of the description matching a librarian in the given sample  The richer the information we bring to Bayes rule, the more useful the predictions we can get out of it.3Blue1Brown‚Äôs second video on Bayes‚Äôs RuleCopernican PrincipleWithout prior information, we encounter things on on average halfway through their entire existence. They will last as long as they already have again.Distributions/ScalesNormal Distribution: use the Average RuleThere is an average and then falls sharply on either side. Usually follows a single appropriate scale, e.g. average lifespan is 76; low is single digits and high is triple.The Average Rule is to use the distribution‚Äôs average to make your prediction.Power Law Distribution: use the Multiplicative RuleFollows a more displaced curve. Often accompanied by hige discrepancies of numbers, e.g. average income is $58k, but 2/3 of population make less while .01% make 100 times more. Can be interpreted as the 80/20 rule.The Multiplicative Rule is that, in the case of a power law distribution, the observation made can be multiplied by a constant factor to make a prediction.Erlang Distribution: use the Additive RuleIn between a normal and power law distribution. Models include radioactive decay, political terms in office.The Additive Rule is that things will go on a constant amount longer. These distributions yield the same prediction regardless of history or current state.Overfitting and How To Avoid ItOverfitting is a model that contains more parameters than can be justified by the data. Applying simple heuristics (fewer models or a simpler formula) can often be better and more accurate due to overfitting and confidence in it by the user. Too simple of a model will get you inaccurate results; too complex will imply things that don‚Äôt exist or are hyperbolic. The more noise you have, the more simple your model or heuristics need to be to ensure no overfitting occurs. The less noise you have, the more complex your model and heuristics can be. The more accurate our data, the more factors can be used safely. Adding more factors to help match the data correctly is not necessarily the way to get good predictions.Overfitting your work to fit the picture of success is product over process thinking. If your goal is to lose 30 pounds and you don‚Äôt eat, you will succeed (product) but you will also sacrifice the form (process) necessary to do it in a way that addressed the underlying information and goal: better health. Focus on the way and process over all else.In focusing on form, be careful what you measure as goal oriented behavior. This will be reached at all costs and that may or may not be in the way that was asked.Early stoppingEarly stopping is used to stop the refinement or research into solving a problem before you get too in the weeds. Overfitting will take place beyond the most important factors.  How early to stop depends on the gap between what you can measure and what really matters.Cross validationCross validation is assessing the given data and seeing how well the model predicts unseen data.  Withhold data points to plug in later and see if they follow  Use data pulled from another measure and see if it holds upCross training with different educational systems or testing methods can ensure that the learning is not being ‚Äútaught to the test‚Äù.RegularizationRegularization is introducing penalties for more complexity in the model to ensure that the extra complexity is worth it. Only the most important factors must stay in relation to how much importance the overall function the element is to the system. For instance, the brain would not be evolutionarily viable if it took 20% of our caloric intake and didn‚Äôt provide such benefits as it does now. Also, the brain is apparently not important enough to take 40% of our caloric intake.PredictionsModelsHill ClimbingHill Climbing is starting with a possibility and editing that possibility over and over to find the best solution. It gives you the ‚Äúlocal maximum‚Äù to your starting point. Hill climbing can be augmented with ‚Äújitter‚Äù, an applied randomness to test slight deviations for successful outcomes.Different types of Hill Climbing include:  ‚ÄúShotgun‚Äù hill climbing: restarting from a totally random or shuffled possibility and repeating your whole process.  Metropolis Algorithm: accepting slightly worse possibilities at random to ensure new directions are taken.  Simulated Annealing: starting at a random point, always take a better solution if found and accept slightly worse solutions X% of the time. Continue lowering X until it is zero and you will have found the local maximum. Good for use with Metropolis, simulates jitter, and utilizes shotgun.  Your likelihood of following a bad idea should be inversely proportional to how bad it is.Monte Carlo MethodReplace exhaustive probability calculations with sample simulations, usually samples made of random inputs.Sieve of EratosthenesExample: To find primes from 1 to n:  Write all numbers from 1 to n  Start at 2 and cross off any multiples of 2.  Repeat with all numbers not yet crossed out.  When n/2 is reached, all numbers not yet crossed out are primes.Greedy/Myopic AlgorithmsThese focus on only the best choice at each step and don‚Äôt worry about the others.Types of Relaxation and Their ImplementationConstraint RelaxationConstraint relaxation is when you try to solve an easier version of the problem, and then when you‚Äôve made progress, add constraints back in. Constraint relaxation is a tradeoff of time for good-enough solutions.Remove the constraints, make progress, and then reintegrate the constraints.Discrete Optimization/Continuous RelaxationDiscrete optimization/continuous relaxation is used where fractions aren‚Äôt used (number of fire trucks per capita, number of people to vaccinate). Relaxing these to use fractions and then round from there is usually good enough (number of fire trucks ending up being 1.2 per capita, rounding to 1).Turn discrete measurements to continuous measurements and then round them off.Lagrangian RelaxationIn optimization, there are the rules and the scorekeeping. Moving constraints from the rules (input) to the scorekeeping (output) allows for impossible solutions to get close enough.Change the bindings on the rules into bindings on the score.  The perfect is the enemy of the good. - VoltaireNetworkingExponential BackoffIf an attempt is failed, increase the previous constraint by double.  If network is not connecting, wait between 1-2s to try and reconnect; again, wait 2-4s more; etc.  If a person doesn‚Äôt respond to your call or text, wait 1 day to follow up; again, wait 2 days, etc.  If a person violates probation, the 1st time they should spend 1 day in jail; the 2nd, 2 days; 3rd, 4 days; etc.Additive increase, multiplicative decreaseOn a success, increase the input side at a constant rate. On a failure, cut back that input by half. Applicable most directly to internet connections and attempts to ask for or send information.BackchannelsThe backchannels in communication are responses, acknowledgements, or the lack thereof. In a conversation or speech, the effectiveness of a speaker is partly dependent on the listener‚Äôs backchannel communication.TaildropA taildrop is the dropping of everything that didn‚Äôt fit within the buffer. Modern communication doesn‚Äôt allow taildrop, and was specifically made to stop it. For example, a home phone with a tape message machine will eventually run out of space, but an email box has no feasible limit of how large the backlog can get. We aren‚Äôt always connected, but we are always buffered.  One of the fundamental principles of buffers is that they only work correctly if they are routinely zeroed out.Game Theory  We can hope to be fortunate, but should strive to be wise.‚ÄúPrice of anarchy‚Äù: The gap between cooperation and competition. The bigger the difference, the higher the price.Revelation Principle: Any game that requires strategic masking of the truth can be transformed into a game where the dominant strategy is honesty.Computational Kindness: relieving the amount of things for sombody to compute when forced with your problem. By asking a very specific question, the answer will be simpler. Too many questions will feel intractable. Instead of ‚Äúpassing the cognitive buck‚Äù, offering a suggestion is a way to lessen the burden for others. Instead of a continued computation, aka spinning (will the bus come soon?), opt for a single one, aka blocking (the bus is coming in 10 minutes; I can/cannot wait).LevelingOnly playing one level above your opponent. If you are playing at level 3 and they are at level 1, it is likely you will be overthinking your strategy and overfit your model.  Level 1 - I know  Level 2 - I know you know  Level 3 - You know I know you know  etc.An Information Cascade is when external information affects your personal information so much that you then disregard your own info completely.  Be wary of cases where you know more about what people are doing than why.  Actions are not beliefs. Do not misinterpret actions as beliefs.EquilibriumIn a two player game, this is the best strategy assuming rational play. This is distinctly outside of leveling, meta strategy, etc. The predictive abilities of Nash equilibrium are only useful if you can find them as a player.If the point of equilibrium can‚Äôt be changed directly, then the rules must be changed to force the equilibrium to move.  If employers give an option to take vacation or not, the equilibrium will shift to be the ‚Äúmost loyal‚Äù employee, taking less vacation than their peers.  By making vacation mandatory, this leaves everyone free to take the break, not allowing the competition to overtake their good judgment in taking care of themselves.AuctionsSealed Bid First-Price Auctions: Bids are made in secret and highest offer wins. The bidders are not offering what they want to pay; they are offering what they think others will pay plus some. Winners almost always overpay.Dutch Auction: Starting price is lowered until someone wants to buy it.English Auction: Starting price is raised until highest bidder.Vickrey Auction: Sealed bid first-price auction but winner pays second highest bid. Utilizes the Revelation Principle to convert the sealed bid first-price auction‚Äôs ‚Äústrategic masking of the truth‚Äù into a game where people play honestly.",
            "content_html": "<p>These are notes from the book <a href=\"https://openlibrary.org/works/OL17357767W/Algorithms_to_Live_By\"><em>Algorithms To Live By</em> by Brian Christian and Tom Griffiths</a>. These are all just my paraphrasings and may not be 100% accurate, but I tried to transcribe what I thought were the most salient points and put them up. All unattributed quotes are merely citations from the book.</p><hr /><h2 id=\"exploreexploit-aka-whats-newwhats-best\">Explore/Exploit: AKA What‚Äôs New/What‚Äôs Best</h2><h3 id=\"interval\">Interval</h3><p>The length of an interval and where you are within it defines whether one should be in a mode of explore or exploit. At the beginning of an interval, one has time and necessity to explore and the highest return on investment of time. At the end, the ROI are almost none to exploring and therefore exploit becomes much more valuable.</p><h3 id=\"ab-tests\">A/B Tests</h3><ul>  <li>A/B tests are when multiple presentations or implementations are used until the best option is decided upon; then the process repeats with the winner and another option.</li>  <li>In A/B testing, the user is the product. The user is being used to gain something that can‚Äôt otherwise be gained. This is why online services can be free, is that the providers are getting valuable data.</li></ul><h3 id=\"zelens-algorithm\">Zelen‚Äôs Algorithm</h3><p>Zelen‚Äôs algorithm is a variant of the A/B test that increases the likelihood of the most successful choice and minimizes the likelihood of the other. It is one way to better quantify the A/B test.</p><ul>  <li>There are two choices or tests (A and B). These are chosen at random as if balls in a hat.</li>  <li>When one of the random choices or tests succeeds, the successful choice or test is increased in probability, as in adding another of those balls to the hat. If the choice is a failure, the other choice is increased in probability, as in adding another of those balls to the hat.</li></ul><h3 id=\"regret-and-optimism\">Regret and Optimism</h3><p>Your amount of regret will always increase, even if you chose the best choice. If you choose the best choice, it may increase more slowly or slow down, but it is still there. The minimum possible regret increases <strong>logarithmically</strong>.</p><blockquote>  <p>In the long run, optimism is the best prevention for regret.</p></blockquote><p>Upper Confidence Bounds are the highest payout that an option could possibly have, based on the knowledge we have.</p><blockquote>  <p>The UCB is always higher than the expected value but by less and less as we get more experience with a particular option.</p></blockquote><h3 id=\"summary\">Summary</h3><table>  <thead>    <tr>      <th><strong>Explore</strong></th>      <th><strong>Exploit</strong></th>    </tr>  </thead>  <tbody>    <tr>      <td>Necessary at the beginning</td>      <td>Impossible without explore</td>    </tr>    <tr>      <td>Only explore means no ability to connect or grow with discoveries</td>      <td>Only exploit means no more potential bests; can‚Äôt find any new</td>    </tr>    <tr>      <td>Exploring determines there is not a clear end in sight</td>      <td>Exploiting signals an end of the interval</td>    </tr>    <tr>      <td>Children are almost exclusively here</td>      <td>Adults are almost exclusively here</td>    </tr>  </tbody></table><hr /><h2 id=\"optimal-stopping---knowing-when-to-move-on\">Optimal Stopping - Knowing When To Move On</h2><p>Optimal stopping is a way to know when to cut losses and move on. Don‚Äôt waste potential opportunities or resources on irrational ideas or scenarios.</p><h3 id=\"no-information-scenarios\">No Information Scenarios</h3><p>This applies only in ‚Äúno information‚Äù games, where no information is provided on the data that is being looked through: the number of things, the things to come, the total population, etc. In this situation, you can only compare the elements to one another and not to a standard or metric.</p><ul>  <li>Look then leap: set a predetermined time to gather data and don‚Äôt choose anything. After that, be willing to commit to anything that is better than what you saw before.</li>  <li>37%: A variant of Look then leap, the 37% rule is a rule derived from the idea of optimal stopping. 37% into a search, one should be prepared to pounce on the first thing they find that is better than what they saw before. First 37% is only looking and gathering data. Used in house searches, hiring, etc.</li></ul><h3 id=\"second-chance-scenarios\">Second Chance Scenarios</h3><p>In second chance scenarios, being restless and having doubt is important. Since you never know if you have the best **and **you have a second chance, this is important in getting the best.</p><blockquote>  <p>To live in a restless word requires a certain restlessness in oneself.</p></blockquote><h3 id=\"full-information-scenarios\">Full Information Scenarios</h3><p>This is when you are using knowable and measurable things as a criteria or a standard with no second chances.The problem of when to sell an item is a full information problem. In this case, the cost of holding an item is the equivalent of a cost of running out of elements to search through. In both cases, the longer you wait, the less chance you have of turning a profit (or in the latter, the less chance of choosing an ideal element). The cost of holding goes up, be willing to accept less sooner, and vice versa.</p><p>The <strong>threshold</strong> rule is used to pick somebody based upon their rating within the group after X amount of elements have passed by. If an element at X position within Y total elements has a rating above Z percentile, then you should choose them and look at any following elements. Or, choose element if over Z percentile and Y elements are left.</p><hr /><h2 id=\"sorting---reducing-future-search-time\">Sorting - Reducing Future Search Time</h2><p>Sorting is <strong>only</strong> important in reducing future search time. As the cost of searching drops, the value of sorting goes down, and similarly, as the amount of elements to sort goes up, the speed in which it is done goes down.</p><p>Instead of sorting by comparing elements to each other, a more efficient way to sort is by comparing to an external standard or measure. This is called a ‚Äúcardinal number‚Äù instead of an ‚Äúordinal number‚Äù. A benchmark like this allows sorting without time intensive systems. Overall it may be incorrect, but it‚Äôs good enough , saves time and potential problems, and is therefore acceptable. (Example: The ‚Äúlaw of gross tonnage‚Äù states that smaller yields to bigger. This may not always be true, but it is true a large amount of the time and will yield less expended less resources for a high accuracy.)</p><h3 id=\"algorithms\">Algorithms</h3><h4 id=\"big-o\">Big O</h4><p>Big O notation is about hard guarantees and deadlines.</p><table>  <thead>    <tr>      <th><strong>Notation</strong></th>      <th><strong>Name</strong></th>      <th><strong>Analogy</strong></th>    </tr>  </thead>  <tbody>    <tr>      <td>O(1)</td>      <td>Constant</td>      <td>Cleaning the house before a party</td>    </tr>    <tr>      <td>O(n)</td>      <td>Linear</td>      <td>Giving drinks to every guest</td>    </tr>    <tr>      <td>O(n log n)</td>      <td>Linearithmic</td>      <td>¬†</td>    </tr>    <tr>      <td>O(n^2)</td>      <td>Quadratic</td>      <td>Every person meeting every person</td>    </tr>    <tr>      <td>O(2^n)</td>      <td>Exponential</td>      <td>¬†</td>    </tr>    <tr>      <td>O(n!)</td>      <td>Factorial</td>      <td>Must organize everyone in every possible permutation</td>    </tr>  </tbody></table><p>The fastest way to sort a list can‚Äôt be less than O(n) because you have to check all of the elements and that is at least the length of the list itself.</p><p>More efficient algorithms can sacrifice accuracy for speed. For instance, errors in Mergesort can compound quickly, when simpler sorts like Bubblesort are much safer.</p><h4 id=\"quadratic-sorts\">Quadratic Sorts</h4><h5 id=\"bubble-sort\">Bubble Sort</h5><ul>  <li>Start at the beginning</li>  <li>Test each element against the next one</li>  <li>If A &gt; B, swap A and B</li>  <li>Continue to the end of the elements</li>  <li>Repeat the above steps until all elements are sorted</li></ul><h5 id=\"insertion-sort\">Insertion Sort</h5><ul>  <li>Start at the beginning</li>  <li>Copy each element into a new array</li>  <li>Put the copied element in order in the new array</li>  <li>Repeat the above steps until all elements have been copied into the new array</li></ul><h4 id=\"linearithmic-sort\">Linearithmic Sort</h4><h5 id=\"mergesort\">Mergesort</h5><ul>  <li>Start at the beginning of the array and take every two elements out as a pair</li>  <li>Compare each pair of elements and put them in order (element 1 and element 2, element 3 and element 4, etc.)</li>  <li>Now pair each group up with another group</li>  <li>Compare each pair of elements across groups and place them in order</li>  <li>Repeat this process until all groups have become one group</li></ul><hr /><h2 id=\"caching---minimize-searching-maximize-use\">Caching - Minimize Searching, Maximize Use</h2><p>The goal of a cache management system is to minimize the amount of times you need to search your ‚Äúbase‚Äù and maximize the times you find what you need in your ‚Äúcache‚Äù. Memory hierarchies are like a pyramid: the base in largest and accessed the least; the highest is accessed the most and is the smallest. For example, a library is the base and your checked out books are at the top.</p><p>The alogirthms with which information in the cache is replaced by new information is similar to many algorithms and heuristics used in minimalism and getting rid of stuff (how long have I had it? when did I use it last?).</p><h3 id=\"least-recently-used\">Least Recently Used</h3><p>The Least Recently Used (LRU) algorithm is where you make LRU data more accessible, either via distance, ease, speed, location, etc. LRU is effective because of ‚ÄúTemporal Locality‚Äù: if it is in cache, it will probably be used again. Self organizing lists use LRU:</p><ul>  <li>Put documents in a pile</li>  <li>When a document is recalled, put it on top when finished.</li>  <li>End result: least recently used is at the bottom (long term storage), most recently used at the top (cache)</li></ul><blockquote>  <p>The nearest thing to clairvoyance is to assume that history will repeat itself backwards.</p></blockquote><p>Our human memory is not limited but the time spent searching is. It is a library with one infinitely long bookshelf. Using LRU, the most popular things come to the front/top of mind, and vice versa. The aging mind getting slower is not due to lack of agility or speed. It is due to abundance of information and difficulty in successfully caching.</p><hr /><h2 id=\"scheduling---focus-not-on-getting-things-done-but-getting-weighty-things-done\">Scheduling - Focus not on getting things done, but getting ‚Äúweighty‚Äù things done</h2><p>How you tackle your todo list is based on your goal. If your goal is to <strong>minimize time to total completion</strong>, do what has the shortest completion time first. THis makes each person waiting for their deliverables with the shortest amount of time. This also reduces total tasks on the todo list quickest. If your goal is to <strong>minimize oppressiveness/weight of tasks</strong>, divide the oppressiveness/weight of each task by the estimated completion time, and then do the tasks with the highest unit of weight per unit of time.</p><p>The oppressiveness/weight metric needs an importance or price as a scale. The example below you could think of the weight metric as importance or dollars per hour to illustrate. Example (using a 1-10 scale of weight/oppressiveness with higher numbers being more oppressive, and an hour scale for time):</p><ul>  <li><strong>Task 1:</strong>    <ul>      <li>Weight: 1 (low)</li>      <li>Time: 8</li>      <li><strong>Result: 1/8</strong></li>    </ul>  </li>  <li><strong>Task 2:</strong>    <ul>      <li>Weight: 10 (high)</li>      <li>Time: 1</li>      <li><strong>Result: 10/1</strong></li>    </ul>  </li>  <li><strong>Comparison</strong>    <ul>      <li>Task 1 vs. Task 2 == 1/8 : 10/1 == Task 1 (1/8) is less important to do now than Task 2 (10/1).</li>    </ul>  </li></ul><p>In the context of debt reduction, stemming from these two algorithms are two different schools of thought:</p><ul>  <li><strong>Debt Snowball</strong>: focus is on removing the sources of the smallest balances first (using the ‚Äúminimize time to total completion‚Äù algorithm above).</li>  <li><strong>Debt Avalanche:</strong> focus on removing the sources with the highest interest rates first (using the ‚Äúminimize oppressiveness/weight of tasks‚Äù algorithm above)</li></ul><h3 id=\"anti-patterns\">Anti-Patterns</h3><p><strong>Preemption</strong> is the ability to stop mid-task and start another. Using previous algorithms, preemption allows flexibility with tasks that can‚Äôt be started until a certain time or requisite is met. If receiving a new task in the middle of another one, comparing them using a weighted SPT ratio of weight/time is the best option.</p><p><strong>Context switching</strong> is work that is done in switching tasks to ensure that new task can be done, also known as <strong>meta-work</strong>. The cost of context switching is throughput. More responsiveness (more context switching with a lower threshold of rejection) leads to less throughput overall Lower responsiveness (less context switching with a higher threshold of rejection) leads to higher throughput overall.</p><p><strong>Thrashing</strong> is when this meta-work is taking up all of your time and no actual work can be done. If one finds themselves in a thrashing state, the best thing to do at that point is to do whatever tasks in whatever order to open up more resources.</p><p><strong>Priority inversion</strong> is where a lower level task is blocking a higher level task.</p><p><strong>Pre-crastination</strong> is when you choose smaller subtasks over a major task, with the goal being to lessen the total load of tasks. Pre-crastinators act with the wrong metric in mind: when a major task is difficult to manage, they try to lessen this difficulty by going for the ‚Äúminimize time to total completion‚Äù algorithm instead of the ‚Äúminimize oppressiveness‚Äù algorithm. This is most common in systems with no weighting system in place. For instance, email icons show all unread messages, including those messages that are unimportant as well as those that are. In trying to deal with the most weighty emails, this leads people to lower the total number of unread messages instead of dealing with those weighty emails, in an attempt to relieve the problem. If the goal is just to have less unreads, then this is the best choice, but if the goal is to do what is important, then the other algorithm is best, and therefore, managing the most weighty emails first is the best choice.</p><blockquote>  <p>In the case of app badges, if we can‚Äôt get them to reflect our actual priorities, and can‚Äôt overcome the impulse to optimally reduce any numerical figure thrown in out face, then perhaps the next best thing is to turn the badges off.</p></blockquote><h3 id=\"best-practices\">Best Practices</h3><p>Setting minimum periods with no interruptions allow both the throughput and responsiveness without sacrificing either, a la Pomodoro Method. <strong>Determine the minimum acceptable limit of responsiveness and then be no more responsive than that.</strong></p><p><strong>Interrupt coalescing</strong> is the grouping of like interrupts to all be done at once. Let all interrupts of type X wait until a minimum acceptable responsiveness and then attend to them all at once.</p><p>When <strong>priority inversion</strong> is an issue, use <strong>priority inheritance</strong>, where that lower level task that is blocking the higher level task inherits the priority of that task. If you can‚Äôt do task Y because task Z isn‚Äôt done yet, then task Z is now the most important task to be done.</p><hr /><h2 id=\"predictions\">Predictions</h2><blockquote>  <p>Events are always experienced at their proper frequencies, but this isn‚Äôt true of language.</p></blockquote><p>Good predictions require good priors. People generally have a ton of information from past experience and this allows good models. However, we retell interesting stories because of how interesting they are. This makes them seem to be more likely than they really are to be.</p><p>The Stanford Marshmallow Experiment and its successive study to replicate it‚Äôs findings was not at its core a study of delayed gratification, as much as it was trust that the system will honor its word in giving you the marshmallow it promised. Kids who lived in places with less trust in authority or the words of others were less likely to wait as it would have no perceived benefit to them.</p><h3 id=\"laws-and-rules\">Laws and Rules</h3><h4 id=\"laplaces-law\">Laplace‚Äôs Law</h4><p>With no priors or prior information given or known, the probability of a given event happening is <code class=\"highlighter-rouge\">(the number of successes + 1) / (the number of attempts + 2)</code>.</p><h4 id=\"bayess-rule\">Bayes‚Äôs Rule</h4><p>This shows the probability of <strong>one scenario</strong> given that <strong>another scenario</strong> is true. The formula is written as <code class=\"highlighter-rouge\">Probability of A given B = [(Probability of B given A) multiplied by (Probability of A)] / (Probability of B)</code>.</p><p>Example: What is the probability that <strong>the person is a librarian and not a farmer</strong> given <strong>a description</strong>? (from <a href=\"https://www.youtube.com/watch?v=HZGCoVF3YvM\">3Blue1Brown‚Äôs video on Bayes Rule</a>)</p><p>The total options available are that the person described is either a <strong>farmer</strong> or a <strong>librarian</strong>.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>P(librarian | description) = ( P(description | librarian) * P(librarian) ) / P(description)</code></pre></div></div><ul>  <li><code class=\"highlighter-rouge\">P(description | librarian)</code> = the likelihood that the description fits a given librarian, let‚Äôs say 40%</li>  <li><code class=\"highlighter-rouge\">P(librarian)</code> = the percentage of librarians (10) to farmers (200), ~5%</li>  <li><code class=\"highlighter-rouge\">P(description)</code> = the likelihood that the description fits a given librarian AND the likelihood that the description fits a given farmer;    <ul>      <li>Librarian: let‚Äôs say 40%</li>      <li>Farmer: let‚Äôs say 10%</li>      <li>Total: (.4 * 10 + .1 * 200) / 210 = 11%</li>    </ul>  </li></ul><p><code class=\"highlighter-rouge\">P(librarian | description) = ( 40 * 5 ) / 11 = 200/11</code> = 18% probability of the description matching a librarian in the given sample</p><blockquote>  <p>The richer the information we bring to Bayes rule, the more useful the predictions we can get out of it.</p></blockquote><p><a href=\"https://www.youtube.com/watch?v=U_85TaXbeIo\">3Blue1Brown‚Äôs second video on Bayes‚Äôs Rule</a></p><h4 id=\"copernican-principle\">Copernican Principle</h4><p>Without prior information, we encounter things on on average halfway through their entire existence. They will last as long as they already have <em>again</em>.</p><h3 id=\"distributionsscales\">Distributions/Scales</h3><h4 id=\"normal-distribution-use-the-average-rule\">Normal Distribution: use the Average Rule</h4><p>There is an average and then falls sharply on either side. Usually follows a single appropriate scale, e.g. average lifespan is 76; low is single digits and high is triple.</p><p>The Average Rule is to use the distribution‚Äôs average to make your prediction.</p><h4 id=\"power-law-distribution-use-the-multiplicative-rule\">Power Law Distribution: use the Multiplicative Rule</h4><p>Follows a more displaced curve. Often accompanied by hige discrepancies of numbers, e.g. average income is $58k, but 2/3 of population make less while .01% make 100 times more. Can be interpreted as the 80/20 rule.</p><p>The Multiplicative Rule is that, in the case of a power law distribution, the observation made can be multiplied by a constant factor to make a prediction.</p><h4 id=\"erlang-distribution-use-the-additive-rule\">Erlang Distribution: use the Additive Rule</h4><p>In between a normal and power law distribution. Models include radioactive decay, political terms in office.</p><p>The Additive Rule is that things will go on a constant amount longer. These distributions yield the same prediction regardless of history or current state.</p><h3 id=\"overfitting-and-how-to-avoid-it\">Overfitting and How To Avoid It</h3><p><a href=\"https://en.wikipedia.org/wiki/Overfitting\">Overfitting is a model that contains more parameters than can be justified by the data</a>. Applying simple heuristics (fewer models or a simpler formula) can often be better and more accurate due to overfitting and confidence in it by the user. Too simple of a model will get you inaccurate results; too complex will imply things that don‚Äôt exist or are hyperbolic. The more noise you have, the more simple your model or heuristics need to be to ensure no overfitting occurs. The less noise you have, the more complex your model and heuristics can be. The more accurate our data, the more factors can be used safely. Adding more factors to help match the data correctly is not necessarily the way to get good predictions.</p><p>Overfitting your work to fit the picture of success is product over process thinking. If your goal is to lose 30 pounds and you don‚Äôt eat, you will succeed (product) but you will also sacrifice the form (process) necessary to do it in a way that addressed the underlying information and goal: better health. Focus on the way and process over all else.</p><p>In focusing on form, be careful what you measure as goal oriented behavior. This will be reached at all costs and that may or may not be in the way that was asked.</p><h4 id=\"early-stopping\">Early stopping</h4><p>Early stopping is used to stop the refinement or research into solving a problem before you get too in the weeds. Overfitting will take place beyond the most important factors.</p><blockquote>  <p>How early to stop depends on the gap between what you can measure and what really matters.</p></blockquote><h4 id=\"cross-validation\">Cross validation</h4><p>Cross validation is assessing the given data and seeing how well the model predicts unseen data.</p><ul>  <li>Withhold data points to plug in later and see if they follow</li>  <li>Use data pulled from another measure and see if it holds up</li></ul><p>Cross training with different educational systems or testing methods can ensure that the learning is not being ‚Äútaught to the test‚Äù.</p><h4 id=\"regularization\">Regularization</h4><p>Regularization is introducing penalties for more complexity in the model to ensure that the extra complexity is worth it. Only the most important factors must stay in relation to how much importance the overall function the element is to the system. For instance, the brain would not be evolutionarily viable if it took 20% of our caloric intake and didn‚Äôt provide such benefits as it does now. Also, the brain is apparently not important enough to take 40% of our caloric intake.</p><hr /><h2 id=\"predictions-1\">Predictions</h2><h3 id=\"models\">Models</h3><h4 id=\"hill-climbing\">Hill Climbing</h4><p>Hill Climbing is starting with a possibility and editing that possibility over and over to find the best solution. It gives you the ‚Äúlocal maximum‚Äù to your starting point. Hill climbing can be augmented with ‚Äújitter‚Äù, an applied randomness to test slight deviations for successful outcomes.</p><p>Different types of Hill Climbing include:</p><ul>  <li><strong>‚ÄúShotgun‚Äù hill climbing</strong>: restarting from a totally random or shuffled possibility and repeating your whole process.</li>  <li><strong>Metropolis Algorithm</strong>: accepting slightly worse possibilities at random to ensure new directions are taken.</li>  <li><strong>Simulated Annealing</strong>: starting at a random point, always take a better solution if found and accept slightly worse solutions X% of the time. Continue lowering X until it is zero and you will have found the local maximum. Good for use with Metropolis, simulates jitter, and utilizes shotgun.</li></ul><blockquote>  <p>Your likelihood of following a bad idea should be inversely proportional to how bad it is.</p></blockquote><h4 id=\"monte-carlo-method\">Monte Carlo Method</h4><p>Replace exhaustive probability calculations with sample simulations, usually samples made of random inputs.</p><h4 id=\"sieve-of-eratosthenes\">Sieve of Eratosthenes</h4><p>Example: To find primes from 1 to n:</p><ul>  <li>Write all numbers from 1 to n</li>  <li>Start at 2 and cross off any multiples of 2.</li>  <li>Repeat with all numbers not yet crossed out.</li>  <li>When n/2 is reached, all numbers not yet crossed out are primes.</li></ul><h4 id=\"greedymyopic-algorithms\">Greedy/Myopic Algorithms</h4><p>These focus on only the best choice at each step and don‚Äôt worry about the others.</p><h3 id=\"types-of-relaxation-and-their-implementation\">Types of Relaxation and Their Implementation</h3><h4 id=\"constraint-relaxation\">Constraint Relaxation</h4><p>Constraint relaxation is when you try to solve an easier version of the problem, and then when you‚Äôve made progress, add constraints back in. <strong>Constraint relaxation is a tradeoff of time for good-enough solutions.</strong></p><p>Remove the constraints, make progress, and then reintegrate the constraints.</p><h4 id=\"discrete-optimizationcontinuous-relaxation\">Discrete Optimization/Continuous Relaxation</h4><p>Discrete optimization/continuous relaxation is used where fractions aren‚Äôt used (number of fire trucks per capita, number of people to vaccinate). Relaxing these to use fractions and then round from there is usually good enough (number of fire trucks ending up being 1.2 per capita, rounding to 1).</p><p>Turn discrete measurements to continuous measurements and then round them off.</p><h4 id=\"lagrangian-relaxation\">Lagrangian Relaxation</h4><p>In optimization, there are the rules and the scorekeeping. Moving constraints from the rules (input) to the scorekeeping (output) allows for impossible solutions to get close enough.</p><p>Change the bindings on the rules into bindings on the score.</p><blockquote>  <p>The perfect is the enemy of the good. - Voltaire</p></blockquote><hr /><h2 id=\"networking\">Networking</h2><h3 id=\"exponential-backoff\">Exponential Backoff</h3><p>If an attempt is failed, increase the previous constraint by double.</p><ul>  <li>If network is not connecting, wait between 1-2s to try and reconnect; again, wait 2-4s more; etc.</li>  <li>If a person doesn‚Äôt respond to your call or text, wait 1 day to follow up; again, wait 2 days, etc.</li>  <li>If a person violates probation, the 1st time they should spend 1 day in jail; the 2nd, 2 days; 3rd, 4 days; etc.</li></ul><h3 id=\"additive-increase-multiplicative-decrease\">Additive increase, multiplicative decrease</h3><p>On a success, increase the input side at a constant rate. On a failure, cut back that input by half. Applicable most directly to internet connections and attempts to ask for or send information.</p><h3 id=\"backchannels\">Backchannels</h3><p>The backchannels in communication are responses, acknowledgements, or the lack thereof. In a conversation or speech, the effectiveness of a speaker is partly dependent on the listener‚Äôs backchannel communication.</p><h3 id=\"taildrop\">Taildrop</h3><p>A taildrop is the dropping of everything that didn‚Äôt fit within the buffer. Modern communication doesn‚Äôt allow taildrop, and was specifically made to stop it. For example, a home phone with a tape message machine will eventually run out of space, but an email box has no feasible limit of how large the backlog can get. <strong>We aren‚Äôt always connected, but we are always buffered.</strong></p><blockquote>  <p>One of the fundamental principles of buffers is that they only work correctly if they are routinely zeroed out.</p></blockquote><hr /><h2 id=\"game-theory\">Game Theory</h2><blockquote>  <p>We can hope to be fortunate, but should strive to be wise.</p></blockquote><p><strong>‚ÄúPrice of anarchy‚Äù</strong>: The gap between cooperation and competition. The bigger the difference, the higher the price.</p><p><strong>Revelation Principle</strong>: Any game that requires strategic masking of the truth can be transformed into a game where the dominant strategy is honesty.</p><p><strong>Computational Kindness</strong>: relieving the amount of things for sombody to compute when forced with your problem. By asking a very specific question, the answer will be simpler. Too many questions will feel intractable. Instead of ‚Äúpassing the cognitive buck‚Äù, offering a suggestion is a way to lessen the burden for others. Instead of a continued computation, aka spinning (will the bus come soon?), opt for a single one, aka blocking (the bus is coming in 10 minutes; I can/cannot wait).</p><h3 id=\"leveling\">Leveling</h3><p>Only playing one level above your opponent. If you are playing at level 3 and they are at level 1, it is likely you will be overthinking your strategy and overfit your model.</p><ul>  <li>Level 1 - I know</li>  <li>Level 2 - I know you know</li>  <li>Level 3 - You know I know you know</li>  <li>etc.</li></ul><p>An <strong>Information Cascade</strong> is when external information affects your personal information so much that you then disregard your own info completely.</p><ul>  <li>Be wary of cases where you know more about what people are doing than why.</li>  <li>Actions are not beliefs. Do not misinterpret actions as beliefs.</li></ul><h3 id=\"equilibrium\">Equilibrium</h3><p>In a two player game, this is the best strategy assuming rational play. This is distinctly outside of leveling, meta strategy, etc. The predictive abilities of Nash equilibrium are only useful if you can find them as a player.</p><p>If the point of equilibrium can‚Äôt be changed directly, then the rules must be changed to force the equilibrium to move.</p><ul>  <li>If employers give an option to take vacation or not, the equilibrium will shift to be the ‚Äúmost loyal‚Äù employee, taking less vacation than their peers.</li>  <li>By making vacation mandatory, this leaves everyone free to take the break, not allowing the competition to overtake their good judgment in taking care of themselves.</li></ul><h3 id=\"auctions\">Auctions</h3><p><strong>Sealed Bid First-Price Auctions</strong>: Bids are made in secret and highest offer wins. The bidders are not offering what they want to pay; they are offering what they think <em>others</em> will pay plus some. Winners almost always overpay.</p><p><strong>Dutch Auction</strong>: Starting price is lowered until someone wants to buy it.</p><p><strong>English Auction</strong>: Starting price is raised until highest bidder.</p><p><strong>Vickrey Auction</strong>: Sealed bid first-price auction but winner pays second highest bid. Utilizes the Revelation Principle to convert the sealed bid first-price auction‚Äôs ‚Äústrategic masking of the truth‚Äù into a game where people play honestly.</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/12/27/atlb-notes",
            
            
            
            
            
            "date_published": "2020-12-27T00:00:00+00:00",
            "date_modified": "2020-12-27T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/12/13/aoc-day-13",
            "title": "Solution to Advent of Code 13 - LCM with Offsets",
            "summary": "Solution to Advent of Code 13 - LCM with Offsets",
            "content_text": "Here, to help justify that I definitely stole an answer from somebody on Reddit to answer this question, I‚Äôm going to explain why the answer works. Mainly for myself to truly understand this, but also so that if somebody searches for something like this at a later date, there will be a reference. (I‚Äôll be using the smaller sample data for the explanation because it is way easier to grok)Check out the problem here, or this won‚Äôt make any sense.Brute ForceMy initial solution used brute force, as essentially all of my solutions have so far, and this‚Ä¶didn‚Äôt work. My computer was working really hard, fans spinning and everything, but wasn‚Äôt getting anywhere (because the answer for me ended up being 667,437,230,788,118 and I started at 1). I went to bed and tried to not think about it. First of course we start with parsing the data, which is a line of ‚Äúbus IDs‚Äù, which actually correspond to the intervals at which the buses leave the station.7,13,x,x,59,x,31,19I put these into an array, converting the numbers to integers and leaving the x‚Äôs as strings.[7, 13, 'x', 'x', 59, 'x', 31, 19]Here‚Äôs the pseudocode of the brute force solution:Set 'largest_number' to the largest number in the arraySet 'largest_offset' to the index of 'largest_number' in the arraySet the initial value of the 'multiple' by which to multiply the 'largest_number' to 1Set a 'found' variable to let the program know the solution has not been foundWhile the solution has not been 'found':    Set that the solution is 'found' until proven otherwise    Set the 'target' test value to the 'multiple' times the 'largest_number'    For each 'index' of each 'bus_ID' in the array        Set the 'offset' to the 'index' minus the 'largest_offset'        If the 'bus_ID' is an 'x', then continue to the next 'bus_ID'        If the remainder of (the sum of the 'target' and the 'offset') divided by the 'bus_ID' is not zero:        \tSet that the solution was not found and break out of the loop    Add one to the 'multiple'Return the 'target'I used the largest number in the array to try and speed up the already long search, as their multiples of 59 would get searched way faster than the multiples of 7. As this iterates through, it tests every multiple of the largest number against each number plus or minus its relative offset. Unfortunately, even though this works, it is not fast (at all) for the much longer and much more complex final puzzle input.One way I could have improved this was in the parsing of the data. Instead of trying to calculate weird offsets, I should have just included the offsets with the bus IDs as a tuple. The result would be a list of tuples, each of which include the offset and the bus ID/interval. The ‚Äòx‚Äôs are also discarded, as they are no longer necessary.# (offset, bus_id)[(0,7), (1,13), (4,59), (6,31), (7,19)]SievingThe idea of a ‚Äòsieve‚Äô in math is to use it to ‚Äòsieve‚Äô out all non-possibilities, leaving you with a much smaller pool to test. Most notable is the Sieve of Erastosthenes, which is used to calculate prime numbers.The most base case of this problem that I found was to find the least common multiple of a given set of integers. To find this using the sieve method, we can use this pseudocode:Set the initial value of the 'answer' number to 0Set the initial value of 'least common multiple' to 1For each 'number' in the array:\tWhile the remainder of the 'answer' value divided by the 'number' is not zero:\t\tAdd the value of the 'least common multiple' to the 'answer'\tSet the 'least common multiple' to the `answer`Return the 'answer'Example:Let‚Äôs say our given array of integers are [2,3,8]. We start by setting our answer as 0 and the least common multiple to 1. Then we reach the For loop, which will cycle through the numbers in the array:Set the `number` to the first number in the `array`, 2.While `answer` % `number` ‚â† 0: \t0 % 2 ‚â† 0 is true, so add `least common multiple` to the `answer`. `answer` now equals 1.\t1 % 2 ‚â† 0 is true, so add `least common multiple` to the `answer`. `answer` now equals 2.\t2 % 2 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 2.We continue through the for loop: `number` is the next in the `array`: 3.While `answer` % `number` ‚â† 0: \t2 % 3 ‚â† 0 is true, so add `least common multiple` to `answer`: 4.\t4 % 3 ‚â† 0 is true, so add `least common multiple` to `answer`:  6.\t6 % 3 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 6. We continue through the for loop: `number` is the next in the `array`: 8.While `answer` % `number` ‚â† 0: \t6 % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 12.\t12 % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 18.\t18 % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 24.\t24 % 8 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 24.One thing to note going forward is that all the numbers of the bus IDs are prime numbers, as if they were not, there would have to be some factorization in preparing to find the least common multiple. Finding the LCM of all primes is to just multiply them together, but with the offsets, we need this longhand to get there.Adding the OffsetsNow that we have this pseudocode, adding the offsets is easier for me to grok. The biggest difference is that we are going to utilize the least common multiple and the answer a tiny bit differently. Assuming we have our list of bus IDs from before, where each ID is a tuple containing the offset and the bus ID/interval, we now have to adjust our test in the while loop. Instead of testing for if the remainder of the answer divided by the number is not zero, we are going to test whether the remainder of the sum of the answer and the offset all divided by the number is not zero.('answer' + 'offset') % `number` ‚â† 0Now, here is the pseudocode, taking into account the offset needed to calculate the answer.Set the initial value of the 'answer' number to 0Set the initial value of 'least common multiple' to 1For each 'offset' and 'number' in the array:\tWhile the remainder of the sum of the 'answer' and the 'offset' value all divided by the 'number' is not zero:\t\tAdd the value of the 'least common multiple' to the 'answer'\tSet the 'least common multiple' to the 'least common multiple' multiplied by the 'number'Return the 'answer'ExampleI‚Äôll again use an array containing [2,3,8], keeping in mind the new problem: our solution must look for what number is:  A multiple of the first element, and  The sum of the offset plus a multiple of the number, for every other element.First we will need to parse our array into tuples containing their offsets and numbers:[(0, 2), (1, 3), (2, 4)]Next, we define answer as 0 and least common multiple as 1. Then we continue into the For loop:Set `offset` to the first number of the first tuple in `array`: 0; and set `number` to second number in the first tuple in `array`: 2.While (`answer` + `offset`) % `number` ‚â† 0: \t(0 + 0) % 2 ‚â† 0 is true, so add `least common multiple` to `answer`: 1.\t(1 + 0) % 2 ‚â† 0 is true, so add `least common multiple` to `answer`: 2.\t(2 + 0) % 2 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 2.We continue through the for loop: set `offset` and `number` as the numbers in the next tuple: 1 and 3.While (`answer` + `offset`) % `number` ‚â† 0: \t(2 + 1) % 3 ‚â† 0 is true, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 6.We continue through the for loop: set `offset` and `number` as the numbers in the next tuple: 2 and 8.While (`answer` + `offset`) % `number` ‚â† 0: \t(2 + 2) % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 8.\t(8 + 2) % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 14.\t(14 + 2) % 8 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 48.Return the `answer`: 14.Other SolutionsThe ones using the Chinese remainder theorem went way over my head and the videos I watched were not enough to compel me to spend time trying to: first, understand it and then second, write the program out. It was well beyond my understanding, but I think it probably is the ‚Äúdesired‚Äù solution.",
            "content_html": "<p>Here, to help justify that I definitely stole an answer from somebody on Reddit to answer this question, I‚Äôm going to explain <em>why</em> the answer works. Mainly for myself to truly understand this, but also so that if somebody searches for something like this at a later date, there will be a reference. (I‚Äôll be using the smaller sample data for the explanation because it is way easier to grok)</p><p><a href=\"https://adventofcode.com/2020/day/13\"><strong>Check out the problem here, or this won‚Äôt make any sense.</strong></a></p><h2 id=\"brute-force\">Brute Force</h2><p><a href=\"https://github.com/milofultz/aoc2020/blob/master/13/aoc13-2-brute.py\">My initial solution used brute force</a>, as essentially all of my solutions have so far, and this‚Ä¶didn‚Äôt work. My computer was working really hard, fans spinning and everything, but wasn‚Äôt getting anywhere (because the answer for me ended up being 667,437,230,788,118 and I started at <em>1</em>). I went to bed and tried to not think about it. First of course we start with parsing the data, which is a line of ‚Äúbus IDs‚Äù, which actually correspond to the intervals at which the buses leave the station.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>7,13,x,x,59,x,31,19</code></pre></div></div><p>I put these into an array, converting the numbers to integers and leaving the x‚Äôs as strings.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[7, 13, 'x', 'x', 59, 'x', 31, 19]</code></pre></div></div><p>Here‚Äôs the pseudocode of the brute force solution:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Set 'largest_number' to the largest number in the arraySet 'largest_offset' to the index of 'largest_number' in the arraySet the initial value of the 'multiple' by which to multiply the 'largest_number' to 1Set a 'found' variable to let the program know the solution has not been foundWhile the solution has not been 'found':    Set that the solution is 'found' until proven otherwise    Set the 'target' test value to the 'multiple' times the 'largest_number'    For each 'index' of each 'bus_ID' in the array        Set the 'offset' to the 'index' minus the 'largest_offset'        If the 'bus_ID' is an 'x', then continue to the next 'bus_ID'        If the remainder of (the sum of the 'target' and the 'offset') divided by the 'bus_ID' is not zero:        \tSet that the solution was not found and break out of the loop    Add one to the 'multiple'Return the 'target'</code></pre></div></div><p>I used the largest number in the array to try and speed up the already long search, as their multiples of 59 would get searched way faster than the multiples of 7. As this iterates through, it tests every multiple of the largest number against each number plus or minus its relative offset. Unfortunately, even though this works, it is not fast (at all) for the much longer and much more complex final puzzle input.</p><p>One way I could have improved this was in the parsing of the data. Instead of trying to calculate weird offsets, I should have just included the offsets with the bus IDs as a tuple. The result would be a list of tuples, each of which include the <strong>offset</strong> and the <strong>bus ID/interval</strong>. The ‚Äòx‚Äôs are also discarded, as they are no longer necessary.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># (offset, bus_id)[(0,7), (1,13), (4,59), (6,31), (7,19)]</code></pre></div></div><h2 id=\"sieving\">Sieving</h2><p>The idea of a <a href=\"https://en.wikipedia.org/wiki/Sieve_theory\">‚Äòsieve‚Äô</a> in math is to use it to ‚Äòsieve‚Äô out all non-possibilities, leaving you with a much smaller pool to test. Most notable is the <a href=\"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\">Sieve of Erastosthenes</a>, which is used to calculate prime numbers.</p><p>The most base case of this problem that I found was to find the least common multiple of a given set of integers. To find this using the sieve method, we can use this pseudocode:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Set the initial value of the 'answer' number to 0Set the initial value of 'least common multiple' to 1For each 'number' in the array:\tWhile the remainder of the 'answer' value divided by the 'number' is not zero:\t\tAdd the value of the 'least common multiple' to the 'answer'\tSet the 'least common multiple' to the `answer`Return the 'answer'</code></pre></div></div><h4 id=\"example\">Example:</h4><p>Let‚Äôs say our given <code class=\"highlighter-rouge\">array</code> of integers are [2,3,8]. We start by setting our <code class=\"highlighter-rouge\">answer</code> as 0 and the <code class=\"highlighter-rouge\">least common multiple</code> to 1. Then we reach the For loop, which will cycle through the <code class=\"highlighter-rouge\">number</code>s in the <code class=\"highlighter-rouge\">array</code>:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Set the `number` to the first number in the `array`, 2.While `answer` % `number` ‚â† 0: \t0 % 2 ‚â† 0 is true, so add `least common multiple` to the `answer`. `answer` now equals 1.\t1 % 2 ‚â† 0 is true, so add `least common multiple` to the `answer`. `answer` now equals 2.\t2 % 2 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 2.We continue through the for loop: `number` is the next in the `array`: 3.While `answer` % `number` ‚â† 0: \t2 % 3 ‚â† 0 is true, so add `least common multiple` to `answer`: 4.\t4 % 3 ‚â† 0 is true, so add `least common multiple` to `answer`:  6.\t6 % 3 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 6. We continue through the for loop: `number` is the next in the `array`: 8.While `answer` % `number` ‚â† 0: \t6 % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 12.\t12 % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 18.\t18 % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 24.\t24 % 8 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 24.</code></pre></div></div><p>One thing to note going forward is that <strong>all the numbers of the bus IDs are prime numbers</strong>, as if they were not, there would have to be some factorization in preparing to find the least common multiple. Finding the LCM of all primes is to just multiply them together, but with the offsets, we need this longhand to get there.</p><h3 id=\"adding-the-offsets\">Adding the Offsets</h3><p>Now that we have this pseudocode, adding the offsets is easier for me to grok. The biggest difference is that we are going to utilize the <code class=\"highlighter-rouge\">least common multiple</code> and the <code class=\"highlighter-rouge\">answer</code> a <em>tiny</em> bit differently. Assuming we have our list of bus IDs from before, where each ID is a tuple containing the <strong>offset</strong> and the <strong>bus ID/interval</strong>, we now have to adjust our test in the while loop. Instead of testing for if the remainder of the <code class=\"highlighter-rouge\">answer</code> divided by the <code class=\"highlighter-rouge\">number</code> is not zero, we are going to test whether the remainder of the sum of the <code class=\"highlighter-rouge\">answer</code> and the <code class=\"highlighter-rouge\">offset</code> all divided by the <code class=\"highlighter-rouge\">number</code> is not zero.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>('answer' + 'offset') % `number` ‚â† 0</code></pre></div></div><p>Now, here is the pseudocode, taking into account the <code class=\"highlighter-rouge\">offset</code> needed to calculate the answer.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Set the initial value of the 'answer' number to 0Set the initial value of 'least common multiple' to 1For each 'offset' and 'number' in the array:\tWhile the remainder of the sum of the 'answer' and the 'offset' value all divided by the 'number' is not zero:\t\tAdd the value of the 'least common multiple' to the 'answer'\tSet the 'least common multiple' to the 'least common multiple' multiplied by the 'number'Return the 'answer'</code></pre></div></div><h4 id=\"example-1\">Example</h4><p>I‚Äôll again use an <code class=\"highlighter-rouge\">array</code> containing [2,3,8], keeping in mind the new problem: our solution must look for what number is:</p><ul>  <li>A multiple of the first element, and</li>  <li>The sum of the offset plus a multiple of the number, for every other element.</li></ul><p>First we will need to parse our array into tuples containing their <strong>offsets</strong> and <strong>numbers</strong>:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[(0, 2), (1, 3), (2, 4)]</code></pre></div></div><p>Next, we define <code class=\"highlighter-rouge\">answer</code> as 0 and <code class=\"highlighter-rouge\">least common multiple</code> as 1. Then we continue into the For loop:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Set `offset` to the first number of the first tuple in `array`: 0; and set `number` to second number in the first tuple in `array`: 2.While (`answer` + `offset`) % `number` ‚â† 0: \t(0 + 0) % 2 ‚â† 0 is true, so add `least common multiple` to `answer`: 1.\t(1 + 0) % 2 ‚â† 0 is true, so add `least common multiple` to `answer`: 2.\t(2 + 0) % 2 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 2.We continue through the for loop: set `offset` and `number` as the numbers in the next tuple: 1 and 3.While (`answer` + `offset`) % `number` ‚â† 0: \t(2 + 1) % 3 ‚â† 0 is true, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 6.We continue through the for loop: set `offset` and `number` as the numbers in the next tuple: 2 and 8.While (`answer` + `offset`) % `number` ‚â† 0: \t(2 + 2) % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 8.\t(8 + 2) % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 14.\t(14 + 2) % 8 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 48.Return the `answer`: 14.</code></pre></div></div><h2 id=\"other-solutions\">Other Solutions</h2><p>The ones using the <a href=\"https://en.wikipedia.org/wiki/Chinese_remainder_theorem\">Chinese remainder theorem</a> went <em>way</em> over my head and the videos I watched were not enough to compel me to spend time trying to: first, understand it and then second, write the program out. It was well beyond my understanding, but I think it probably is the ‚Äúdesired‚Äù solution.</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/12/13/aoc-day-13",
            
            
            
            
            
            "date_published": "2020-12-13T00:00:00+00:00",
            "date_modified": "2020-12-13T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/12/01/advent-of-code",
            "title": "üß© Advent Of Code 2020 - Solutions",
            "summary": "Here's some solutions I made for the AoC 2020",
            "content_text": "These are my solutions. I‚Äôm trying to do as many as I can in both Python and in Javascript. Plus I‚Äôm going to scope out people‚Äôs answers in C and see what I can glean.Check out the solutions on GitHub  20201201: Solved the first challenge, starting up number 2  20201202: Solved day 2  20201203: Solved day 3 and 4  20201204: Solved day 5  20201205: Solved day 6  20201206: Solved day 7. Definitely noticing the desire to be on the leaderboards and ‚Äúcool‚Äù or ‚Äúfast‚Äù or whatever and trying to go against that feeling. I would rather have effective solutions ‚Äúslowly‚Äù than flail around and hope stuff works.  20201207: Solved day 8. Worked much more purposefully and without (as much) regard to the clock; still working on focusing on the process over the product.  20201208: Solved day 9. Brute forcing a problem I should probably use an algorithm for, but don‚Äôt know enough. Now is the time to really dig! Look through solutions on Reddit, Mastodon, etc.  20201209: Revised my work for day 9 to find a better solution. Ended up using a solution from ‚Äòneelakantankk‚Äô I found on Reddit, utilizing a deque, which I have very little experience with. It is a very interesting solution that utilizes a truth I missed in the iteration. When iterating through the contiguous numbers, if the sum of those contiguous numbers is higher than the target, you can safely remove the first number in the contiguous numbers. I‚Äôm having a hard time fully grokking it but it intuitively feels right, so I‚Äôm going to try and work it out on paper until it really makes sense.  20201209: Solved day 10 part 1 but do not have the know how for part 2 without just stealing an answer without any understanding. Will come back later.  20201210: Solved day 11  20201211: Solved day 12  20201211: Solved day 13 part 1 and have a brute force solution for part 2; however this solution has been spinning for a half hour at least and is showing no signs of progress.  20201213: Went and searched for solutions and found one that I was really able to understand from gravitar64, using a ‚Äúsieving‚Äù method. This didn‚Äôt use some intense number theory, like other solutions which used the Chinese Remainder Theorem. I did cheat, but I understand the answer and how it works and that‚Äôs all I wanted anyway.  20201213: Made a write up of how the sieve method works to repent for what feels like cheating.  20201215: Solved day 14 and 15. Day 15 was really tough to understand while I was doing it, as there was a lot to juggle, but it was a very fun one to solve. Ended up refactoring quite a bit by reading the code of Scarymagi I found on Reddit.  20201216: Solved day 16, and parsing was the majority of the work. It was kind of its own challenge in itself. The problem for part 1 after that was pretty straightforward with a set. Part 2 presented an interesting challenge of essentially trying to solve a logic grid puzzle using programming, which I hadn‚Äôt done before. That was a good time!  20201218: Started on day 17 and realized I need to finally learn how to use Numpy and deal with 3 dimensional arrays, as this is essentially Conway‚Äôs Game of Life but in 3 dimensions.  20201219: Solved day 17 and learned how to use Numpy fairly well with it. Ended up doing Game of Life as a 3 dimensional and 4 dimensional version, which was wild. 3-dimensions required a lot from me, a guy who doesn‚Äôt ever do anything like this and probably solved it in a very long-winded inelegant way, but dammit I solved it.  20201219: Solved day 10 part 2 finally. Tried a recursive solution but it was blasting my computer and taking way too long, so I went searching. The solutions I found using defaultdict was super elegant, so went with that and am pretty happy with it.  20201221: Solved day 18, which was all about essentially making math that solved in the wrong order (i.e. not PEMDAS).  20201222: Solved day 19 part 1, which was really hard to grok, but I got it. A recursion puzzle that was hard to wrap my head around the initial parts. Part 2 is beyond the scope of what my late night brain can handle.  20201225: Solved day 20 and it took me a few hours yesterday and most of today. This was really fun, essentially automating putting together a puzzle, which was a really satisfying project.  20201228: Solved day 21 and it was much, much easier than 20. Essentially logic grid puzzle solving again, like in day 16, which is so satisfying to implement!",
            "content_html": "<p>These are my solutions. I‚Äôm trying to do as many as I can in both Python and in Javascript. Plus I‚Äôm going to scope out people‚Äôs answers in C and see what I can glean.</p><p><a href=\"https://github.com/milofultz/aoc2020\"><strong>Check out the solutions on GitHub</strong></a></p><ul>  <li>20201201: Solved the first challenge, starting up number 2</li>  <li>20201202: Solved day 2</li>  <li>20201203: Solved day 3 and 4</li>  <li>20201204: Solved day 5</li>  <li>20201205: Solved day 6</li>  <li>20201206: Solved day 7. Definitely noticing the desire to be on the leaderboards and ‚Äúcool‚Äù or ‚Äúfast‚Äù or whatever and trying to go against that feeling. I would rather have effective solutions ‚Äúslowly‚Äù than flail around and hope stuff works.</li>  <li>20201207: Solved day 8. Worked much more purposefully and without (as much) regard to the clock; still working on focusing on the process over the product.</li>  <li>20201208: Solved day 9. Brute forcing a problem I should probably use an algorithm for, but don‚Äôt know enough. Now is the time to really dig! Look through solutions on Reddit, Mastodon, etc.</li>  <li>20201209: Revised my work for day 9 to find a better solution. Ended up using <a href=\"https://github.com/neelakantankk/Advent_of_Code_2020/blob/main/Day_09/day_09.py\">a solution from ‚Äòneelakantankk‚Äô I found on Reddit</a>, utilizing a deque, which I have very little experience with. It is a very interesting solution that utilizes a truth I missed in the iteration. When iterating through the contiguous numbers, if the sum of those contiguous numbers is higher than the target, you can safely remove the first number in the contiguous numbers. I‚Äôm having a hard time fully grokking it but it intuitively feels right, so I‚Äôm going to try and work it out on paper until it really makes sense.</li>  <li>20201209: Solved day 10 part 1 but do not have the know how for part 2 without just stealing an answer without any understanding. Will come back later.</li>  <li>20201210: Solved day 11</li>  <li>20201211: Solved day 12</li>  <li>20201211: Solved day 13 part 1 and have a brute force solution for part 2; however this solution has been spinning for a half hour at least and is showing no signs of progress.</li>  <li>20201213: Went and searched for solutions and <a href=\"https://www.reddit.com/r/adventofcode/comments/kc4njx/comment/gfqeouq\">found one that I was really able to understand from gravitar64</a>, using a <a href=\"https://en.wikipedia.org/wiki/Sieve_theory\">‚Äúsieving‚Äù method</a>. This didn‚Äôt use some intense number theory, like other solutions which used the <a href=\"https://en.wikipedia.org/wiki/Chinese_remainder_theorem\">Chinese Remainder Theorem</a>. I did cheat, but I understand the answer and how it works and that‚Äôs all I wanted anyway.</li>  <li>20201213: <a href=\"/2020/12/13/aoc-day-13\">Made a write up of how the sieve method works to repent for what feels like cheating.</a></li>  <li>20201215: Solved day 14 and 15. Day 15 was really tough to understand while I was doing it, as there was a lot to juggle, but it was a very fun one to solve. Ended up refactoring quite a bit by reading the code of <a href=\"https://github.com/Scarygami/aoc2020/blob/main/15/day15.py\">Scarymagi</a> I found on Reddit.</li>  <li>20201216: Solved day 16, and parsing was the majority of the work. It was kind of its own challenge in itself. The problem for part 1 after that was pretty straightforward with a set. Part 2 presented an interesting challenge of essentially trying to solve a <a href=\"https://en.wikipedia.org/wiki/Logic_puzzle#Logic_grid_puzzles\">logic grid puzzle</a> using programming, which I hadn‚Äôt done before. That was a good time!</li>  <li>20201218: Started on day 17 and realized I need to finally learn how to use Numpy and deal with 3 dimensional arrays, as this is essentially <a href=\"https://en.wikipedia.org/wiki/Conway's_Game_of_Life\">Conway‚Äôs Game of Life</a> but in 3 dimensions.</li>  <li>20201219: Solved day 17 and learned how to use Numpy fairly well with it. Ended up doing Game of Life as a 3 dimensional and <em>4 dimensional</em> version, which was wild. 3-dimensions required a lot from me, a guy who doesn‚Äôt ever do anything like this and probably solved it in a very long-winded inelegant way, but dammit I solved it.</li>  <li>20201219: Solved day 10 part 2 finally. Tried a recursive solution but it was blasting my computer and taking way too long, so I went searching. The solutions I found using <code class=\"highlighter-rouge\">defaultdict</code> was super elegant, so went with that and am pretty happy with it.</li>  <li>20201221: Solved day 18, which was all about essentially making math that solved in the wrong order (i.e. not <a href=\"https://blog.prepscholar.com/pemdas-meaning-rule\">PEMDAS</a>).</li>  <li>20201222: Solved day 19 part 1, which was really hard to grok, but I got it. A recursion puzzle that was hard to wrap my head around the initial parts. Part 2 is beyond the scope of what my late night brain can handle.</li>  <li>20201225: Solved day 20 and it took me a few hours yesterday and most of today. This was really fun, essentially automating putting together a puzzle, which was a really satisfying project.</li>  <li>20201228: Solved day 21 and it was much, much easier than 20. Essentially logic grid puzzle solving again, like in day 16, which is so satisfying to implement!</li></ul>",
            "url": "http://milofultz.com/2020/12/01/advent-of-code",
            
            
            
            
            
            "date_published": "2020-12-01T00:00:00+00:00",
            "date_modified": "2020-12-01T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/11/10/bytebeat",
            "title": "Bytebeat - Overview and How To Make/Record on OSX",
            "summary": "Bytebeat - Overview and How To Make/Record on OSX",
            "content_text": "‚ÄúBytebeat‚Äù is the name given to the method of piping mathematical equations to an audio device make lo-fidelity gritty sounds. They often sound pretty musical due to the mathematical nature of the equations and bitwise operations. But that does not mean that it has to be ‚Äúmusical‚Äù to be good either, as you will discover when messing around with it.For a good dive into what Bytebeat is and how it started, check out these links:  Kragen‚Äôs Writeup  The original post from  Ville-Matias Heikkil√§ and his follow up post  ZSerge‚Äôs article where I first heard about itExamples:  Bytebeat: Experimental music from very short C programs  Bytebeat: Experimental one-line algorithmic music - the 2nd iteration  Bytebeat: Music from very short programs - the 3rd iterationHow To Make Your OwnA fantastic how-to of the basics including the math operations and how to use them can be found in PDF at TuesdayNightMachine‚Äôs Github page. I would highly recommend starting here if you don‚Äôt get binary or bitwise operations.The super simplest way to implement and test (hear) Bytebeat code is through the many online HTML5/JS apps online.  Gregg Tavares  Bemmu and rarefluid (in stereo!)Making It Offline On OSXMy desire when starting to mess with this stuff was trying to figure out how I could do it in the command line, as that was how I had seen it laid out in many examples in Linux. The problem was that the built in tools to pipe data into your audio device was not built in to OSX the way it is built in to Linux, so I had to do some sleuthing. With a lot of help from the Merveilles community, I was able to finally figure out the process and I wanted to document it here.Step 1. Install SoX with homebrewbrew install sox (you can follow this tutorial here if you are confused)Step 2. Create a bash script to automate the build, compile, and piping of your Bytebeat formulas all on the CLI.The way that I did this was pretty much completely stolen from Cole Ingraham‚Äôs post that I dug up on archive.org. Essentially without this, you have to do quite a few very boring and uninteresting steps which means very little instant gratification, which is what we want.Here is the script that I created for using it in bash on OSX:#!/bin/bash# This script creates and plays a simple ByteBeat# ARGS# $1: a string with the ByteBeat algorithm e.g. \"((t * 3) &amp; (t &gt;&gt; 5))\"# $2: the name of the file to be creates (without an extension)#### create the C programecho \"#include &lt;math.h&gt;int s(double num){    return 256*sin(num);};int c(double num){    return 256*cos(num);};main(t){    for(t=0;;t++){        putchar( $1 );    }};\" &gt; \"$2.c\"# compile the sourcegcc \"$2.c\" -o \"$2\"# play it with standard ByteBeat settings./\"$2\" | sox -t u8 -r 8k -c 1 - -dTake this script and copy it into a code editor/text editor, saving it as a file with an .sh extension (I called it bytebeat.sh). Put it in a folder where you can access it easily with the command line in your terminal. There you will be able to make the audio using the arguments written in the script. But before that,Step 3. Turn down your volume!Trust me, it‚Äôs LOUD. Don‚Äôt forget!Step 4. Try it out!Once you have saved that script and you have navigated to the enclosing folder in your terminal, you can make some noises! Your script takes two arguments:  The Bytebeat algorithm/equation  The name of the file that will be gnenerated and played (can be whatever, I usually go with test)For example:./bytebeat.sh \"(t/4)*(t&gt;&gt;8|((14 &amp; t)^3))\" testThis runs the bash script (bytebeat.sh) and uses the Bytebeat algorithm/equation \"(t/4)*(t&gt;&gt;8|((14 &amp; t)^3))\" to generate the compiled C program test. This program test is then piped into sox and plays through the speakers. You‚Äôre done!Record it!There are two ways you can save the audio you‚Äôve created. One is fairly user friendly and the other one is a bit clunky.The easiest way is to download and install Rogue Amoeba‚Äôs Loopback to record your system audio. THis is very simple and highly recommend it.If for whatever reason that doesn‚Äôt work for you, you can create a raw audio file on your computer and use Audacity to open it. This may not output exactly what you heard when playing it using the bash script, but it may yield some cool variations.  Run your script to create the compiled Bytebeat script (give it a proper name instead of test if that‚Äôs easier to find). Within your folder, you should find a file of that name.  Send the output of this newly compiled script to a file instead of piped to SoX. (NOTE: This can create endlessly large files on your computer and possibly eat up all empty memory if you don‚Äôt stop it quickly. To avoid this, cancel (ctrl + C) the process around a half-second to a second after you start it.) To do this, write this in your shell, assuming your newly compiled file is called test and the output file is called output.raw: ./test &gt; output.raw  As said before, you will want to cancel this process very quickly after you start it with ctrl + C, as it can otherwise create a massive file.  Open Audacity. Select File &gt; Import &gt; Raw Data... and choose your newly output file (output.raw in our example). Use the following settings in the dialog box:          Encoding: Unsigned 8-bit PCM      Byte Order: No endianness      Channels: 1 (Mono)      Start Offset: 0      Amount to Import: 100      Sample Rate: 8000        Listen to your hideous creation.Other Resources/Implementations  C and Python: http://royal-paw.com/2012/01/bytebeats-in-c-and-python-generative-symphonies-from-extremely-small-programs/  Python: https://gist.github.com/bzamecnik/a2d45dc0addb8d602d70b1d8df0f9fd0",
            "content_html": "<p>‚ÄúBytebeat‚Äù is the name given to the method of piping mathematical equations to an audio device make lo-fidelity gritty sounds. They often sound pretty musical due to the mathematical nature of the equations and bitwise operations. But that does not mean that it has to be ‚Äúmusical‚Äù to be good either, as you will discover when messing around with it.</p><p>For a good dive into what Bytebeat is and how it started, check out these links:</p><ul>  <li><a href=\"http://canonical.org/~kragen/bytebeat/\">Kragen‚Äôs Writeup</a></li>  <li><a href=\"https://countercomplex.blogspot.com/2011/10/algorithmic-symphonies-from-one-line-of.html\">The original post from  Ville-Matias Heikkil√§</a> and <a href=\"https://countercomplex.blogspot.com/2011/10/some-deep-analysis-of-one-line-music.html\">his follow up post</a></li>  <li><a href=\"https://zserge.com/posts/etude-in-c/\">ZSerge‚Äôs article where I first heard about it</a></li></ul><h3 id=\"examples\">Examples:</h3><ul>  <li><a href=\"https://www.youtube.com/watch?v=GtQdIYUtAHg\">Bytebeat: Experimental music from very short C programs</a></li>  <li><a href=\"https://www.youtube.com/watch?v=qlrs2Vorw2Y\">Bytebeat: Experimental one-line algorithmic music - the 2nd iteration</a></li>  <li><a href=\"https://www.youtube.com/watch?v=tCRPUv8V22o\">Bytebeat: Music from very short programs - the 3rd iteration</a></li></ul><h3 id=\"how-to-make-your-own\">How To Make Your Own</h3><p>A fantastic how-to of the basics including the math operations and how to use them can be found in PDF at <a href=\"https://github.com/TuesdayNightMachines/Bytebeats\">TuesdayNightMachine‚Äôs Github page</a>. I would highly recommend starting here if you don‚Äôt get binary or bitwise operations.</p><p>The super simplest way to implement and test (hear) Bytebeat code is through the many online HTML5/JS apps online.</p><ul>  <li><a href=\"https://greggman.com/downloads/examples/html5bytebeat/html5bytebeat.html#t=0&amp;e=0&amp;s=8000&amp;bb=5d00000100180000000000000000141d0150043e1f062919296ab90380807628655b351388d1ffe7d4a000\">Gregg Tavares</a></li>  <li><a href=\"http://wurstcaptures.untergrund.net/music/\">Bemmu and rarefluid (in stereo!)</a></li></ul><h3 id=\"making-it-offline-on-osx\">Making It Offline On OSX</h3><p>My desire when starting to mess with this stuff was trying to figure out how I could do it in the command line, as that was how I had seen it laid out in many examples in Linux. The problem was that the built in tools to pipe data into your audio device was not built in to OSX the way it is built in to Linux, so I had to do some sleuthing. With <a href=\"https://merveilles.town/web/statuses/105096777143471978\">a lot of help from the Merveilles community</a>, I was able to finally figure out the process and I wanted to document it here.</p><h4 id=\"step-1-install-sox-with-homebrew\">Step 1. Install SoX with homebrew</h4><p><code class=\"highlighter-rouge\">brew install sox</code> (<a href=\"https://chrisrosser.net/posts/2020/04/06/using-sox-on-macos/\">you can follow this tutorial here if you are confused</a>)</p><h4 id=\"step-2-create-a-bash-script-to-automate-the-build-compile-and-piping-of-your-bytebeat-formulas-all-on-the-cli\">Step 2. Create a bash script to automate the build, compile, and piping of your Bytebeat formulas all on the CLI.</h4><p>The way that I did this was pretty much completely stolen from <a href=\"https://web.archive.org/web/20160610140821/http://coleingraham.com/2013/04/28/bytebeat-shell-script/\">Cole Ingraham‚Äôs post</a> that I dug up on archive.org. Essentially without this, you have to do quite a few very boring and uninteresting steps which means very little instant gratification, which is what we want.</p><p>Here is the script that I created for using it in bash on OSX:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#!/bin/bash</span><span class=\"c\"># This script creates and plays a simple ByteBeat</span><span class=\"c\"># ARGS</span><span class=\"c\"># $1: a string with the ByteBeat algorithm e.g. \"((t * 3) &amp; (t &gt;&gt; 5))\"</span><span class=\"c\"># $2: the name of the file to be creates (without an extension)</span><span class=\"c\">###</span><span class=\"c\"># create the C program</span><span class=\"nb\">echo</span> <span class=\"s2\">\"#include &lt;math.h&gt;int s(double num){    return 256*sin(num);};int c(double num){    return 256*cos(num);};main(t){    for(t=0;;t++){        putchar( </span><span class=\"nv\">$1</span><span class=\"s2\"> );    }};\"</span> <span class=\"o\">&gt;</span> <span class=\"s2\">\"</span><span class=\"nv\">$2</span><span class=\"s2\">.c\"</span><span class=\"c\"># compile the source</span>gcc <span class=\"s2\">\"</span><span class=\"nv\">$2</span><span class=\"s2\">.c\"</span> <span class=\"nt\">-o</span> <span class=\"s2\">\"</span><span class=\"nv\">$2</span><span class=\"s2\">\"</span><span class=\"c\"># play it with standard ByteBeat settings</span>./<span class=\"s2\">\"</span><span class=\"nv\">$2</span><span class=\"s2\">\"</span> | sox <span class=\"nt\">-t</span> u8 <span class=\"nt\">-r</span> 8k <span class=\"nt\">-c</span> 1 - <span class=\"nt\">-d</span></code></pre></div></div><p>Take this script and copy it into a code editor/text editor, saving it as a file with an <code class=\"highlighter-rouge\">.sh</code> extension (I called it <code class=\"highlighter-rouge\">bytebeat.sh</code>). Put it in a folder where you can access it easily with the command line in your terminal. There you will be able to make the audio using the arguments written in the script. But before that,</p><h4 id=\"step-3-turn-down-your-volume\">Step 3. Turn down your volume!</h4><p>Trust me, it‚Äôs LOUD. Don‚Äôt forget!</p><h4 id=\"step-4-try-it-out\">Step 4. Try it out!</h4><p>Once you have saved that script and you have navigated to the enclosing folder in your terminal, you can make some noises! Your script takes two arguments:</p><ol>  <li>The Bytebeat algorithm/equation</li>  <li>The name of the file that will be gnenerated and played (can be whatever, I usually go with test)</li></ol><p>For example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./bytebeat.sh \"(t/4)*(t&gt;&gt;8|((14 &amp; t)^3))\" test</code></pre></div></div><p>This runs the bash script (<code class=\"highlighter-rouge\">bytebeat.sh</code>) and uses the Bytebeat algorithm/equation <code class=\"highlighter-rouge\">\"(t/4)*(t&gt;&gt;8|((14 &amp; t)^3))\"</code> to generate the compiled C program <code class=\"highlighter-rouge\">test</code>. This program <code class=\"highlighter-rouge\">test</code> is then piped into sox and plays through the speakers. You‚Äôre done!</p><h3 id=\"record-it\">Record it!</h3><p>There are two ways you can save the audio you‚Äôve created. One is fairly user friendly and the other one is a bit clunky.</p><p>The easiest way is to download and install Rogue Amoeba‚Äôs <a href=\"https://rogueamoeba.com/loopback/\">Loopback</a> to record your system audio. THis is very simple and highly recommend it.</p><p>If for whatever reason that doesn‚Äôt work for you, you can create a raw audio file on your computer and use <a href=\"https://www.audacityteam.org/\">Audacity</a> to open it. This may not output exactly what you heard when playing it using the bash script, but it may yield some cool variations.</p><ol>  <li>Run your script to create the compiled Bytebeat script (give it a proper name instead of <code class=\"highlighter-rouge\">test</code> if that‚Äôs easier to find). Within your folder, you should find a file of that name.</li>  <li>Send the output of this newly compiled script to a file instead of piped to SoX. (NOTE: This can create endlessly large files on your computer and possibly eat up all empty memory if you don‚Äôt stop it quickly. To avoid this, cancel (ctrl + C) the process around a half-second to a second after you start it.) To do this, write this in your shell, assuming your newly compiled file is called <code class=\"highlighter-rouge\">test</code> and the output file is called <code class=\"highlighter-rouge\">output.raw</code>: <code class=\"highlighter-rouge\">./test &gt; output.raw</code></li>  <li>As said before, you will want to cancel this process very quickly after you start it with ctrl + C, as it can otherwise create a massive file.</li>  <li>Open Audacity. Select <code class=\"highlighter-rouge\">File</code> &gt; <code class=\"highlighter-rouge\">Import</code> &gt; <code class=\"highlighter-rouge\">Raw Data...</code> and choose your newly output file (<code class=\"highlighter-rouge\">output.raw</code> in our example). Use the following settings in the dialog box:    <ul>      <li>Encoding: Unsigned 8-bit PCM</li>      <li>Byte Order: No endianness</li>      <li>Channels: 1 (Mono)</li>      <li>Start Offset: 0</li>      <li>Amount to Import: 100</li>      <li>Sample Rate: 8000</li>    </ul>  </li>  <li>Listen to your hideous creation.</li></ol><h3 id=\"other-resourcesimplementations\">Other Resources/Implementations</h3><ul>  <li>C and Python: <a href=\"http://royal-paw.com/2012/01/bytebeats-in-c-and-python-generative-symphonies-from-extremely-small-programs/\">http://royal-paw.com/2012/01/bytebeats-in-c-and-python-generative-symphonies-from-extremely-small-programs/</a></li>  <li>Python: <a href=\"https://gist.github.com/bzamecnik/a2d45dc0addb8d602d70b1d8df0f9fd0\">https://gist.github.com/bzamecnik/a2d45dc0addb8d602d70b1d8df0f9fd0</a></li></ul><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/11/10/bytebeat",
            
            
            
            
            
            "date_published": "2020-11-10T00:00:00+00:00",
            "date_modified": "2020-11-10T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/11/09/the-point-of-diminis",
            "title": "The point of diminishing returns is already here",
            "summary": null,
            "content_text": "The point of diminishing returns is well before we think it is. What is the point of a crazy fast computer when most of what you do is send messages to people and read text? We were able to download and watch videos on our computer 15 years ago and were only limited by internet speed. Now we have it all and we want more for some reason. Is convenience via minimal time saved with a faster piece of hardware worth the money, your time, and the waste it makes?Here is the talk that got me really thinking about this today.",
            "content_html": "<p>The point of diminishing returns is well before we think it is. What is the point of a crazy fast computer when most of what you do is send messages to people and read text? We were able to download and watch videos on our computer 15 years ago and were only limited by internet speed. Now we have it all and we want more for some reason. Is convenience via minimal time saved with a faster piece of hardware worth the money, your time, and the waste it makes?</p><p><a href=\"https://idlewords.com/talks/web_design_first_100_years.htm\">Here is the talk that got me really thinking about this today.</a></p><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/11/09/the-point-of-diminis",
            
            
            
            
            
            "date_published": "2020-11-09T00:00:00+00:00",
            "date_modified": "2020-11-09T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/11/01/koi-koi-rules",
            "title": "Rules for Hanafuda game \"Koi-Koi\"",
            "summary": "Rules for Hanafuda game Koi-Koi: Hanafuda, meaning 'flower cards' is a traditional Japanese card game that dates back to the 1500s.",
            "content_text": "All text pulled from Nintendo‚Äôs PDF online for a much easier to read pageKoi-Koi is a two-player game that is playedwith Hanafuda cards. It requires a sharpmind, strategic thinking, and risk-taking inthe spirit of friendly competition. It is truly aclassic brain training game.Goal:The goal of Koi-Koi is to earn points bymaking sets as fast as you can. Unlikepoker, whoever makes a set first can win agame. A full session is 12 games, and theplayer with the most points after 12 gamesis the winner.Choosing a Dealer:Players will choose one of the cards facedown, and the player who has the earliestmonth card becomes the dealer (alsocalled ‚Äúoya,‚Äù meaning ‚Äúparent‚Äù), who takestheir turn first. Try not to choose the‚Äúparent‚Äù in any other way, as this is theauthentic way of choosing the dealer inKoi-KoiPlaying the GameThe dealer will deal two cards at a time inorder of the player, field, and dealer. Dealeight cards face down for each player, andeight cards face up in the field in-between.Place the remaining deck of cards to theside of the field face downAfter the players look at their cards, thegame will begin with the first player (thedealer) taking one card from their handand placing it face up on the field. If thecard matches the month of any of thecards on the field, the dealer takes the pair.If there are no matching cards on the field,that card will remain on the field face up.The player will then pick a card from thetop of the remaining deck, and again ifthere is a card of a matching month on thefield, the two cards will become a matchingpair. If not, the card will be placed on thefield face up. The player takes thematching pairs, if they have any. andplaces them face up in front of them,ending their turn.Continue to take turns playing until one ofthe players comes up with a set. Tally thepoints scored for that set, and continueplaying with a new game, with the winnerbecoming the dealer. If either player isunable to make a set and their cards runout, the game is a draw and the other playerbecomes the dealer in the next game.The Koi-KoiAfter you make a set you can either end thegame there and earn the points for that oneset, or if you think you can get another, youcan call ‚ÄúKoi-Koi!‚Äù and keep playing to getanother set. Be careful though, because ifyour opponent makes a set after you callKoi-Koi before you make your second set,the other player will double their points, andthe game will end. Koi-Koi can only becalled once per game.MultipliersIf your sets total 7 or more points in a singlegame, you earn a multiplier and get doublepoints! This is where you can win big, sorack those points up!Lucky HandsIf the sets below are already made in yourhand when the cards are first handed out,that player wins these points and the nextgame will begin.Four HandsWhen there are four cards of the samemonth: 6ptsStickyWhen there are four sets of two cardsfram the same month: 6ptsSpecial CardThe Chrysanthemum and Sake Cup card can be usedas a 10 or a 1 point card.The SetsObtaining one of these sets will earn you points and give youthe opportunity to claim victory, or call ‚ÄúKoi-Koi!‚Äù  Kasu (Plains) - 10 Plain cards. 1 point. Each Additional 1P after.  Tanzaku (Ribbons) - 5 Ribbons. 1 point. Each Additional 1P after.  Tane (Animals) - 5 Animals. 1 point. Each Additional 1P after.  Ino-Shika-Cho (Boar-Deer-Butterfly) - Animal cards of Clover, Maple, Peony. 5 points.  Akatan (Red Poetry Ribbons) - All 3 red poetry ribbons. 6 points.  Aotan (Blue Ribbons) - All 3 blue ribbons. 6 points.  Sanko (3Brights) - 3 Bright cards not containing Rain man card. 6 points.  Ame-Shiko (Rain man) - 4Brights containing Rain man card. 8 points.  Shiko (4Brights) - 4 Bright cards not containing Rain man card. 10 points.  Goko (5Brights) - All 5 Bright cards. 15 points.  Tsuki-fuda (Monthly Cards) - All four cards in one group shown right on screen. 4 points.  Oya-Ken (Dealer‚Äôs Privilege) - If neither gets any Yaku, Dealer wins 6 points.  Bake-Fuda (Wild Card) - The animal card of Chrysanthemum (sake cup) can be regarded as a plain card as well. If you have this, 9 plain cards and this card will be the Yaku of Kasu.Suits            Month      Suit/Plant                  January      Pine              February      Plum Blossom              March      Cherry Blossoms              April      Wisteria              May      Iris              June      Peony              July      Clover              August      Pampas              September      Chrysanthemum              October      Maple              November      Willow              December      Paulownia      ",
            "content_html": "<p><em>All text pulled from Nintendo‚Äôs PDF online for a much easier to read page</em></p><p>Koi-Koi is a two-player game that is playedwith Hanafuda cards. It requires a sharpmind, strategic thinking, and risk-taking inthe spirit of friendly competition. It is truly aclassic brain training game.</p><h3 id=\"goal\">Goal:</h3><p>The goal of Koi-Koi is to earn points bymaking sets as fast as you can. Unlikepoker, whoever makes a set first can win agame. A full session is 12 games, and theplayer with the most points after 12 gamesis the winner.</p><h3 id=\"choosing-a-dealer\">Choosing a Dealer:</h3><p>Players will choose one of the cards facedown, and the player who has the earliestmonth card becomes the dealer (alsocalled ‚Äúoya,‚Äù meaning ‚Äúparent‚Äù), who takestheir turn first. Try not to choose the‚Äúparent‚Äù in any other way, as this is theauthentic way of choosing the dealer inKoi-Koi</p><h3 id=\"playing-the-game\">Playing the Game</h3><p>The dealer will deal two cards at a time inorder of the player, field, and dealer. Dealeight cards face down for each player, andeight cards face up in the field in-between.Place the remaining deck of cards to theside of the field face down</p><p>After the players look at their cards, thegame will begin with the first player (thedealer) taking one card from their handand placing it face up on the field. If thecard matches the month of any of thecards on the field, the dealer takes the pair.If there are no matching cards on the field,that card will remain on the field face up.The player will then pick a card from thetop of the remaining deck, and again ifthere is a card of a matching month on thefield, the two cards will become a matchingpair. If not, the card will be placed on thefield face up. The player takes thematching pairs, if they have any. andplaces them face up in front of them,ending their turn.</p><p>Continue to take turns playing until one ofthe players comes up with a set. Tally thepoints scored for that set, and continueplaying with a new game, with the winnerbecoming the dealer. If either player isunable to make a set and their cards runout, the game is a draw and the other playerbecomes the dealer in the next game.</p><h3 id=\"the-koi-koi\">The Koi-Koi</h3><p>After you make a set you can either end thegame there and earn the points for that oneset, or if you think you can get another, youcan call ‚ÄúKoi-Koi!‚Äù and keep playing to getanother set. Be careful though, because ifyour opponent makes a set after you callKoi-Koi before you make your second set,the other player will double their points, andthe game will end. Koi-Koi can only becalled once per game.</p><h4 id=\"multipliers\">Multipliers</h4><p>If your sets total 7 or more points in a singlegame, you earn a multiplier and get doublepoints! This is where you can win big, sorack those points up!</p><h3 id=\"lucky-hands\">Lucky Hands</h3><p>If the sets below are already made in yourhand when the cards are first handed out,that player wins these points and the nextgame will begin.</p><h4 id=\"four-hands\">Four Hands</h4><p>When there are four cards of the samemonth: 6pts</p><h4 id=\"sticky\">Sticky</h4><p>When there are four sets of two cardsfram the same month: 6pts</p><h4 id=\"special-card\">Special Card</h4><p>The Chrysanthemum and Sake Cup card can be usedas a 10 or a 1 point card.</p><h3 id=\"the-sets\">The Sets</h3><p>Obtaining one of these sets will earn you points and give youthe opportunity to claim victory, or call ‚ÄúKoi-Koi!‚Äù</p><ul>  <li>Kasu (Plains) - 10 Plain cards. 1 point. Each Additional 1P after.</li>  <li>Tanzaku (Ribbons) - 5 Ribbons. 1 point. Each Additional 1P after.</li>  <li>Tane (Animals) - 5 Animals. 1 point. Each Additional 1P after.</li>  <li>Ino-Shika-Cho (Boar-Deer-Butterfly) - Animal cards of Clover, Maple, Peony. 5 points.</li>  <li>Akatan (Red Poetry Ribbons) - All 3 red poetry ribbons. 6 points.</li>  <li>Aotan (Blue Ribbons) - All 3 blue ribbons. 6 points.</li>  <li>Sanko (3Brights) - 3 Bright cards not containing Rain man card. 6 points.</li>  <li>Ame-Shiko (Rain man) - 4Brights containing Rain man card. 8 points.</li>  <li>Shiko (4Brights) - 4 Bright cards not containing Rain man card. 10 points.</li>  <li>Goko (5Brights) - All 5 Bright cards. 15 points.</li>  <li>Tsuki-fuda (Monthly Cards) - All four cards in one group shown right on screen. 4 points.</li>  <li>Oya-Ken (Dealer‚Äôs Privilege) - If neither gets any Yaku, Dealer wins 6 points.</li>  <li>Bake-Fuda (Wild Card) - The animal card of Chrysanthemum (sake cup) can be regarded as a plain card as well. If you have this, 9 plain cards and this card will be the Yaku of Kasu.</li></ul><h3 id=\"suits\">Suits</h3><table>  <thead>    <tr>      <th>Month</th>      <th>Suit/Plant</th>    </tr>  </thead>  <tbody>    <tr>      <td>January</td>      <td>Pine</td>    </tr>    <tr>      <td>February</td>      <td>Plum Blossom</td>    </tr>    <tr>      <td>March</td>      <td>Cherry Blossoms</td>    </tr>    <tr>      <td>April</td>      <td>Wisteria</td>    </tr>    <tr>      <td>May</td>      <td>Iris</td>    </tr>    <tr>      <td>June</td>      <td>Peony</td>    </tr>    <tr>      <td>July</td>      <td>Clover</td>    </tr>    <tr>      <td>August</td>      <td>Pampas</td>    </tr>    <tr>      <td>September</td>      <td>Chrysanthemum</td>    </tr>    <tr>      <td>October</td>      <td>Maple</td>    </tr>    <tr>      <td>November</td>      <td>Willow</td>    </tr>    <tr>      <td>December</td>      <td>Paulownia</td>    </tr>  </tbody></table><p><img src=\"http://milofultz.com/assets/fudasuits.png\" alt=\"Suits of Hanafuda\" /></p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/11/01/koi-koi-rules",
            
            
            
            
            
            "date_published": "2020-11-01T00:00:00+00:00",
            "date_modified": "2020-11-01T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/31/tablatal-parser",
            "title": "üìä Tablatal Parser - Plaintext Database to JSON (Python)",
            "summary": "Tablatal is a flat file plaintext database, and this parser made in Python allows you to utilize it with other software.",
            "content_text": "Check out the up-to-date version on GitHubI‚Äôm rethinking my Track and Tod apps for tracking my tasks, mood, and otherdata after checking out Josh Avanier‚Äôs Log,V‚Äôs Log, Devine Lu Linvega‚Äôs Horaire andothers. I am determined to keep my log plaintext and was notsatisfied with options like CSV or TSV, as they look terrible when readingin a plain text editor. I eventually found Devine‚Äôs Tablatal and am lookingforward to using it with my system.From Devine‚Äôs site: ‚ÄúIn the Tablatal file, the first line declares the key, thespacing between each key defines the length of the parameters for allsubsequent lines.‚Äù It is a much more aesthetically pleasing plaintext dataformat, though the tradeoff is malleability, as you must define how largethe field sizes are before getting going (I‚Äôll solve this with some kind ofutility if it ever comes up as a problem).There is both a to- and from-Tablatal utility. Both use a list of dicts astheir starting point, but can also be used directly in the CLI to interfacewith JSON files.Syntax  Comments are preceded by a semicolon.  The header line is expected to be all caps and may be preceded by asemicolon as if a comment. The spacing of this header line sets the spacingfor all content that follows.  The content is everything that follows the header line. Empty fieldsdefault to None.Examples can be found here at neauoire‚Äôs page.UsageAs a CLI, the parser takes in a plaintext Tablatal file (tbtl) andreturns a JSON file. There is one optional argument --headers, whichyou can supply a set of custom headers separated by commas for the parserto use when outputting. For instance, if the beginning of your fileincluding your headers looks like this:; The horaire is a collection of logs.; https://wiki.xxiivv.com/site/tablatal.html;     CODE HOST                 PIC NAME;     7    12                   33  3720X09 +300 talk                     Talk at Speakers Series, SNSYC20X07 +300 talk                     Grundlagen der digitalen Kommunikation20V08 -332 orca...The header line is started by a semicolon, which would obfuscate the parserfrom giving it a useful name. This can be remedied via the CLI:python3 tbtl_parse.py input.tbtl output.json --headers \"DATE, CODE, HOST, PIC, NAME\"The JSON-to-Tablatal parser needs a little user input to determine the order of the fields, but otherwise operates the same as the other utility.",
            "content_html": "<p><a href=\"https://github.com/milofultz/tablatal_parser\"><strong>Check out the up-to-date version on GitHub</strong></a></p><p>I‚Äôm rethinking my Track and Tod apps for tracking my tasks, mood, and otherdata after checking out <a href=\"https://avanier.now.sh/w/log.html\">Josh Avanier‚Äôs Log</a>,<a href=\"https://v-os.ca/timekeeping\">V‚Äôs Log</a>, <a href=\"https://wiki.xxiivv.com/site/horaire.html\">Devine Lu Linvega‚Äôs Horaire</a> andothers. I am determined to keep my log plaintext and was notsatisfied with options like CSV or TSV, as they look terrible when readingin a plain text editor. I eventually found <a href=\"https://wiki.xxiivv.com/site/tablatal.html\">Devine‚Äôs Tablatal</a> and am lookingforward to using it with my system.</p><p>From Devine‚Äôs site: ‚ÄúIn the Tablatal file, the first line declares the key, thespacing between each key defines the length of the parameters for allsubsequent lines.‚Äù It is a much more aesthetically pleasing plaintext dataformat, though the tradeoff is malleability, as you must define how largethe field sizes are before getting going (I‚Äôll solve this with some kind ofutility if it ever comes up as a problem).</p><p>There is both a to- and from-Tablatal utility. Both use a list of dicts astheir starting point, but can also be used directly in the CLI to interfacewith JSON files.</p><h3 id=\"syntax\">Syntax</h3><ul>  <li>Comments are preceded by a semicolon.</li>  <li>The header line is expected to be all caps and may be preceded by asemicolon as if a comment. The spacing of this header line sets the spacingfor all content that follows.</li>  <li>The content is everything that follows the header line. Empty fieldsdefault to None.</li></ul><p>Examples can be found <a href=\"https://github.com/XXIIVV/oscean/tree/master/src/database\">here at neauoire‚Äôs page</a>.</p><h3 id=\"usage\">Usage</h3><p>As a CLI, the parser takes in a plaintext Tablatal file (<code class=\"highlighter-rouge\">tbtl</code>) andreturns a <code class=\"highlighter-rouge\">JSON</code> file. There is one optional argument <code class=\"highlighter-rouge\">--headers</code>, whichyou can supply a set of custom headers separated by commas for the parserto use when outputting. For instance, if the beginning of your fileincluding your headers looks like this:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>; The horaire is a collection of logs.; https://wiki.xxiivv.com/site/tablatal.html;     CODE HOST                 PIC NAME;     7    12                   33  3720X09 +300 talk                     Talk at Speakers Series, SNSYC20X07 +300 talk                     Grundlagen der digitalen Kommunikation20V08 -332 orca...</code></pre></div></div><p>The header line is started by a semicolon, which would obfuscate the parserfrom giving it a useful name. This can be remedied via the CLI:</p><p><code class=\"highlighter-rouge\">python3 tbtl_parse.py input.tbtl output.json --headers \"DATE, CODE, HOST, PIC, NAME\"</code></p><p>The JSON-to-Tablatal parser needs a little user input to determine the order of the fields, but otherwise operates the same as the other utility.</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/31/tablatal-parser",
            
            
            
            
            
            "date_published": "2020-10-31T00:00:00+00:00",
            "date_modified": "2020-10-31T00:00:00+00:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/25/hiitimer",
            "title": "üíª HIITimer - Exercise Timer w/Routines and TTS (Python)",
            "summary": "I made a basic HIIT timer so I wouldn't have to rely on online pages and terrible phone apps. Loads up premade routines and uses TTS for the workout.",
            "content_text": "Check out the up-to-date version on GitHubI made a basic HIIT timer so I wouldn‚Äôt have to rely on online pages and really terrible HIIT phone apps that do too much for me anyway. It‚Äôs thebare minimum:  Say (with TTS) and display the current state of the routine (exercise name, rest, upcoming exercise)  Make your routine on the fly  Load up created plaintext routinesIt doesn‚Äôt do anything else and there is no reason I can find for it to do anything more.Preset RoutinesPreset routines can be loaded into HIITimer with the -f flag followed by the filename:python3 hiitimer.py -f preset1.hiitThere are four fields necessary for a successful routine file:  exercises: - A list of exercises which will comprise one rep. This list is comprised of an exercises: line, followed by an exercise oneach subsequent line.  exercise_time: - How long to spend on one exercise in seconds. This and all the following fields are to be comprised of the key and value onthe same line.  rest_time: - How long to spend resting between exercises in seconds.  reps: - How many cycles of the list of exercises to do in total.The parser overlooks blank lines and lines that begin with #.A sample routine that I created looks like this:# Sample Exercise Routine 1exercises:\tPushups\tSquats\tPlank\tJumping Jacksexercise_time: 30rest_time: 10reps: 4This program and all the TTS has only been tested on OSX, so please letme know if you get any errors, as I‚Äôd love to figure it out :)",
            "content_html": "<p><a href=\"https://github.com/milofultz/hiitimer\"><strong>Check out the up-to-date version on GitHub</strong></a></p><p>I made a basic HIIT timer so I wouldn‚Äôt have to rely on online pages and really terrible HIIT phone apps that do too much for me anyway. It‚Äôs thebare minimum:</p><ul>  <li>Say (with TTS) and display the current state of the routine (exercise name, rest, upcoming exercise)</li>  <li>Make your routine on the fly</li>  <li>Load up created plaintext routines</li></ul><p>It doesn‚Äôt do anything else and there is no reason I can find for it to do anything more.</p><h3 id=\"preset-routines\">Preset Routines</h3><p>Preset routines can be loaded into HIITimer with the <code class=\"highlighter-rouge\">-f</code> flag followed by the filename:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>python3 hiitimer.py -f preset1.hiit</code></pre></div></div><p>There are four fields necessary for a successful routine file:</p><ul>  <li><code class=\"highlighter-rouge\">exercises:</code> - A list of exercises which will comprise one rep. This list is comprised of an <code class=\"highlighter-rouge\">exercises:</code> line, followed by an exercise oneach subsequent line.</li>  <li><code class=\"highlighter-rouge\">exercise_time:</code> - How long to spend on one exercise in seconds. This and all the following fields are to be comprised of the key and value onthe same line.</li>  <li><code class=\"highlighter-rouge\">rest_time:</code> - How long to spend resting between exercises in seconds.</li>  <li><code class=\"highlighter-rouge\">reps:</code> - How many cycles of the list of exercises to do in total.</li></ul><p>The parser overlooks blank lines and lines that begin with <code class=\"highlighter-rouge\">#</code>.</p><p><a href=\"/2020/05/25/exercise-routine\">A sample routine that I created</a> looks like this:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Sample Exercise Routine 1exercises:\tPushups\tSquats\tPlank\tJumping Jacksexercise_time: 30rest_time: 10reps: 4</code></pre></div></div><p><em>This program and all the TTS has only been tested on OSX, so please letme know if you get any errors, as I‚Äôd love to figure it out :)</em></p><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/25/hiitimer",
            
            
            
            
            
            "date_published": "2020-10-25T00:00:00+01:00",
            "date_modified": "2020-10-25T00:00:00+01:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/21/html-css-js",
            "title": "HTML / CSS / JS Resources",
            "summary": "A compilation of various HTML / CSS / JS resources I think are rad, compelling, or helpful.",
            "content_text": "Jonas Schmedtmann‚Äôs Coding Resources - Chock full of good resources and helpful links for all of these.HTML  Learn to Code HTML &amp; CSS  This page is a truly naked, brutalist html quine.CSS  CSS Utility Classes and ‚ÄúSeparation of Concerns‚Äù - Going over the differences between semantic CSS and ‚Äúfunctional‚Äù CSS, where reuse and ease of understanding is paramount.  Learn to Code HTML &amp; CSS - Good overview of the basics of HTML and CSS design (pre-Flex or Grid systems).  Advanced CSS &amp; Sass - Shows best practices in structure, design, implementation, and working through problems, taught by Jonas Schmedtmann.  58 bytes of css to look great nearly everywhere - It‚Äôs like a hyper-minimal version of Skeleton CSS. Does one thing really well, but if that‚Äôs what you need, it‚Äôs perfect.  Web Design in 4 minutesJS  Modern JavaScript From The Beginning",
            "content_html": "<p><a href=\"http://codingheroes.io/resources/\">Jonas Schmedtmann‚Äôs Coding Resources</a> - Chock full of good resources and helpful links for all of these.</p><p><em>HTML</em></p><ul>  <li><a href=\"https://learn.shayhowe.com/html-css/\">Learn to Code HTML &amp; CSS</a></li>  <li><a href=\"https://secretgeek.github.io/html_wysiwyg/html.html\">This page is a truly naked, brutalist html quine.</a></li></ul><p><em>CSS</em></p><ul>  <li><a href=\"https://adamwathan.me/css-utility-classes-and-separation-of-concerns/\">CSS Utility Classes and ‚ÄúSeparation of Concerns‚Äù</a> - Going over the differences between semantic CSS and ‚Äúfunctional‚Äù CSS, where reuse and ease of understanding is paramount.</li>  <li><a href=\"https://learn.shayhowe.com/html-css/\">Learn to Code HTML &amp; CSS</a> - Good overview of the basics of HTML and CSS design (pre-Flex or Grid systems).</li>  <li><a href=\"https://www.udemy.com/course/advanced-css-and-sass/\">Advanced CSS &amp; Sass</a> - Shows best practices in structure, design, implementation, and working through problems, taught by Jonas Schmedtmann.</li>  <li><a href=\"https://jrl.ninja/etc/1/\">58 bytes of css to look great nearly everywhere</a> - It‚Äôs like a hyper-minimal version of <a href=\"http://getskeleton.com/\">Skeleton CSS</a>. Does one thing really well, but if that‚Äôs what you need, it‚Äôs perfect.</li>  <li><a href=\"https://jgthms.com/web-design-in-4-minutes/\">Web Design in 4 minutes</a></li></ul><p><em>JS</em></p><ul>  <li><a href=\"https://www.udemy.com/course/modern-javascript-from-the-beginning/\">Modern JavaScript From The Beginning</a></li></ul><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/21/html-css-js",
            
            
            
            
            
            "date_published": "2020-10-21T00:00:00+01:00",
            "date_modified": "2020-10-21T00:00:00+01:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/17/tod-python",
            "title": "üíª Tod - Plan and Manage Daily Tasks In The CLI (Python)",
            "summary": "Tod helps you plan and manage daily tasks. Deliberately simple so I can stay focused on what I need to do.",
            "content_text": "Check out the up-to-date version on GitHubPlan and manage daily tasks. Deliberately simple so I can stay focused on what I need to do.  Saves tasks in an easy to read plaintext file in the root folder called ~/.tod  Includes built in timer for timeboxing/focused work time  Pulls most recent MIT from Track when starting a new set of daily tasks  Allows pulling of completed tasks for Track‚Äôs accomplishment trackingTasks on screen are shown as below. On the left is the task number, followed by the task name, and lastly the time spent on that task so far, if any. Time spent can be changed manually or can be changed automatically through use of the timer. A green task represents a completed task.",
            "content_html": "<p><a href=\"https://github.com/milofultz/tod\"><strong>Check out the up-to-date version on GitHub</strong></a></p><p>Plan and manage daily tasks. Deliberately simple so I can stay focused on what I need to do.</p><ul>  <li>Saves tasks in an easy to read plaintext file in the root folder called <code class=\"highlighter-rouge\">~/.tod</code></li>  <li>Includes built in timer for timeboxing/focused work time</li>  <li>Pulls most recent MIT from <a href=\"/2020/10/12/track-python\">Track</a> when starting a new set of daily tasks</li>  <li>Allows pulling of completed tasks for <a href=\"/2020/10/12/track-python\">Track‚Äôs</a> accomplishment tracking</li></ul><hr /><p>Tasks on screen are shown as below. On the left is the task number, followed by the task name, and lastly the time spent on that task so far, if any. Time spent can be changed manually or can be changed automatically through use of the timer. A green task represents a completed task.</p><p><img src=\"http://milofultz.com/assets/20201017tod/tod1.png\" /><img src=\"http://milofultz.com/assets/20201017tod/tod2.png\" /></p><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/17/tod-python",
            
            
            
            
            
            "date_published": "2020-10-17T00:00:00+01:00",
            "date_modified": "2020-10-17T00:00:00+01:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/16/friends-dont",
            "title": "Friends don't let friends look at pageviews",
            "summary": null,
            "content_text": "‚ÄúFriends don‚Äôt let friends look at pageviews. Ever.‚Äù - Avinash Kaushik (from Algorithms To Live By)",
            "content_html": "<p>‚ÄúFriends don‚Äôt let friends look at pageviews. Ever.‚Äù - Avinash Kaushik (<em>from Algorithms To Live By</em>)</p><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/16/friends-dont",
            
            
            
            
            
            "date_published": "2020-10-16T00:00:00+01:00",
            "date_modified": "2020-10-16T00:00:00+01:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/12/track-python",
            "title": "üíª Track - Daily Journal and Log (Python)",
            "summary": "Track your accomplishments, mood, most important task, and journal entries over time in a simple CLI Python program.",
            "content_text": "Check out the up-to-date version on GitHubI wanted to have a way to track my mood and accomplishments over time, keep track of my priority for the next day, as well as a basic journaling platform that was not pretentious or leading. Seemed like a good project and I had seen a few people on http://merveilles.town making some fun CLI tools in this vein, so I took a swing at it.Inspo from lon by dstn.  Tracks mood, accomplishments, journal entries, and MIT for next day  Saves data in an easy to read plaintext file in the root folder called ~/.track  Integrates with Tod to pull in completed accomplishments  Allows pulling of MIT into Tod‚Äôs task listUsageOn prompting, input:  Your mood on a 1-5 scale.  Your accomplishments for the day. When finished, leave the line blank and press enter.  Your most important task for the next day.  A 50 character or less summary of your day.  A longer journal entry of anything you feel is relevant.This will save this data into a file named .track in your root folder, formatted like so:---20201011 (4) Spend time on programming, exercise, and work.* Write daily tracker program* Exercise with 1.5hr walk* Brainstorm programming projects* Vote in election&gt; Prepare for next week and resolve all open tasksI walked farther south than I have since moving here, and I really like how quietthe side streets are.Been listening to vogue ball playlists all night.",
            "content_html": "<p><a href=\"https://github.com/milofultz/track\"><strong>Check out the up-to-date version on GitHub</strong></a></p><p>I wanted to have a way to track my mood and accomplishments over time, keep track of my priority for the next day, as well as a basic journaling platform that was not pretentious or leading. Seemed like a good project and I had seen a few people on <a href=\"http://merveilles.town\">http://merveilles.town</a> making some fun CLI tools in this vein, so I took a swing at it.</p><p>Inspo from <a href=\"https://github.com/0xdstn/lon\">lon by dstn</a>.</p><ul>  <li>Tracks mood, accomplishments, journal entries, and MIT for next day</li>  <li>Saves data in an easy to read plaintext file in the root folder called <code class=\"highlighter-rouge\">~/.track</code></li>  <li>Integrates with <a href=\"/2020/10/17/tod-python\">Tod</a> to pull in completed accomplishments</li>  <li>Allows pulling of MIT into <a href=\"/2020/10/17/tod-python\">Tod‚Äôs</a> task list</li></ul><h3 id=\"usage\">Usage</h3><p>On prompting, input:</p><ol>  <li>Your mood on a 1-5 scale.</li>  <li>Your accomplishments for the day. When finished, leave the line blank and press enter.</li>  <li>Your most important task for the next day.</li>  <li>A 50 character or less summary of your day.</li>  <li>A longer journal entry of anything you feel is relevant.</li></ol><p>This will save this data into a file named <code class=\"highlighter-rouge\">.track</code> in your root folder, formatted like so:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>---20201011 (4) Spend time on programming, exercise, and work.* Write daily tracker program* Exercise with 1.5hr walk* Brainstorm programming projects* Vote in election&gt; Prepare for next week and resolve all open tasksI walked farther south than I have since moving here, and I really like how quietthe side streets are.Been listening to vogue ball playlists all night.</code></pre></div></div><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/12/track-python",
            
            
            
            
            
            "date_published": "2020-10-12T00:00:00+01:00",
            "date_modified": "2020-10-12T00:00:00+01:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/12/sleep-realms",
            "title": "üéß Sleep Realms (Paulstretch)",
            "summary": "Amp up your Star Realms game through osmotically absorbing the epic music.",
            "content_text": "Listen hereIf you want to get better at Star Realms, listen to this while you sleep and it will increase your ability to win by 341%.Used Paulstretch that is built in to Audacity.",
            "content_html": "<p><a href=\"https://www.youtube.com/watch?v=ie5z6AsEMQU\"><img src=\"https://i.ytimg.com/vi/ie5z6AsEMQU/hqdefault.jpg\" alt=\"Sleep Realms\" /></a></p><p><a href=\"https://www.youtube.com/watch?v=ie5z6AsEMQU\">Listen here</a></p><p>If you want to get better at Star Realms, listen to this while you sleep and it will increase your ability to win by 341%.</p><p>Used <a href=\"http://hypermammut.sourceforge.net/paulstretch/\">Paulstretch</a> that is built in to <a href=\"https://www.audacityteam.org/\">Audacity</a>.</p><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/12/sleep-realms",
            
            
            
            
            
            "date_published": "2020-10-12T00:00:00+01:00",
            "date_modified": "2020-10-12T00:00:00+01:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        }
    
    ]
}