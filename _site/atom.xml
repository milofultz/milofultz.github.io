<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Milo Fultz</title>
 <link href="http://milofultz.com/atom.xml" rel="self"/>
 <link href="http://milofultz.com/"/>
 <updated>2021-11-29T17:13:30+07:00</updated>
 <id>http://milofultz.com</id>
 <author>
   <name>Milo Fultz</name>
   <email>milopfultz@gmail.com</email>
 </author>

 
 <entry>
   <title>üìä Sorting Algorithms in 6502 Assembly</title>
   <link href="http://milofultz.com/2021/11/14/sorting-in-6502"/>
   <updated>2021-11-14T00:00:00+07:00</updated>
   <id>http://milofultz.com/2021/11/14/sorting-in-6502</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/milofultz/sorting-in-6502&quot;&gt;Check out the project files on GitHub!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This uses &lt;a href=&quot;https://github.com/aeriform-io/minicube64/&quot;&gt;Minicube64&lt;/a&gt; to run, so a lot of this is necessary for that architecture. If you want the meat and potatoes, check out the &lt;code class=&quot;highlighter-rouge&quot;&gt;ENUM&lt;/code&gt;, the variable initialization, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;...Sort&lt;/code&gt; label to see how it all works.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;20211109: Implement Bubble Sort&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;20211113: Optimized slightly by decrementing count every iteration of OuterLoop; Implement Selection Sort and Insertion Sort&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;20211114: Implement Quick Sort&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>I'm in Thailand</title>
   <link href="http://milofultz.com/2021/11/02/thailand"/>
   <updated>2021-11-02T00:00:00+07:00</updated>
   <id>http://milofultz.com/2021/11/02/thailand</id>
   <content type="html">&lt;p&gt;I‚Äôll be in Thailand working with Thornhenge on a software project. This means that I won‚Äôt be able to receive calls or texts like I normally would except for maybe once a month when I turn my phone on and pay the extreme Verizon fees. You can still contact me via email or via &lt;a href=&quot;https://www.signal.org/&quot;&gt;Signal&lt;/a&gt;.&lt;/p&gt;

&lt;!-- --- 

- _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>üß© Discover Your Own Rubik's Cube Algorithms</title>
   <link href="http://milofultz.com/2021/10/22/rubiks-cube-solution"/>
   <updated>2021-10-22T00:00:00+07:00</updated>
   <id>http://milofultz.com/2021/10/22/rubiks-cube-solution</id>
   <content type="html">&lt;p&gt;I have always wanted to solve a &lt;a href=&quot;https://en.wikipedia.org/wiki/Rubik%27s_Cube&quot;&gt;Rubik‚Äôs Cube&lt;/a&gt; but was not really interested in getting the solution handed to me. But solving seemed way too daunting to do all at once when I first encountered the cube as a kid. But since I‚Äôve spent a good amount of time in the interim solving puzzles, doing programming, and understanding algorithms, I figured I would take another shot.&lt;/p&gt;

&lt;p&gt;I‚Äôll be updating this page at the bottom with updates on my progress.&lt;/p&gt;

&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Given the cube and the names of each step, can I discover and document the steps that are necessary to solve the Rubik‚Äôs Cube?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This challenge is a bit too much for me to try and figure it out TOTALLY from scratch, so I‚Äôm bringing in the &lt;em&gt;names&lt;/em&gt; of the steps and the movement descriptors to aid in my documentation and discovery.&lt;/p&gt;

&lt;h3 id=&quot;given-information&quot;&gt;Given Information&lt;/h3&gt;

&lt;h4 id=&quot;steps&quot;&gt;Steps&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;White cross&lt;/li&gt;
  &lt;li&gt;White corners&lt;/li&gt;
  &lt;li&gt;Second layer&lt;/li&gt;
  &lt;li&gt;Yellow cross&lt;/li&gt;
  &lt;li&gt;Yellow edges&lt;/li&gt;
  &lt;li&gt;Yellow corners&lt;/li&gt;
  &lt;li&gt;Orient yellow corners&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;glossary-of-singmaster-notation&quot;&gt;Glossary of Singmaster notation&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Notation&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; (Front)&lt;/td&gt;
      &lt;td&gt;the side currently facing the solver&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; (Back)&lt;/td&gt;
      &lt;td&gt;the side opposite the front&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt; (Up)&lt;/td&gt;
      &lt;td&gt;the side above or on top of the front side&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt; (Down)&lt;/td&gt;
      &lt;td&gt;the side opposite the top, underneath the Cube&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt; (Left)&lt;/td&gt;
      &lt;td&gt;the side directly to the left of the front&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; (Right)&lt;/td&gt;
      &lt;td&gt;the side directly to the right of the front&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; (Middle)&lt;/td&gt;
      &lt;td&gt;the layer between L and R, turn direction as L (top-down)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;E&lt;/code&gt; (Equator)&lt;/td&gt;
      &lt;td&gt;the layer between U and D, turn direction as D (left-right)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; (Standing)&lt;/td&gt;
      &lt;td&gt;the layer between F and B, turn direction as F&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; (axis)&lt;/td&gt;
      &lt;td&gt;rotate the entire Cube on R&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; (axis)&lt;/td&gt;
      &lt;td&gt;rotate the entire Cube on U&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;z&lt;/code&gt; (axis)&lt;/td&gt;
      &lt;td&gt;rotate the entire Cube on F&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Each of these notations means to rotate that segment clockwise respective to their face, with a &lt;code class=&quot;highlighter-rouge&quot;&gt;'&lt;/code&gt; on a step meaning rotate the segment anticlockwise. In both cases, the &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;E&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; layers follow their &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; counterparts.&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt; after a notation means to perform that operation twice in a row.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; (wide) means to include the middle layer on the same axis (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;Fw&lt;/code&gt; includes the front face and the layer behind). For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;M2 Dw' F D'&lt;/code&gt; would mean:
    &lt;ol&gt;
      &lt;li&gt;Rotate the &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; (middle) twice;&lt;/li&gt;
      &lt;li&gt;Rotate the side underneath the cube &lt;em&gt;and&lt;/em&gt; the layer adjacent to it anticlockwise;&lt;/li&gt;
      &lt;li&gt;Rotate the face of the cube clockwise;&lt;/li&gt;
      &lt;li&gt;Rotate the the side underneath the cube anticlockwise.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Piece notation is &lt;code class=&quot;highlighter-rouge&quot;&gt;face/edge/corner&lt;/code&gt;. If &lt;code class=&quot;highlighter-rouge&quot;&gt;edge&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;corner&lt;/code&gt; are omitted, assume they are the center. For example (lets assume &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; means ‚Äúnull‚Äù for these):
    &lt;ul&gt;
      &lt;li&gt;Piece &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; is the center piece of the &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; (front) face (could also be notated as &lt;code class=&quot;highlighter-rouge&quot;&gt;FXX&lt;/code&gt;, as it is not an edge, nor a corner);&lt;/li&gt;
      &lt;li&gt;Piece &lt;code class=&quot;highlighter-rouge&quot;&gt;FU&lt;/code&gt; is the &lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt; edge in the center column on the &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; face (could also be notated as &lt;code class=&quot;highlighter-rouge&quot;&gt;FUX&lt;/code&gt;, as it is not a corner);&lt;/li&gt;
      &lt;li&gt;Piece &lt;code class=&quot;highlighter-rouge&quot;&gt;FUR&lt;/code&gt; is the &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; corner of the &lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt; edge on the &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; face.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;

&lt;h3 id=&quot;1-white-cross&quot;&gt;1. White Cross&lt;/h3&gt;

&lt;p&gt;The white cross step is pretty trivial, as far as I can tell. If there are algorithms, it kind of doesn‚Äôt seem to be super important. The goal is to get all the white squares together to make a cross shape, with the center included, like a &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;. Looking at it straight on should look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.X. // X's being white squares, and
XXX //  dots representing anything
.X. //  other than the white squares.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-white-corners&quot;&gt;2. White Corners&lt;/h3&gt;

&lt;p&gt;First, select a corner/column to focus on. You need to rotate &lt;code class=&quot;highlighter-rouge&quot;&gt;E&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt; layers until you have the white corner &lt;em&gt;somewhere&lt;/em&gt; within the same column. This could mean on the underside of that column or somewhere on the side of that column.&lt;/p&gt;

&lt;p&gt;The algorithm that is simplest but will take the longest is this: &lt;code class=&quot;highlighter-rouge&quot;&gt;R' D R D'&lt;/code&gt;. If this is repeated, eventually that black square will end up on the top of the cube.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There are a few simpler ones that can be deduced from this and I will leave it to the cuber to figure them out. Practice will elucidate these algorithms very clearly!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once this is finished, the cube should have all of the white squares on top of the cube.&lt;/p&gt;

&lt;h3 id=&quot;3-second-layer&quot;&gt;3. Second Layer&lt;/h3&gt;

&lt;p&gt;Assuming the white squares are on top of the cube, you first want to rotate &lt;code class=&quot;highlighter-rouge&quot;&gt;Dw&lt;/code&gt; until you have the &lt;code class=&quot;highlighter-rouge&quot;&gt;FU&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; as the same color. Sometimes, you can end up with more than one set of connected colors on other layers (&lt;code class=&quot;highlighter-rouge&quot;&gt;RU&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LU&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;BU&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;) through successive rotations. Our goal is to have the maximum connections possible.&lt;/p&gt;

&lt;p&gt;Once this is complete, there are two possibilities with two different algorithms.&lt;/p&gt;

&lt;h4 id=&quot;two-adjacent-faces-with-connected-colors&quot;&gt;Two &lt;em&gt;adjacent&lt;/em&gt; faces with connected colors&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Rotate &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; until the two connected color sections are on the &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; layers (i.e. the &lt;code class=&quot;highlighter-rouge&quot;&gt;FU&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;RU&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; pairs will &lt;em&gt;not&lt;/em&gt; be the same. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;FU&lt;/code&gt; would be green and &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; orange, and &lt;code class=&quot;highlighter-rouge&quot;&gt;RU&lt;/code&gt; would be orange and &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; green).&lt;/li&gt;
  &lt;li&gt;Do the following: &lt;code class=&quot;highlighter-rouge&quot;&gt;M D2 M' D M D' M'&lt;/code&gt;. When this is complete, the color that was on &lt;code class=&quot;highlighter-rouge&quot;&gt;FU&lt;/code&gt; should be on &lt;code class=&quot;highlighter-rouge&quot;&gt;UD&lt;/code&gt;, and vice versa.&lt;/li&gt;
  &lt;li&gt;Rotate &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and repeat step 2.&lt;/li&gt;
  &lt;li&gt;Rotate &lt;code class=&quot;highlighter-rouge&quot;&gt;x'&lt;/code&gt; and do the following: &lt;code class=&quot;highlighter-rouge&quot;&gt;M D' M' x M D2 M' x' M D M'&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;two-opposite-faces-with-connected-colors&quot;&gt;Two &lt;em&gt;opposite&lt;/em&gt; faces with connected colors&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Rotate &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; until the two connected color sections are on the &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; layers (i.e. the &lt;code class=&quot;highlighter-rouge&quot;&gt;FU&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UU&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt; pairs will &lt;em&gt;not&lt;/em&gt; be the same. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;FU&lt;/code&gt; would be green and &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt; orange, and &lt;code class=&quot;highlighter-rouge&quot;&gt;UU&lt;/code&gt; would be orange and &lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt; green).&lt;/li&gt;
  &lt;li&gt;Do the following: &lt;code class=&quot;highlighter-rouge&quot;&gt;M2 D2 M'2&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once complete with any of these situations, you should have all four colors connected on the &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; column of the &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; layer of the &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; layers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE: I have not figured out how to get the side pieces of &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;E&lt;/code&gt; aligned yet.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;https://ruwix.com/the-rubiks-cube/notation/advanced/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;20211022: Add instructions for steps 1, 2, and 3.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;20211025: Added piece notation and revised my rotation notation.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>üëæ Moving Rainbow in 6502 Assembly</title>
   <link href="http://milofultz.com/2021/09/18/minicube64"/>
   <updated>2021-09-18T00:00:00+07:00</updated>
   <id>http://milofultz.com/2021/09/18/minicube64</id>
   <content type="html">&lt;p&gt;I‚Äôve been wanting to get into assembly language forever but haven‚Äôt found a way to iterate and test in a satisfying way to makes learning for me really easy. Recently, I saw &lt;a href=&quot;https://merveilles.town/web/accounts/124&quot;&gt;flame from aeriform.io&lt;/a&gt; had developed the &lt;a href=&quot;https://github.com/aeriform-io/minicube64/&quot;&gt;Minicube64&lt;/a&gt;, which is a fantasy console based on the 6502.&lt;/p&gt;

&lt;p&gt;The 6502 is the same chip that was found in early Commodores, the BBC Micro, the NES/Famicom, the Apple ][, and zillions of others. It‚Äôs a simplified amount of assembly instructions, which lends itself to picking it up much more easily and quickly than would be possible with a more expansive set like on modern processors. Perfect.&lt;/p&gt;

&lt;p&gt;After installing &lt;a href=&quot;https://github.com/aeriform-io/minicube64/&quot;&gt;Minicube64&lt;/a&gt;, I did &lt;a href=&quot;http://skilldrick.github.io/easy6502/&quot;&gt;a tutorial&lt;/a&gt;, read a ton of &lt;a href=&quot;http://www.6502.org/tutorials/6502opcodes.html&quot;&gt;reference materials&lt;/a&gt;, and &lt;a href=&quot;https://www.tinybrain.fans/minicube64.html&quot;&gt;took some notes&lt;/a&gt; while going through some of the demo files.&lt;/p&gt;

&lt;p&gt;Not too far after this, I saw that a gamejam for the &lt;a href=&quot;https://github.com/aeriform-io/minicube64/&quot;&gt;Minicube64&lt;/a&gt; was being held at &lt;a href=&quot;https://itch.io/jam/minicubejam&quot;&gt;itch.io&lt;/a&gt; and I set out to have a rainbow render on the screen, and if possible, animate it left to right. This felt like a manageable goal and through a LOT of trial and error, was finally able to get there.&lt;/p&gt;

&lt;p&gt;This is the code üëá&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;include &quot;64cube.inc&quot; 				; Include the helper functions

ENUM $0											; Enumerate values starting at $0000
	initColor rBYTE 1					; set initColor as 1 byte
ENDE												; End enumeration

	org $200									; Set program origin to $0200
	sei												; Set interrupt disable flag

	; Set the stack pointer to be #$ff (low bits of $0100-01ff)
	ldx #$ff									; Load value $ff into X
	txs												; Transfer value of X into the stack
														;   pointer

	; Set the video buffer page in the $f000 page in memory
	lda #$f										; Load high byte of page into A
														;   register
	sta VIDEO									; Store value in A at 'VIDEO'

	; Set the colors buffer page in the $5000 page in memory
	lda #$5										; Load highbyte of page into 'a'
														;   register
	sta COLORS								; Store value in A at 'COLORS'

	_setw IRQ, VBLANK_IRQ			; Set value of VBLANK_IRQ to address of
														;   'IRQ' label

	cli												; Clear interrupt disable flag

Infinite:										; Set 'Infinite' label
	dec initColor							; Decrement initColor
	lda initColor							; Load initColor into A
	and #$3f									; Ensure A never goes above #$3f
	jsr Draw									; Jump to 'Draw' subroutine
	jmp Infinite							; Create infinite loop

IRQ:												; Set 'IRQ' label
	rti												; Return from interrupt

Draw:												; Set 'Draw' label

; This will draw a column of each color from one end of the color spectrum to
;   the other. Eventually, I hope to have this scale from left to right with
;   animation.
;
; A = Address of color within the COLORS page
; X = Col counter (ff-00: ff being the last col of the last row within the
;       four subrows, 00 being the first col of the first row in the subrows
; Y = Row counter (ff-f0: ff being the last four subrows, ff being the first)

	ldx #$0										; Initialize column counter (X)
	ldy #$f										; Initialize row counter (Y)

	Loop:
		lda initColor						; Set accumulator to color value
		SubLoop:								; Create a subloop label
			and #$3f							; Ensure A never goes above #$3f
			sta $f000,X						; Store A in video page plus X for
			sta $f100,X						;   all columns
			sta $f200,X
			sta $f300,X
			sta $f400,X
			sta $f500,X
			sta $f600,X
			sta $f700,X
			sta $f800,X
			sta $f900,X
			sta $fa00,X
			sta $fb00,X
			sta $fc00,X
			sta $fd00,X
			sta $fe00,X
			sta $ff00,X
			sec										; Set carry flag to wrangle SBC
			sbc #1								; Decrement the color value
			dex										; Decrement column counter (X)
			bne SubLoop						; If color value is not zero, go to subloop
		dex											; Decrement col counter (X)
		dey											; Decrement row counter (Y)
		bne Loop								; If Y is not zero, go to Loop
	rts												; Else return from the subroutine

Palette:										; Set 'Palette' label

; This will set the palette of colors available in the COLORS page, enumerating
;   from $00 upward within that page.

	org $0500									; Set program origin to $0500

	hex FF0000								; Set these colors in colors page
	hex FF1500
	hex FF2F00
	hex FF4400
	hex FF5E00
	hex FF7700
	hex FF8C00
	hex FFA600
	hex FFBF00
	hex FFD500
	hex FFEE00
	hex FBFF00
	hex E1FF00
	hex C8FF00
	hex B3FF00
	hex 99FF00
	hex 80FF00
	hex 6AFF00
	hex 51FF00
	hex 3CFF00
	hex 22FF00
	hex 09FF00
	hex 00FF0D
	hex 00FF26
	hex 00FF40
	hex 00FF55
	hex 00FF6E
	hex 00FF84
	hex 00FF9D
	hex 00FFB7
	hex 00FFCC
	hex 00FFE5
	hex 00FFFF
	hex 00EAFF
	hex 00D0FF
	hex 00BBFF
	hex 00A2FF
	hex 0088FF
	hex 0073FF
	hex 0059FF
	hex 0040FF
	hex 002AFF
	hex 0011FF
	hex 0400FF
	hex 1E00FF
	hex 3700FF
	hex 4C00FF
	hex 6600FF
	hex 8000FF
	hex 9500FF
	hex AE00FF
	hex C300FF
	hex DD00FF
	hex F700FF
	hex FF00F2
	hex FF00D9
	hex FF00BF
	hex FF00AA
	hex FF0090
	hex FF007B
	hex FF0062
	hex FF0048
	hex FF0033
	hex FF0019
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I‚Äôve added quite a bit of annotation to this, but will probably dig into it more in depth at a later date. To get it running:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aeriform-io/minicube64/releases&quot;&gt;install Minicube64&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;create a new file called &lt;code class=&quot;highlighter-rouge&quot;&gt;rainbow.s&lt;/code&gt; and put the above contents within it&lt;/li&gt;
  &lt;li&gt;run this in your shell: &lt;code class=&quot;highlighter-rouge&quot;&gt;./minicube ./path/to/rainbow.s&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- --- 

- _202XXXXX: Update format_ --&gt;

</content>
 </entry>
 
 <entry>
   <title>üìÑ Make A Simple Wiki with Markdown</title>
   <link href="http://milofultz.com/2021/07/04/make-a-simple-wiki"/>
   <updated>2021-07-04T00:00:00+07:00</updated>
   <id>http://milofultz.com/2021/07/04/make-a-simple-wiki</id>
   <content type="html">&lt;p&gt;For the last year or so, I‚Äôve been keeping notes about programming and what I‚Äôve been learning about it, which has been super helpful for me. But I‚Äôve also found myself sending out some of these files to people for reference, which is fine but not ideal. I always thought that what would be WAY nicer is to have a wiki online that I could send people to so that they would have a reference now &lt;em&gt;and&lt;/em&gt; for the future, plus then they could reference it for whatever else, as well. My note-taking is essentially my learning process, so why not share it?&lt;/p&gt;

&lt;p&gt;I recently did this for those notes at &lt;a href=&quot;https://www.tinybrain.fans&quot;&gt;https://www.tinybrain.fans&lt;/a&gt;, and will continue using it for any wiki/Zettelkasten material I generate.&lt;/p&gt;

&lt;h2 id=&quot;set-up&quot;&gt;Set Up&lt;/h2&gt;

&lt;p&gt;This setup requires &lt;a href=&quot;https://github.com/milofultz/swiki&quot;&gt;{{SWIKI}}&lt;/a&gt;, a &lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt; repository where you will put your built static site, and optionally, a domain to host it on.&lt;/p&gt;

&lt;h3 id=&quot;swiki&quot;&gt;&lt;a href=&quot;https://github.com/milofultz/swiki&quot;&gt;{{SWIKI}}&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;You will need to use Markdown files with the &lt;a href=&quot;https://jekyllrb.com/docs/front-matter/&quot;&gt;Jekyll-style front matter&lt;/a&gt; for your pages, and to create the necessary files that SWIKI needs to build it (learn more about the features and specifics of &lt;a href=&quot;https://github.com/milofultz/swiki&quot;&gt;{{SWIKI}}&lt;/a&gt; here). After getting those created and placed, you should be able to build your site and output a set of static HTML files.&lt;/p&gt;

&lt;p&gt;Create a new folder where you will keep this built out site. You will want to &lt;a href=&quot;https://kbroman.org/github_tutorial/pages/init.html&quot;&gt;initiate a new Git repository&lt;/a&gt; there and after you build your site in that folder, commit your changes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Github Pages also requires an empty &lt;code class=&quot;highlighter-rouge&quot;&gt;.nojekyll&lt;/code&gt; file be in the root directory if you are creating a static site with no build step like Jekyll. If you don‚Äôt have this in there, it may build but will eventually fail.&lt;/p&gt;

&lt;h3 id=&quot;github-pages&quot;&gt;Github Pages&lt;/h3&gt;

&lt;p&gt;Create a new Github repo which will house your built site and connect it to the Git repo you built in the last step. If you aren‚Äôt using a custom domain, &lt;a href=&quot;https://guides.github.com/features/pages/&quot;&gt;be sure to name this using yourusername.github.io&lt;/a&gt; or you may not be able to host it correctly on the Github Pages URL.&lt;/p&gt;

&lt;p&gt;Go ahead and push up those newly built files to the remote repo. If you don‚Äôt do this first, it won‚Äôt let you set up your Github Pages.&lt;/p&gt;

&lt;p&gt;After completing this, go into this repo‚Äôs settings and open the ‚ÄúPages‚Äù or ‚ÄúGithub Pages‚Äù tab. Set the source to be the root folder,    and you should be able to go to the URL listed to see your new site.&lt;/p&gt;

&lt;h3 id=&quot;custom-domain&quot;&gt;Custom Domain&lt;/h3&gt;

&lt;p&gt;If you end up wanting to use a custom domain for hosting, you will need to put the custom domain‚Äôs URL into the Github Pages settings first. After completing this, go into the DNS settings of your custom domain and change your ‚ÄúCustom resource records‚Äù. You will need to add an ‚ÄúA‚Äù type to point the domain at the Github Pages, using these four IP addresses:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;wait&quot;&gt;WAIT&lt;/h3&gt;

&lt;p&gt;You may not see any updates to your website for the next 48-hours, so give it time. Go for a walk, eat dinner, I dunno.&lt;/p&gt;

&lt;h2 id=&quot;youre-done&quot;&gt;You‚Äôre done!&lt;/h2&gt;

&lt;p&gt;After this, your page should be visible at your chosen domain. To make updates to your wiki, just update your Markdown files, rebuild your site, commit the changes in Git, and push it up. These changes should be visible within about a minute of pushing up.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;20211019: &lt;a href=&quot;https://github.community/t/github-pages-build-failed-although-it-passed-a-few-months-ago/10271&quot;&gt;Add note for required &lt;code class=&quot;highlighter-rouge&quot;&gt;.nojekyll&lt;/code&gt; file to build correctly&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- --- 

- _202XXXXX: Update format_ --&gt;

</content>
 </entry>
 
 <entry>
   <title>üîñ {{SWIKI}} / tinybrain.fans</title>
   <link href="http://milofultz.com/2021/07/03/swiki-tinybrainfans"/>
   <updated>2021-07-03T00:00:00+07:00</updated>
   <id>http://milofultz.com/2021/07/03/swiki-tinybrainfans</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.tinybrain.fans/&quot;&gt;&lt;strong&gt;Check it out here!&lt;/strong&gt;&lt;/a&gt; // &lt;a href=&quot;https://github.com/milofultz/swiki&quot;&gt;Check out  on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;{{SWIKI}} is a flatfile wiki generator using Python. Using some basic configuration and template files, you can build a wiki out of Markdown files and some {{double brackets}}.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Any page that is linked out locally will have the current page backlinked on that page, allowing for easy trawling through related information and finding new stuff.&lt;/li&gt;
  &lt;li&gt;The structure of the web pages is defined by a static ‚Äúframe‚Äù HTML file where the content is injected.&lt;/li&gt;
  &lt;li&gt;Produces a ‚Äúfatfile‚Äù page that contains all of the content of every page, which makes for easy searching of the entire wiki with just &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/milofultz/swiki&quot;&gt;Check it out on GitHub&lt;/a&gt; to learn more about how it works, and go to &lt;a href=&quot;https://www.tinybrain.fans&quot;&gt;https://www.tinybrain.fans&lt;/a&gt; to play around in a working demo.&lt;/p&gt;

&lt;!-- --- 

- _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>üìï Make A Tiny 3x3 Font</title>
   <link href="http://milofultz.com/2021/04/11/tiny-font-3-by-3"/>
   <updated>2021-04-11T00:00:00+07:00</updated>
   <id>http://milofultz.com/2021/04/11/tiny-font-3-by-3</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://milofultz.com/3x3/tinyfont3x3--font.html&quot;&gt;&lt;strong&gt;Check it out here!&lt;/strong&gt;&lt;/a&gt; // &lt;a href=&quot;https://github.com/milofultz/3x3&quot;&gt;Check out the font file on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was inpired by zserge‚Äôs post on &lt;a href=&quot;https://zserge.com/posts/tiny-font/&quot;&gt;making a tiny 2x3 font&lt;/a&gt; and wanted to see if I could make a readable 3x3 font myself. This challenge is exponentialy easier as there is so much more fidelity there, and it gave me a chance to play with Affinity Designer, which I‚Äôd never used before, as well as some basic bit shifting practice.&lt;/p&gt;

&lt;p&gt;The end result is surprisingly readable, and even has punctuation!&lt;/p&gt;

&lt;!-- --- 

- _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>Find and Remove Autocompletes in Sublime Text 3</title>
   <link href="http://milofultz.com/2021/03/06/sublime-keymap"/>
   <updated>2021-03-06T00:00:00+07:00</updated>
   <id>http://milofultz.com/2021/03/06/sublime-keymap</id>
   <content type="html">&lt;p&gt;I just spent forever trying to find a solution for this, so I figure putting it up here will be helpful for me and hopefully for others, too.&lt;/p&gt;

&lt;p&gt;In my case, I have been using Emmet to write HTML and CSS much faster. The issue that first came up was that when typing a colon in CSS, by default Sublime Text will add a semicolon. This doesn‚Äôt allow Emmet to expand correctly, or at best leaves you with an extra semicolon. After getting a hacky fix for this that didn‚Äôt fix the same problem in a Sass package, I had to actually figure out how to solve the root issue.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/59635627/how-to-override-sublime-text-3-packages-css3-completion-syntax&quot;&gt;OdatNurd on StackOverflow&lt;/a&gt; provided a fantastic walkthrough to a similar problem and left me with the tools to actually diagnose and solve the problem. You can use this to find out &lt;em&gt;what&lt;/em&gt; is happening and in &lt;em&gt;what&lt;/em&gt; part of the program, not just flailing and hoping you fix something.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open the console (&lt;code class=&quot;highlighter-rouge&quot;&gt;View &amp;gt; Show Console&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl + `&lt;/code&gt; on OSX).&lt;/li&gt;
  &lt;li&gt;In the console, enter in &lt;code class=&quot;highlighter-rouge&quot;&gt;sublime.log_commands(True)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Do what you need to recreate the issue. Immediately after triggering the unwanted behavior, document what you think is causing it that is in the console. In my case it was &lt;code class=&quot;highlighter-rouge&quot;&gt;command: insert_snippet {&quot;contents&quot;: &quot;:$0;&quot;}&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Depending on which syntax you are in, or which plugin is listed/suspected, use the command palette to &lt;code class=&quot;highlighter-rouge&quot;&gt;View Package File&lt;/code&gt; and type in the syntax/plugin. This will show files that are hidden, as well, which makes diagnosing issues with default plugins/syntaxes much easier.&lt;/li&gt;
  &lt;li&gt;Once you find a possible file, open it. &lt;code class=&quot;highlighter-rouge&quot;&gt;Save As&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Packages&lt;/code&gt; directory under a new folder called the name of the plugin or syntax. e.g. for the Sass plugin/syntax, I created a folder in &lt;code class=&quot;highlighter-rouge&quot;&gt;Packages&lt;/code&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;Sass&lt;/code&gt; and saved a copy of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Default.sublime-keymap&lt;/code&gt; file there, which included my additions. &lt;a href=&quot;https://www.sublimetext.com/docs/3/packages.html&quot;&gt;You can find more on overriding packages here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;In my case, I copied the old rule over and changed the &lt;code class=&quot;highlighter-rouge&quot;&gt;{&quot;contents&quot;: &quot;:$0;&quot;}&lt;/code&gt; object to &lt;code class=&quot;highlighter-rouge&quot;&gt;{&quot;contents&quot;: &quot;:$0&quot;}&lt;/code&gt;, which allowed the colon to be typed without adding any additional characters.&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- --- 

- _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>üêç SNAKEHACK - snake with constantly changing controls</title>
   <link href="http://milofultz.com/2021/01/28/snake-js"/>
   <updated>2021-01-28T00:00:00+07:00</updated>
   <id>http://milofultz.com/2021/01/28/snake-js</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.milofultz.com/snake_js&quot;&gt;&lt;strong&gt;Try it out here!&lt;/strong&gt;&lt;/a&gt; // &lt;a href=&quot;https://github.com/milofultz/snake_js&quot;&gt;&lt;strong&gt;Check out the up-to-date version on GitHub&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I just got started on this, but the goal is to make a snake game with more or less arbitrary rules that change as you play. Part Warioware, part snake, whatever.&lt;/p&gt;

&lt;p&gt;Mainly making this as a way to practice basic website construction, HTML5 canvas drawing, and fun.&lt;/p&gt;

&lt;!-- --- 

- _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>Apps, Software, and More That I Use Everyday</title>
   <link href="http://milofultz.com/2021/01/08/apps"/>
   <updated>2021-01-08T00:00:00+07:00</updated>
   <id>http://milofultz.com/2021/01/08/apps</id>
   <content type="html">&lt;h3 id=&quot;programs&quot;&gt;Programs&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://trankynam.com/atext/&quot;&gt;aText&lt;/a&gt;: This is the text and snippet expander that I moved to after using TextExpander for years. It‚Äôs only $5 instead of a $36/year subscription and essentially the same program but with more features available, most notably automated keystrokes. I use it most often in my copywriting for podcasts, emails, and projects with a lot of repetition, but it‚Äôs also super useful in generating timestamps, datestamps, and ensuring you won‚Äôt write important info down wrong. Much more fun to use than the built-in OSX feature.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://derlien.com/&quot;&gt;DiskInventoryX&lt;/a&gt;: A small utility application for macOS that graphically shows the disk usage within a file system. I use this to monitor unruly client Dropbox folders as well as runaway audio/video projects.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Mortennn/Dozer&quot;&gt;Dozer&lt;/a&gt;: Free and open source app to hide menu bar icons to give your Mac a cleaner look. Helps me not get distracted by unimportant stuff.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://easyresapp.com/&quot;&gt;EasyRes&lt;/a&gt;: Menubar app that allows you to switch screen resolutions quickly and easily. Most useful when using multiple monitors or external keyboard/mouse configs that put the laptop farther away from your eyes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://justgetflux.com/&quot;&gt;f.lux&lt;/a&gt;: Warms your screen color at sundown until sunup so it doesn‚Äôt destroy your eyes in the dark. Just essential and makes using a computer without it almost unbearable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/TermiT/Flycut&quot;&gt;Flycut&lt;/a&gt;: Simple and straightforward clipboard manager. No bullshit, just works.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.noodlesoft.com/&quot;&gt;Hazel&lt;/a&gt;: Allows you to conditionally automate and script file handling. I personally use it for cleaning up screenshots, moving things out of my downloads into another folder, backing up old files, and managing my trash usage. Powerusers have made it do &lt;a href=&quot;https://www.asianefficiency.com/technology/hazel-intro/&quot;&gt;much cooler things&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://iterm2.com/&quot;&gt;iTerm2&lt;/a&gt;: Terminal that allows multiple tabs, styling, font choice, etc. Just better than OSX built in.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://karabiner-elements.pqrs.org/&quot;&gt;Karabiner-Elements&lt;/a&gt;: A powerful and stable keyboard customizer for macOS. I use this to map capslock to escape, the bottom right alt button to insert, for some of those old DOS programs, and flip the F-row buttons from having to use &lt;code class=&quot;highlighter-rouge&quot;&gt;fn&lt;/code&gt; every time I want to press any actual F key.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nativefier/nativefier&quot;&gt;Nativefier&lt;/a&gt;: A way to make web applications ‚Äúnative‚Äù with Electron. I‚Äôm not a big Electron guy, as the apps I use that utilize it are bloated as all hell (Slack, VS Code, etc.), but it does the thing to help compartmentalize app spaces. A spiritual successor to &lt;a href=&quot;https://www.fluidapp.com/developer/&quot;&gt;fluid&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.1password.com/&quot;&gt;1Password&lt;/a&gt;/&lt;a href=&quot;https://keepass.info/index.html&quot;&gt;Keepass (Free)&lt;/a&gt;: &lt;del&gt;I use Lastpass&lt;/del&gt; (I used to use Lastpass, but their free model will only work on a single device at a time, making it useless if you use a phone and computer with it), but &lt;a href=&quot;https://www.tomsguide.com/us/password-manager-pros-cons,news-19018.html&quot;&gt;use ANY password manager&lt;/a&gt;, please please please.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ocenaudio.com/en/&quot;&gt;OcenAudio&lt;/a&gt;: If Audacity was actually pleasant to use. Not &lt;em&gt;as&lt;/em&gt; powerful, but for 99% of what I do, it is much better for audio editing/manipulation in every way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/pycharm/&quot;&gt;PyCharm&lt;/a&gt;: A much nicer environment to write Python in. Preferred over VSCodium for the built-in Python specific console and debugger.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://marco.org/apps&quot;&gt;Quitter&lt;/a&gt;: One of my most useful apps. Quits an app based on minutes of inactivity. Super useful for very distracting and/or power-hungry apps like Messages, Slack, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.reaper.fm/&quot;&gt;Reaper&lt;/a&gt;: I used to use this for all my podcast editing because of the ability to make super useful keyboard shortcuts and Lua scripts along with the varispeed that can go over 2x speed (looking at you, Logic).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rectangleapp.com/&quot;&gt;Rectangle&lt;/a&gt; / &lt;a href=&quot;https://github.com/fikovnik/ShiftIt&quot;&gt;ShiftIt&lt;/a&gt;: Window manager that uses keyboard shortcuts. Super easy to arrange windows into quandrants, screen halves/thirds, etc., or move windows over to other screens. Just overall very useful for smaller single-monitor or large multi-monitor setups.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;SublimeText&lt;/a&gt; &lt;a href=&quot;https://www.tinybrain.fans/sublime-text.html&quot;&gt;[wiki]&lt;/a&gt;: This is my coding scratchpad as well as my daily task manager using &lt;a href=&quot;https://github.com/aziz/PlainTasks&quot;&gt;PlainTasks&lt;/a&gt;. Not as full featured towards any given language as PyCharm or as huge as VSCodium, but fantastic, fast, and a pleasure to use. Packages I use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://emmet.io/blog/sublime-text-3/&quot;&gt;Emmet&lt;/a&gt;: If you do any HTML/CSS/JS, get Emmet.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://packagecontrol.io/packages/HTML-CSS-JS%20Prettify&quot;&gt;HTML-CSS-JS Prettify&lt;/a&gt;: Auto-formats different web files for easy editing/analysis a la &lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://monokai.pro/&quot;&gt;Monokai Pro&lt;/a&gt;: Beautiful theme that just feels nice. Definitely a splurge on my part, as it does cost $10 which is $10 more than most themes, but I just like it a lot.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aziz/PlainTasks&quot;&gt;PlainTasks&lt;/a&gt;: Great todo app. I use it for all my workflows and SOP‚Äôs since it is not proprietary and is saved as plaintext so anyone can read it.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://packagecontrol.io/packages/RainbowBrackets&quot;&gt;RainbowBrackets&lt;/a&gt;: Shows your matching brackets at a glance. Makes debugging missed brackets simple.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://packagecontrol.io/packages/Sync%20Settings&quot;&gt;Sync Settings&lt;/a&gt;: Helps sync settings across multiple computers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://typora.io/&quot;&gt;Typora&lt;/a&gt;: Super simple and pretty markdown editor I use all of the time for my blog posts, code diary, note taking, and any other markdown-related stuff. Interchangeable CSS themes make it really easy to customize, too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://vscodium.com/&quot;&gt;VSCodium&lt;/a&gt;: An open source version of Microsoft‚Äôs VSCode, meaning it had none of the bloat that MS adds like tracking, telemetry, etc. Extensions I use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://open-vsx.org/extension/CoenraadS/bracket-pair-colorizer-2&quot;&gt;Bracket Pair Colorizer 2&lt;/a&gt;: Same as RainbowBrackets above.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/KamiKillertO/vscode-colorize/&quot;&gt;Colorize&lt;/a&gt;: Shows what colors are in your CSS/Sass when using any color method including variables.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://eslint.org/&quot;&gt;ESLint&lt;/a&gt;: Javascript linter.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://open-vsx.org/vscode/item?itemName=oderwat.indent-rainbow&quot;&gt;Indent-Rainbow&lt;/a&gt;: Like bracket colorizers, this gives your indentation a coloring so you can understand indentation more at a glance.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://monokai.pro/&quot;&gt;Monokai Pro&lt;/a&gt;: Same as above.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier&lt;/a&gt;: Helpful for keeping your code matching code style standards. Auto-formats your code according to user-set rules.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;fonts&quot;&gt;Fonts&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://brailleinstitute.org/freefont&quot;&gt;Atkinson Hyperlegible Font&lt;/a&gt;: I use this as my default font for sans-serif on my browser so I can set the default font size much smaller and still be readable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tonsky/FiraCode&quot;&gt;Fira Code&lt;/a&gt;: I use this in every piece of software that I need monospace fonts. Has ligatures which makes things more readable and easier to understand, as well as dynamic adjustment of heights to match nearby letters. A bunch of things that added together just look really nice.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;20210206: Added f.lux and Lastpass, SublimeText and VSCodium extensions to programs, Atkinson Hyperlegible to fonts&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;20210403: Removed Lastpass and added 1Password, HTML-CSS-JS Prettify, Sync Settings&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;20211027: Add Flycut, Hazel, Nativefier, revise various elements&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;20211129: Replaced Grand Perspective with DiskInventoryX&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- --- 

- _202XXXXX: Update format_ --&gt;

</content>
 </entry>
 
 <entry>
   <title>üåå Reverse Horoscope - Find Out Your Real Birthday (JS)</title>
   <link href="http://milofultz.com/2021/01/06/reverse-horoscope"/>
   <updated>2021-01-06T00:00:00+07:00</updated>
   <id>http://milofultz.com/2021/01/06/reverse-horoscope</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.milofultz.com/reverse-horoscope&quot;&gt;&lt;strong&gt;Try it out here!&lt;/strong&gt;&lt;/a&gt; // &lt;a href=&quot;https://github.com/milofultz/reverse_horoscope&quot;&gt;Check out the project files on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you ever thought that your zodiac sign didn‚Äôt &lt;em&gt;truly&lt;/em&gt; represent you, this is for you. Take this quiz to find out what your real birthday should be based on these twelve questions!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;When beginning the quiz, the questions are pulled from the list of horoscopes and then populate the question elements. These are then loaded one by one via jQuery before submitting the final question.&lt;/p&gt;

&lt;p&gt;Once the questions are submitted, the winning sign is decided and the birthday is created from these results. By knowing the midpoint of each sign, the birthday date is chosen through calculating the adjusted midpoint based on the scores of the adjacent signs.&lt;/p&gt;

&lt;p&gt;Uses &lt;a href=&quot;https://chartscss.org/&quot;&gt;Charts.css&lt;/a&gt; for the bar graph at the end and &lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery&lt;/a&gt; for animation and DOM population.&lt;/p&gt;

&lt;!-- --- 

- _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>üìï Algorithms To Live By - Book Notes</title>
   <link href="http://milofultz.com/2020/12/27/atlb-notes"/>
   <updated>2020-12-27T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/12/27/atlb-notes</id>
   <content type="html">&lt;p&gt;These are notes from the book &lt;a href=&quot;https://openlibrary.org/works/OL17357767W/Algorithms_to_Live_By&quot;&gt;&lt;em&gt;Algorithms To Live By&lt;/em&gt; by Brian Christian and Tom Griffiths&lt;/a&gt;. These are all just my paraphrasings and may not be 100% accurate, but I tried to transcribe what I thought were the most salient points and put them up. All unattributed quotes are merely citations from the book.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;exploreexploit-aka-whats-newwhats-best&quot;&gt;Explore/Exploit: AKA What‚Äôs New/What‚Äôs Best&lt;/h2&gt;

&lt;h3 id=&quot;interval&quot;&gt;Interval&lt;/h3&gt;

&lt;p&gt;The length of an interval and where you are within it defines whether one should be in a mode of explore or exploit. At the beginning of an interval, one has time and necessity to explore and the highest return on investment of time. At the end, the ROI are almost none to exploring and therefore exploit becomes much more valuable.&lt;/p&gt;

&lt;h3 id=&quot;ab-tests&quot;&gt;A/B Tests&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;A/B tests are when multiple presentations or implementations are used until the best option is decided upon; then the process repeats with the winner and another option.&lt;/li&gt;
  &lt;li&gt;In A/B testing, the user is the product. The user is being used to gain something that can‚Äôt otherwise be gained. This is why online services can be free, is that the providers are getting valuable data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;zelens-algorithm&quot;&gt;Zelen‚Äôs Algorithm&lt;/h3&gt;

&lt;p&gt;Zelen‚Äôs algorithm is a variant of the A/B test that increases the likelihood of the most successful choice and minimizes the likelihood of the other. It is one way to better quantify the A/B test.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There are two choices or tests (A and B). These are chosen at random as if balls in a hat.&lt;/li&gt;
  &lt;li&gt;When one of the random choices or tests succeeds, the successful choice or test is increased in probability, as in adding another of those balls to the hat. If the choice is a failure, the other choice is increased in probability, as in adding another of those balls to the hat.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;regret-and-optimism&quot;&gt;Regret and Optimism&lt;/h3&gt;

&lt;p&gt;Your amount of regret will always increase, even if you chose the best choice. If you choose the best choice, it may increase more slowly or slow down, but it is still there. The minimum possible regret increases &lt;strong&gt;logarithmically&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the long run, optimism is the best prevention for regret.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Upper Confidence Bounds are the highest payout that an option could possibly have, based on the knowledge we have.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The UCB is always higher than the expected value but by less and less as we get more experience with a particular option.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Explore&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Exploit&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Necessary at the beginning&lt;/td&gt;
      &lt;td&gt;Impossible without explore&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Only explore means no ability to connect or grow with discoveries&lt;/td&gt;
      &lt;td&gt;Only exploit means no more potential bests; can‚Äôt find any new&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Exploring determines there is not a clear end in sight&lt;/td&gt;
      &lt;td&gt;Exploiting signals an end of the interval&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Children are almost exclusively here&lt;/td&gt;
      &lt;td&gt;Adults are almost exclusively here&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;optimal-stopping---knowing-when-to-move-on&quot;&gt;Optimal Stopping - Knowing When To Move On&lt;/h2&gt;

&lt;p&gt;Optimal stopping is a way to know when to cut losses and move on. Don‚Äôt waste potential opportunities or resources on irrational ideas or scenarios.&lt;/p&gt;

&lt;h3 id=&quot;no-information-scenarios&quot;&gt;No Information Scenarios&lt;/h3&gt;

&lt;p&gt;This applies only in ‚Äúno information‚Äù games, where no information is provided on the data that is being looked through: the number of things, the things to come, the total population, etc. In this situation, you can only compare the elements to one another and not to a standard or metric.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Look then leap: set a predetermined time to gather data and don‚Äôt choose anything. After that, be willing to commit to anything that is better than what you saw before.&lt;/li&gt;
  &lt;li&gt;37%: A variant of Look then leap, the 37% rule is a rule derived from the idea of optimal stopping. 37% into a search, one should be prepared to pounce on the first thing they find that is better than what they saw before. First 37% is only looking and gathering data. Used in house searches, hiring, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;second-chance-scenarios&quot;&gt;Second Chance Scenarios&lt;/h3&gt;

&lt;p&gt;In second chance scenarios, being restless and having doubt is important. Since you never know if you have the best **and **you have a second chance, this is important in getting the best.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To live in a restless word requires a certain restlessness in oneself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;full-information-scenarios&quot;&gt;Full Information Scenarios&lt;/h3&gt;

&lt;p&gt;This is when you are using knowable and measurable things as a criteria or a standard with no second chances.
The problem of when to sell an item is a full information problem. In this case, the cost of holding an item is the equivalent of a cost of running out of elements to search through. In both cases, the longer you wait, the less chance you have of turning a profit (or in the latter, the less chance of choosing an ideal element). The cost of holding goes up, be willing to accept less sooner, and vice versa.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;threshold&lt;/strong&gt; rule is used to pick somebody based upon their rating within the group after X amount of elements have passed by. If an element at X position within Y total elements has a rating above Z percentile, then you should choose them and look at any following elements. Or, choose element if over Z percentile and Y elements are left.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;sorting---reducing-future-search-time&quot;&gt;Sorting - Reducing Future Search Time&lt;/h2&gt;

&lt;p&gt;Sorting is &lt;strong&gt;only&lt;/strong&gt; important in reducing future search time. As the cost of searching drops, the value of sorting goes down, and similarly, as the amount of elements to sort goes up, the speed in which it is done goes down.&lt;/p&gt;

&lt;p&gt;Instead of sorting by comparing elements to each other, a more efficient way to sort is by comparing to an external standard or measure. This is called a ‚Äúcardinal number‚Äù instead of an ‚Äúordinal number‚Äù. A benchmark like this allows sorting without time intensive systems. Overall it may be incorrect, but it‚Äôs good enough , saves time and potential problems, and is therefore acceptable. (Example: The ‚Äúlaw of gross tonnage‚Äù states that smaller yields to bigger. This may not always be true, but it is true a large amount of the time and will yield less expended less resources for a high accuracy.)&lt;/p&gt;

&lt;h3 id=&quot;algorithms&quot;&gt;Algorithms&lt;/h3&gt;

&lt;h4 id=&quot;big-o&quot;&gt;Big O&lt;/h4&gt;

&lt;p&gt;Big O notation is about hard guarantees and deadlines.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Notation&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Analogy&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;Constant&lt;/td&gt;
      &lt;td&gt;Cleaning the house before a party&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
      &lt;td&gt;Linear&lt;/td&gt;
      &lt;td&gt;Giving drinks to every guest&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(n log n)&lt;/td&gt;
      &lt;td&gt;Linearithmic&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(n^2)&lt;/td&gt;
      &lt;td&gt;Quadratic&lt;/td&gt;
      &lt;td&gt;Every person meeting every person&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(2^n)&lt;/td&gt;
      &lt;td&gt;Exponential&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O(n!)&lt;/td&gt;
      &lt;td&gt;Factorial&lt;/td&gt;
      &lt;td&gt;Must organize everyone in every possible permutation&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The fastest way to sort a list can‚Äôt be less than O(n) because you have to check all of the elements and that is at least the length of the list itself.&lt;/p&gt;

&lt;p&gt;More efficient algorithms can sacrifice accuracy for speed. For instance, errors in Mergesort can compound quickly, when simpler sorts like Bubblesort are much safer.&lt;/p&gt;

&lt;h4 id=&quot;quadratic-sorts&quot;&gt;Quadratic Sorts&lt;/h4&gt;

&lt;h5 id=&quot;bubble-sort&quot;&gt;Bubble Sort&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Start at the beginning&lt;/li&gt;
  &lt;li&gt;Test each element against the next one&lt;/li&gt;
  &lt;li&gt;If A &amp;gt; B, swap A and B&lt;/li&gt;
  &lt;li&gt;Continue to the end of the elements&lt;/li&gt;
  &lt;li&gt;Repeat the above steps until all elements are sorted&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;insertion-sort&quot;&gt;Insertion Sort&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Start at the beginning&lt;/li&gt;
  &lt;li&gt;Copy each element into a new array&lt;/li&gt;
  &lt;li&gt;Put the copied element in order in the new array&lt;/li&gt;
  &lt;li&gt;Repeat the above steps until all elements have been copied into the new array&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;linearithmic-sort&quot;&gt;Linearithmic Sort&lt;/h4&gt;

&lt;h5 id=&quot;mergesort&quot;&gt;Mergesort&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Start at the beginning of the array and take every two elements out as a pair&lt;/li&gt;
  &lt;li&gt;Compare each pair of elements and put them in order (element 1 and element 2, element 3 and element 4, etc.)&lt;/li&gt;
  &lt;li&gt;Now pair each group up with another group&lt;/li&gt;
  &lt;li&gt;Compare each pair of elements across groups and place them in order&lt;/li&gt;
  &lt;li&gt;Repeat this process until all groups have become one group&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;caching---minimize-searching-maximize-use&quot;&gt;Caching - Minimize Searching, Maximize Use&lt;/h2&gt;

&lt;p&gt;The goal of a cache management system is to minimize the amount of times you need to search your ‚Äúbase‚Äù and maximize the times you find what you need in your ‚Äúcache‚Äù. Memory hierarchies are like a pyramid: the base in largest and accessed the least; the highest is accessed the most and is the smallest. For example, a library is the base and your checked out books are at the top.&lt;/p&gt;

&lt;p&gt;The alogirthms with which information in the cache is replaced by new information is similar to many algorithms and heuristics used in minimalism and getting rid of stuff (how long have I had it? when did I use it last?).&lt;/p&gt;

&lt;h3 id=&quot;least-recently-used&quot;&gt;Least Recently Used&lt;/h3&gt;

&lt;p&gt;The Least Recently Used (LRU) algorithm is where you make LRU data more accessible, either via distance, ease, speed, location, etc. LRU is effective because of ‚ÄúTemporal Locality‚Äù: if it is in cache, it will probably be used again. Self organizing lists use LRU:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Put documents in a pile&lt;/li&gt;
  &lt;li&gt;When a document is recalled, put it on top when finished.&lt;/li&gt;
  &lt;li&gt;End result: least recently used is at the bottom (long term storage), most recently used at the top (cache)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The nearest thing to clairvoyance is to assume that history will repeat itself backwards.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our human memory is not limited but the time spent searching is. It is a library with one infinitely long bookshelf. Using LRU, the most popular things come to the front/top of mind, and vice versa. The aging mind getting slower is not due to lack of agility or speed. It is due to abundance of information and difficulty in successfully caching.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;scheduling---focus-not-on-getting-things-done-but-getting-weighty-things-done&quot;&gt;Scheduling - Focus not on getting things done, but getting ‚Äúweighty‚Äù things done&lt;/h2&gt;

&lt;p&gt;How you tackle your todo list is based on your goal. If your goal is to &lt;strong&gt;minimize time to total completion&lt;/strong&gt;, do what has the shortest completion time first. THis makes each person waiting for their deliverables with the shortest amount of time. This also reduces total tasks on the todo list quickest. If your goal is to &lt;strong&gt;minimize oppressiveness/weight of tasks&lt;/strong&gt;, divide the oppressiveness/weight of each task by the estimated completion time, and then do the tasks with the highest unit of weight per unit of time.&lt;/p&gt;

&lt;p&gt;The oppressiveness/weight metric needs an importance or price as a scale. The example below you could think of the weight metric as importance or dollars per hour to illustrate. Example (using a 1-10 scale of weight/oppressiveness with higher numbers being more oppressive, and an hour scale for time):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Task 1:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Weight: 1 (low)&lt;/li&gt;
      &lt;li&gt;Time: 8&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Result: 1/8&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Task 2:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Weight: 10 (high)&lt;/li&gt;
      &lt;li&gt;Time: 1&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Result: 10/1&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Comparison&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Task 1 vs. Task 2 == 1/8 : 10/1 == Task 1 (1/8) is less important to do now than Task 2 (10/1).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the context of debt reduction, stemming from these two algorithms are two different schools of thought:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Debt Snowball&lt;/strong&gt;: focus is on removing the sources of the smallest balances first (using the ‚Äúminimize time to total completion‚Äù algorithm above).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Debt Avalanche:&lt;/strong&gt; focus on removing the sources with the highest interest rates first (using the ‚Äúminimize oppressiveness/weight of tasks‚Äù algorithm above)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;anti-patterns&quot;&gt;Anti-Patterns&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Preemption&lt;/strong&gt; is the ability to stop mid-task and start another. Using previous algorithms, preemption allows flexibility with tasks that can‚Äôt be started until a certain time or requisite is met. If receiving a new task in the middle of another one, comparing them using a weighted SPT ratio of weight/time is the best option.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Context switching&lt;/strong&gt; is work that is done in switching tasks to ensure that new task can be done, also known as &lt;strong&gt;meta-work&lt;/strong&gt;. The cost of context switching is throughput. More responsiveness (more context switching with a lower threshold of rejection) leads to less throughput overall Lower responsiveness (less context switching with a higher threshold of rejection) leads to higher throughput overall.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thrashing&lt;/strong&gt; is when this meta-work is taking up all of your time and no actual work can be done. If one finds themselves in a thrashing state, the best thing to do at that point is to do whatever tasks in whatever order to open up more resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Priority inversion&lt;/strong&gt; is where a lower level task is blocking a higher level task.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pre-crastination&lt;/strong&gt; is when you choose smaller subtasks over a major task, with the goal being to lessen the total load of tasks. Pre-crastinators act with the wrong metric in mind: when a major task is difficult to manage, they try to lessen this difficulty by going for the ‚Äúminimize time to total completion‚Äù algorithm instead of the ‚Äúminimize oppressiveness‚Äù algorithm. This is most common in systems with no weighting system in place. For instance, email icons show all unread messages, including those messages that are unimportant as well as those that are. In trying to deal with the most weighty emails, this leads people to lower the total number of unread messages instead of dealing with those weighty emails, in an attempt to relieve the problem. If the goal is just to have less unreads, then this is the best choice, but if the goal is to do what is important, then the other algorithm is best, and therefore, managing the most weighty emails first is the best choice.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the case of app badges, if we can‚Äôt get them to reflect our actual priorities, and can‚Äôt overcome the impulse to optimally reduce any numerical figure thrown in out face, then perhaps the next best thing is to turn the badges off.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;best-practices&quot;&gt;Best Practices&lt;/h3&gt;

&lt;p&gt;Setting minimum periods with no interruptions allow both the throughput and responsiveness without sacrificing either, a la Pomodoro Method. &lt;strong&gt;Determine the minimum acceptable limit of responsiveness and then be no more responsive than that.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interrupt coalescing&lt;/strong&gt; is the grouping of like interrupts to all be done at once. Let all interrupts of type X wait until a minimum acceptable responsiveness and then attend to them all at once.&lt;/p&gt;

&lt;p&gt;When &lt;strong&gt;priority inversion&lt;/strong&gt; is an issue, use &lt;strong&gt;priority inheritance&lt;/strong&gt;, where that lower level task that is blocking the higher level task inherits the priority of that task. If you can‚Äôt do task Y because task Z isn‚Äôt done yet, then task Z is now the most important task to be done.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;predictions&quot;&gt;Predictions&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Events are always experienced at their proper frequencies, but this isn‚Äôt true of language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good predictions require good priors. People generally have a ton of information from past experience and this allows good models. However, we retell interesting stories because of how interesting they are. This makes them seem to be more likely than they really are to be.&lt;/p&gt;

&lt;p&gt;The Stanford Marshmallow Experiment and its successive study to replicate it‚Äôs findings was not at its core a study of delayed gratification, as much as it was trust that the system will honor its word in giving you the marshmallow it promised. Kids who lived in places with less trust in authority or the words of others were less likely to wait as it would have no perceived benefit to them.&lt;/p&gt;

&lt;h3 id=&quot;laws-and-rules&quot;&gt;Laws and Rules&lt;/h3&gt;

&lt;h4 id=&quot;laplaces-law&quot;&gt;Laplace‚Äôs Law&lt;/h4&gt;

&lt;p&gt;With no priors or prior information given or known, the probability of a given event happening is &lt;code class=&quot;highlighter-rouge&quot;&gt;(the number of successes + 1) / (the number of attempts + 2)&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;bayess-rule&quot;&gt;Bayes‚Äôs Rule&lt;/h4&gt;

&lt;p&gt;This shows the probability of &lt;strong&gt;one scenario&lt;/strong&gt; given that &lt;strong&gt;another scenario&lt;/strong&gt; is true. The formula is written as &lt;code class=&quot;highlighter-rouge&quot;&gt;Probability of A given B = [(Probability of B given A) multiplied by (Probability of A)] / (Probability of B)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example: What is the probability that &lt;strong&gt;the person is a librarian and not a farmer&lt;/strong&gt; given &lt;strong&gt;a description&lt;/strong&gt;? (from &lt;a href=&quot;https://www.youtube.com/watch?v=HZGCoVF3YvM&quot;&gt;3Blue1Brown‚Äôs video on Bayes Rule&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The total options available are that the person described is either a &lt;strong&gt;farmer&lt;/strong&gt; or a &lt;strong&gt;librarian&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;P(librarian | description) = ( P(description | librarian) * P(librarian) ) / P(description)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;P(description | librarian)&lt;/code&gt; = the likelihood that the description fits a given librarian, let‚Äôs say 40%&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;P(librarian)&lt;/code&gt; = the percentage of librarians (10) to farmers (200), ~5%&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;P(description)&lt;/code&gt; = the likelihood that the description fits a given librarian AND the likelihood that the description fits a given farmer;
    &lt;ul&gt;
      &lt;li&gt;Librarian: let‚Äôs say 40%&lt;/li&gt;
      &lt;li&gt;Farmer: let‚Äôs say 10%&lt;/li&gt;
      &lt;li&gt;Total: (.4 * 10 + .1 * 200) / 210 = 11%&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;P(librarian | description) = ( 40 * 5 ) / 11 = 200/11&lt;/code&gt; = 18% probability of the description matching a librarian in the given sample&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The richer the information we bring to Bayes rule, the more useful the predictions we can get out of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=U_85TaXbeIo&quot;&gt;3Blue1Brown‚Äôs second video on Bayes‚Äôs Rule&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;copernican-principle&quot;&gt;Copernican Principle&lt;/h4&gt;

&lt;p&gt;Without prior information, we encounter things on on average halfway through their entire existence. They will last as long as they already have &lt;em&gt;again&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;distributionsscales&quot;&gt;Distributions/Scales&lt;/h3&gt;

&lt;h4 id=&quot;normal-distribution-use-the-average-rule&quot;&gt;Normal Distribution: use the Average Rule&lt;/h4&gt;

&lt;p&gt;There is an average and then falls sharply on either side. Usually follows a single appropriate scale, e.g. average lifespan is 76; low is single digits and high is triple.&lt;/p&gt;

&lt;p&gt;The Average Rule is to use the distribution‚Äôs average to make your prediction.&lt;/p&gt;

&lt;h4 id=&quot;power-law-distribution-use-the-multiplicative-rule&quot;&gt;Power Law Distribution: use the Multiplicative Rule&lt;/h4&gt;

&lt;p&gt;Follows a more displaced curve. Often accompanied by hige discrepancies of numbers, e.g. average income is $58k, but 2/3 of population make less while .01% make 100 times more. Can be interpreted as the 80/20 rule.&lt;/p&gt;

&lt;p&gt;The Multiplicative Rule is that, in the case of a power law distribution, the observation made can be multiplied by a constant factor to make a prediction.&lt;/p&gt;

&lt;h4 id=&quot;erlang-distribution-use-the-additive-rule&quot;&gt;Erlang Distribution: use the Additive Rule&lt;/h4&gt;

&lt;p&gt;In between a normal and power law distribution. Models include radioactive decay, political terms in office.&lt;/p&gt;

&lt;p&gt;The Additive Rule is that things will go on a constant amount longer. These distributions yield the same prediction regardless of history or current state.&lt;/p&gt;

&lt;h3 id=&quot;overfitting-and-how-to-avoid-it&quot;&gt;Overfitting and How To Avoid It&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Overfitting&quot;&gt;Overfitting is a model that contains more parameters than can be justified by the data&lt;/a&gt;. Applying simple heuristics (fewer models or a simpler formula) can often be better and more accurate due to overfitting and confidence in it by the user. Too simple of a model will get you inaccurate results; too complex will imply things that don‚Äôt exist or are hyperbolic. The more noise you have, the more simple your model or heuristics need to be to ensure no overfitting occurs. The less noise you have, the more complex your model and heuristics can be. The more accurate our data, the more factors can be used safely. Adding more factors to help match the data correctly is not necessarily the way to get good predictions.&lt;/p&gt;

&lt;p&gt;Overfitting your work to fit the picture of success is product over process thinking. If your goal is to lose 30 pounds and you don‚Äôt eat, you will succeed (product) but you will also sacrifice the form (process) necessary to do it in a way that addressed the underlying information and goal: better health. Focus on the way and process over all else.&lt;/p&gt;

&lt;p&gt;In focusing on form, be careful what you measure as goal oriented behavior. This will be reached at all costs and that may or may not be in the way that was asked.&lt;/p&gt;

&lt;h4 id=&quot;early-stopping&quot;&gt;Early stopping&lt;/h4&gt;

&lt;p&gt;Early stopping is used to stop the refinement or research into solving a problem before you get too in the weeds. Overfitting will take place beyond the most important factors.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How early to stop depends on the gap between what you can measure and what really matters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;cross-validation&quot;&gt;Cross validation&lt;/h4&gt;

&lt;p&gt;Cross validation is assessing the given data and seeing how well the model predicts unseen data.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Withhold data points to plug in later and see if they follow&lt;/li&gt;
  &lt;li&gt;Use data pulled from another measure and see if it holds up&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cross training with different educational systems or testing methods can ensure that the learning is not being ‚Äútaught to the test‚Äù.&lt;/p&gt;

&lt;h4 id=&quot;regularization&quot;&gt;Regularization&lt;/h4&gt;

&lt;p&gt;Regularization is introducing penalties for more complexity in the model to ensure that the extra complexity is worth it. Only the most important factors must stay in relation to how much importance the overall function the element is to the system. For instance, the brain would not be evolutionarily viable if it took 20% of our caloric intake and didn‚Äôt provide such benefits as it does now. Also, the brain is apparently not important enough to take 40% of our caloric intake.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;predictions-1&quot;&gt;Predictions&lt;/h2&gt;

&lt;h3 id=&quot;models&quot;&gt;Models&lt;/h3&gt;

&lt;h4 id=&quot;hill-climbing&quot;&gt;Hill Climbing&lt;/h4&gt;

&lt;p&gt;Hill Climbing is starting with a possibility and editing that possibility over and over to find the best solution. It gives you the ‚Äúlocal maximum‚Äù to your starting point. Hill climbing can be augmented with ‚Äújitter‚Äù, an applied randomness to test slight deviations for successful outcomes.&lt;/p&gt;

&lt;p&gt;Different types of Hill Climbing include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;‚ÄúShotgun‚Äù hill climbing&lt;/strong&gt;: restarting from a totally random or shuffled possibility and repeating your whole process.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Metropolis Algorithm&lt;/strong&gt;: accepting slightly worse possibilities at random to ensure new directions are taken.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Simulated Annealing&lt;/strong&gt;: starting at a random point, always take a better solution if found and accept slightly worse solutions X% of the time. Continue lowering X until it is zero and you will have found the local maximum. Good for use with Metropolis, simulates jitter, and utilizes shotgun.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your likelihood of following a bad idea should be inversely proportional to how bad it is.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;monte-carlo-method&quot;&gt;Monte Carlo Method&lt;/h4&gt;

&lt;p&gt;Replace exhaustive probability calculations with sample simulations, usually samples made of random inputs.&lt;/p&gt;

&lt;h4 id=&quot;sieve-of-eratosthenes&quot;&gt;Sieve of Eratosthenes&lt;/h4&gt;

&lt;p&gt;Example: To find primes from 1 to n:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write all numbers from 1 to n&lt;/li&gt;
  &lt;li&gt;Start at 2 and cross off any multiples of 2.&lt;/li&gt;
  &lt;li&gt;Repeat with all numbers not yet crossed out.&lt;/li&gt;
  &lt;li&gt;When n/2 is reached, all numbers not yet crossed out are primes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;greedymyopic-algorithms&quot;&gt;Greedy/Myopic Algorithms&lt;/h4&gt;

&lt;p&gt;These focus on only the best choice at each step and don‚Äôt worry about the others.&lt;/p&gt;

&lt;h3 id=&quot;types-of-relaxation-and-their-implementation&quot;&gt;Types of Relaxation and Their Implementation&lt;/h3&gt;

&lt;h4 id=&quot;constraint-relaxation&quot;&gt;Constraint Relaxation&lt;/h4&gt;

&lt;p&gt;Constraint relaxation is when you try to solve an easier version of the problem, and then when you‚Äôve made progress, add constraints back in. &lt;strong&gt;Constraint relaxation is a tradeoff of time for good-enough solutions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Remove the constraints, make progress, and then reintegrate the constraints.&lt;/p&gt;

&lt;h4 id=&quot;discrete-optimizationcontinuous-relaxation&quot;&gt;Discrete Optimization/Continuous Relaxation&lt;/h4&gt;

&lt;p&gt;Discrete optimization/continuous relaxation is used where fractions aren‚Äôt used (number of fire trucks per capita, number of people to vaccinate). Relaxing these to use fractions and then round from there is usually good enough (number of fire trucks ending up being 1.2 per capita, rounding to 1).&lt;/p&gt;

&lt;p&gt;Turn discrete measurements to continuous measurements and then round them off.&lt;/p&gt;

&lt;h4 id=&quot;lagrangian-relaxation&quot;&gt;Lagrangian Relaxation&lt;/h4&gt;

&lt;p&gt;In optimization, there are the rules and the scorekeeping. Moving constraints from the rules (input) to the scorekeeping (output) allows for impossible solutions to get close enough.&lt;/p&gt;

&lt;p&gt;Change the bindings on the rules into bindings on the score.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The perfect is the enemy of the good. - Voltaire&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;networking&quot;&gt;Networking&lt;/h2&gt;

&lt;h3 id=&quot;exponential-backoff&quot;&gt;Exponential Backoff&lt;/h3&gt;

&lt;p&gt;If an attempt is failed, increase the previous constraint by double.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If network is not connecting, wait between 1-2s to try and reconnect; again, wait 2-4s more; etc.&lt;/li&gt;
  &lt;li&gt;If a person doesn‚Äôt respond to your call or text, wait 1 day to follow up; again, wait 2 days, etc.&lt;/li&gt;
  &lt;li&gt;If a person violates probation, the 1st time they should spend 1 day in jail; the 2nd, 2 days; 3rd, 4 days; etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;additive-increase-multiplicative-decrease&quot;&gt;Additive increase, multiplicative decrease&lt;/h3&gt;

&lt;p&gt;On a success, increase the input side at a constant rate. On a failure, cut back that input by half. Applicable most directly to internet connections and attempts to ask for or send information.&lt;/p&gt;

&lt;h3 id=&quot;backchannels&quot;&gt;Backchannels&lt;/h3&gt;

&lt;p&gt;The backchannels in communication are responses, acknowledgements, or the lack thereof. In a conversation or speech, the effectiveness of a speaker is partly dependent on the listener‚Äôs backchannel communication.&lt;/p&gt;

&lt;h3 id=&quot;taildrop&quot;&gt;Taildrop&lt;/h3&gt;

&lt;p&gt;A taildrop is the dropping of everything that didn‚Äôt fit within the buffer. Modern communication doesn‚Äôt allow taildrop, and was specifically made to stop it. For example, a home phone with a tape message machine will eventually run out of space, but an email box has no feasible limit of how large the backlog can get. &lt;strong&gt;We aren‚Äôt always connected, but we are always buffered.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One of the fundamental principles of buffers is that they only work correctly if they are routinely zeroed out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;game-theory&quot;&gt;Game Theory&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;We can hope to be fortunate, but should strive to be wise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;‚ÄúPrice of anarchy‚Äù&lt;/strong&gt;: The gap between cooperation and competition. The bigger the difference, the higher the price.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Revelation Principle&lt;/strong&gt;: Any game that requires strategic masking of the truth can be transformed into a game where the dominant strategy is honesty.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Computational Kindness&lt;/strong&gt;: relieving the amount of things for sombody to compute when forced with your problem. By asking a very specific question, the answer will be simpler. Too many questions will feel intractable. Instead of ‚Äúpassing the cognitive buck‚Äù, offering a suggestion is a way to lessen the burden for others. Instead of a continued computation, aka spinning (will the bus come soon?), opt for a single one, aka blocking (the bus is coming in 10 minutes; I can/cannot wait).&lt;/p&gt;

&lt;h3 id=&quot;leveling&quot;&gt;Leveling&lt;/h3&gt;

&lt;p&gt;Only playing one level above your opponent. If you are playing at level 3 and they are at level 1, it is likely you will be overthinking your strategy and overfit your model.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Level 1 - I know&lt;/li&gt;
  &lt;li&gt;Level 2 - I know you know&lt;/li&gt;
  &lt;li&gt;Level 3 - You know I know you know&lt;/li&gt;
  &lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An &lt;strong&gt;Information Cascade&lt;/strong&gt; is when external information affects your personal information so much that you then disregard your own info completely.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be wary of cases where you know more about what people are doing than why.&lt;/li&gt;
  &lt;li&gt;Actions are not beliefs. Do not misinterpret actions as beliefs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;equilibrium&quot;&gt;Equilibrium&lt;/h3&gt;

&lt;p&gt;In a two player game, this is the best strategy assuming rational play. This is distinctly outside of leveling, meta strategy, etc. The predictive abilities of Nash equilibrium are only useful if you can find them as a player.&lt;/p&gt;

&lt;p&gt;If the point of equilibrium can‚Äôt be changed directly, then the rules must be changed to force the equilibrium to move.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If employers give an option to take vacation or not, the equilibrium will shift to be the ‚Äúmost loyal‚Äù employee, taking less vacation than their peers.&lt;/li&gt;
  &lt;li&gt;By making vacation mandatory, this leaves everyone free to take the break, not allowing the competition to overtake their good judgment in taking care of themselves.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;auctions&quot;&gt;Auctions&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Sealed Bid First-Price Auctions&lt;/strong&gt;: Bids are made in secret and highest offer wins. The bidders are not offering what they want to pay; they are offering what they think &lt;em&gt;others&lt;/em&gt; will pay plus some. Winners almost always overpay.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dutch Auction&lt;/strong&gt;: Starting price is lowered until someone wants to buy it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;English Auction&lt;/strong&gt;: Starting price is raised until highest bidder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vickrey Auction&lt;/strong&gt;: Sealed bid first-price auction but winner pays second highest bid. Utilizes the Revelation Principle to convert the sealed bid first-price auction‚Äôs ‚Äústrategic masking of the truth‚Äù into a game where people play honestly.&lt;/p&gt;

&lt;!-- --- 

- _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>Solution to Advent of Code 13 - LCM with Offsets</title>
   <link href="http://milofultz.com/2020/12/13/aoc-day-13"/>
   <updated>2020-12-13T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/12/13/aoc-day-13</id>
   <content type="html">&lt;p&gt;Here, to help justify that I definitely stole an answer from somebody on Reddit to answer this question, I‚Äôm going to explain &lt;em&gt;why&lt;/em&gt; the answer works. Mainly for myself to truly understand this, but also so that if somebody searches for something like this at a later date, there will be a reference. (I‚Äôll be using the smaller sample data for the explanation because it is way easier to grok)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://adventofcode.com/2020/day/13&quot;&gt;&lt;strong&gt;Check out the problem here, or this won‚Äôt make any sense.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;brute-force&quot;&gt;Brute Force&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/milofultz/aoc2020/blob/master/13/aoc13-2-brute.py&quot;&gt;My initial solution used brute force&lt;/a&gt;, as essentially all of my solutions have so far, and this‚Ä¶didn‚Äôt work. My computer was working really hard, fans spinning and everything, but wasn‚Äôt getting anywhere (because the answer for me ended up being 667,437,230,788,118 and I started at &lt;em&gt;1&lt;/em&gt;). I went to bed and tried to not think about it. First of course we start with parsing the data, which is a line of ‚Äúbus IDs‚Äù, which actually correspond to the intervals at which the buses leave the station.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;7,13,x,x,59,x,31,19
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I put these into an array, converting the numbers to integers and leaving the x‚Äôs as strings.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[7, 13, 'x', 'x', 59, 'x', 31, 19]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here‚Äôs the pseudocode of the brute force solution:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Set 'largest_number' to the largest number in the array
Set 'largest_offset' to the index of 'largest_number' in the array
Set the initial value of the 'multiple' by which to multiply the 'largest_number' to 1
Set a 'found' variable to let the program know the solution has not been found
While the solution has not been 'found':
    Set that the solution is 'found' until proven otherwise
    Set the 'target' test value to the 'multiple' times the 'largest_number'
    For each 'index' of each 'bus_ID' in the array
        Set the 'offset' to the 'index' minus the 'largest_offset'
        If the 'bus_ID' is an 'x', then continue to the next 'bus_ID'
        If the remainder of (the sum of the 'target' and the 'offset') divided by the 'bus_ID' is not zero:
        	Set that the solution was not found and break out of the loop
    Add one to the 'multiple'
Return the 'target'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I used the largest number in the array to try and speed up the already long search, as their multiples of 59 would get searched way faster than the multiples of 7. As this iterates through, it tests every multiple of the largest number against each number plus or minus its relative offset. Unfortunately, even though this works, it is not fast (at all) for the much longer and much more complex final puzzle input.&lt;/p&gt;

&lt;p&gt;One way I could have improved this was in the parsing of the data. Instead of trying to calculate weird offsets, I should have just included the offsets with the bus IDs as a tuple. The result would be a list of tuples, each of which include the &lt;strong&gt;offset&lt;/strong&gt; and the &lt;strong&gt;bus ID/interval&lt;/strong&gt;. The ‚Äòx‚Äôs are also discarded, as they are no longer necessary.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# (offset, bus_id)
[(0,7), (1,13), (4,59), (6,31), (7,19)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sieving&quot;&gt;Sieving&lt;/h2&gt;

&lt;p&gt;The idea of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Sieve_theory&quot;&gt;‚Äòsieve‚Äô&lt;/a&gt; in math is to use it to ‚Äòsieve‚Äô out all non-possibilities, leaving you with a much smaller pool to test. Most notable is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes&quot;&gt;Sieve of Erastosthenes&lt;/a&gt;, which is used to calculate prime numbers.&lt;/p&gt;

&lt;p&gt;The most base case of this problem that I found was to find the least common multiple of a given set of integers. To find this using the sieve method, we can use this pseudocode:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Set the initial value of the 'answer' number to 0
Set the initial value of 'least common multiple' to 1
For each 'number' in the array:
	While the remainder of the 'answer' value divided by the 'number' is not zero:
		Add the value of the 'least common multiple' to the 'answer'
	Set the 'least common multiple' to the `answer`
Return the 'answer'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;example&quot;&gt;Example:&lt;/h4&gt;

&lt;p&gt;Let‚Äôs say our given &lt;code class=&quot;highlighter-rouge&quot;&gt;array&lt;/code&gt; of integers are [2,3,8]. We start by setting our &lt;code class=&quot;highlighter-rouge&quot;&gt;answer&lt;/code&gt; as 0 and the &lt;code class=&quot;highlighter-rouge&quot;&gt;least common multiple&lt;/code&gt; to 1. Then we reach the For loop, which will cycle through the &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt;s in the &lt;code class=&quot;highlighter-rouge&quot;&gt;array&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Set the `number` to the first number in the `array`, 2.
While `answer` % `number` ‚â† 0: 
	0 % 2 ‚â† 0 is true, so add `least common multiple` to the `answer`. `answer` now equals 1.
	1 % 2 ‚â† 0 is true, so add `least common multiple` to the `answer`. `answer` now equals 2.
	2 % 2 ‚â† 0 is false, so break out of the while loop.
Set `least common multiple` to `least common multiple` times `number`: 2.
We continue through the for loop: `number` is the next in the `array`: 3.
While `answer` % `number` ‚â† 0: 
	2 % 3 ‚â† 0 is true, so add `least common multiple` to `answer`: 4.
	4 % 3 ‚â† 0 is true, so add `least common multiple` to `answer`:  6.
	6 % 3 ‚â† 0 is false, so break out of the while loop.
Set `least common multiple` to `least common multiple` times `number`: 6. 
We continue through the for loop: `number` is the next in the `array`: 8.
While `answer` % `number` ‚â† 0: 
	6 % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 12.
	12 % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 18.
	18 % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 24.
	24 % 8 ‚â† 0 is false, so break out of the while loop.
Set `least common multiple` to `least common multiple` times `number`: 24.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One thing to note going forward is that &lt;strong&gt;all the numbers of the bus IDs are prime numbers&lt;/strong&gt;, as if they were not, there would have to be some factorization in preparing to find the least common multiple. Finding the LCM of all primes is to just multiply them together, but with the offsets, we need this longhand to get there.&lt;/p&gt;

&lt;h3 id=&quot;adding-the-offsets&quot;&gt;Adding the Offsets&lt;/h3&gt;

&lt;p&gt;Now that we have this pseudocode, adding the offsets is easier for me to grok. The biggest difference is that we are going to utilize the &lt;code class=&quot;highlighter-rouge&quot;&gt;least common multiple&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;answer&lt;/code&gt; a &lt;em&gt;tiny&lt;/em&gt; bit differently. Assuming we have our list of bus IDs from before, where each ID is a tuple containing the &lt;strong&gt;offset&lt;/strong&gt; and the &lt;strong&gt;bus ID/interval&lt;/strong&gt;, we now have to adjust our test in the while loop. Instead of testing for if the remainder of the &lt;code class=&quot;highlighter-rouge&quot;&gt;answer&lt;/code&gt; divided by the &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; is not zero, we are going to test whether the remainder of the sum of the &lt;code class=&quot;highlighter-rouge&quot;&gt;answer&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt; all divided by the &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; is not zero.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;('answer' + 'offset') % `number` ‚â† 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, here is the pseudocode, taking into account the &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt; needed to calculate the answer.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Set the initial value of the 'answer' number to 0
Set the initial value of 'least common multiple' to 1
For each 'offset' and 'number' in the array:
	While the remainder of the sum of the 'answer' and the 'offset' value all divided by the 'number' is not zero:
		Add the value of the 'least common multiple' to the 'answer'
	Set the 'least common multiple' to the 'least common multiple' multiplied by the 'number'
Return the 'answer'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;example-1&quot;&gt;Example&lt;/h4&gt;

&lt;p&gt;I‚Äôll again use an &lt;code class=&quot;highlighter-rouge&quot;&gt;array&lt;/code&gt; containing [2,3,8], keeping in mind the new problem: our solution must look for what number is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A multiple of the first element, and&lt;/li&gt;
  &lt;li&gt;The sum of the offset plus a multiple of the number, for every other element.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First we will need to parse our array into tuples containing their &lt;strong&gt;offsets&lt;/strong&gt; and &lt;strong&gt;numbers&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[(0, 2), (1, 3), (2, 4)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we define &lt;code class=&quot;highlighter-rouge&quot;&gt;answer&lt;/code&gt; as 0 and &lt;code class=&quot;highlighter-rouge&quot;&gt;least common multiple&lt;/code&gt; as 1. Then we continue into the For loop:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Set `offset` to the first number of the first tuple in `array`: 0; and set `number` to second number in the first tuple in `array`: 2.
While (`answer` + `offset`) % `number` ‚â† 0: 
	(0 + 0) % 2 ‚â† 0 is true, so add `least common multiple` to `answer`: 1.
	(1 + 0) % 2 ‚â† 0 is true, so add `least common multiple` to `answer`: 2.
	(2 + 0) % 2 ‚â† 0 is false, so break out of the while loop.
Set `least common multiple` to `least common multiple` times `number`: 2.
We continue through the for loop: set `offset` and `number` as the numbers in the next tuple: 1 and 3.
While (`answer` + `offset`) % `number` ‚â† 0: 
	(2 + 1) % 3 ‚â† 0 is true, so break out of the while loop.
Set `least common multiple` to `least common multiple` times `number`: 6.
We continue through the for loop: set `offset` and `number` as the numbers in the next tuple: 2 and 8.
While (`answer` + `offset`) % `number` ‚â† 0: 
	(2 + 2) % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 8.
	(8 + 2) % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 14.
	(14 + 2) % 8 ‚â† 0 is false, so break out of the while loop.
Set `least common multiple` to `least common multiple` times `number`: 48.
Return the `answer`: 14.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;other-solutions&quot;&gt;Other Solutions&lt;/h2&gt;

&lt;p&gt;The ones using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Chinese_remainder_theorem&quot;&gt;Chinese remainder theorem&lt;/a&gt; went &lt;em&gt;way&lt;/em&gt; over my head and the videos I watched were not enough to compel me to spend time trying to: first, understand it and then second, write the program out. It was well beyond my understanding, but I think it probably is the ‚Äúdesired‚Äù solution.&lt;/p&gt;

&lt;!-- --- 

- _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>üß© Advent Of Code 2020 - Solutions</title>
   <link href="http://milofultz.com/2020/12/01/advent-of-code"/>
   <updated>2020-12-01T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/12/01/advent-of-code</id>
   <content type="html">&lt;p&gt;These are my solutions. I‚Äôm trying to do as many as I can in both Python and in Javascript. Plus I‚Äôm going to scope out people‚Äôs answers in C and see what I can glean.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/milofultz/aoc2020&quot;&gt;&lt;strong&gt;Check out the solutions on GitHub&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;20201201: Solved the first challenge, starting up number 2&lt;/li&gt;
  &lt;li&gt;20201202: Solved day 2&lt;/li&gt;
  &lt;li&gt;20201203: Solved day 3 and 4&lt;/li&gt;
  &lt;li&gt;20201204: Solved day 5&lt;/li&gt;
  &lt;li&gt;20201205: Solved day 6&lt;/li&gt;
  &lt;li&gt;20201206: Solved day 7. Definitely noticing the desire to be on the leaderboards and ‚Äúcool‚Äù or ‚Äúfast‚Äù or whatever and trying to go against that feeling. I would rather have effective solutions ‚Äúslowly‚Äù than flail around and hope stuff works.&lt;/li&gt;
  &lt;li&gt;20201207: Solved day 8. Worked much more purposefully and without (as much) regard to the clock; still working on focusing on the process over the product.&lt;/li&gt;
  &lt;li&gt;20201208: Solved day 9. Brute forcing a problem I should probably use an algorithm for, but don‚Äôt know enough. Now is the time to really dig! Look through solutions on Reddit, Mastodon, etc.&lt;/li&gt;
  &lt;li&gt;20201209: Revised my work for day 9 to find a better solution. Ended up using &lt;a href=&quot;https://github.com/neelakantankk/Advent_of_Code_2020/blob/main/Day_09/day_09.py&quot;&gt;a solution from ‚Äòneelakantankk‚Äô I found on Reddit&lt;/a&gt;, utilizing a deque, which I have very little experience with. It is a very interesting solution that utilizes a truth I missed in the iteration. When iterating through the contiguous numbers, if the sum of those contiguous numbers is higher than the target, you can safely remove the first number in the contiguous numbers. I‚Äôm having a hard time fully grokking it but it intuitively feels right, so I‚Äôm going to try and work it out on paper until it really makes sense.&lt;/li&gt;
  &lt;li&gt;20201209: Solved day 10 part 1 but do not have the know how for part 2 without just stealing an answer without any understanding. Will come back later.&lt;/li&gt;
  &lt;li&gt;20201210: Solved day 11&lt;/li&gt;
  &lt;li&gt;20201211: Solved day 12&lt;/li&gt;
  &lt;li&gt;20201211: Solved day 13 part 1 and have a brute force solution for part 2; however this solution has been spinning for a half hour at least and is showing no signs of progress.&lt;/li&gt;
  &lt;li&gt;20201213: Went and searched for solutions and &lt;a href=&quot;https://www.reddit.com/r/adventofcode/comments/kc4njx/comment/gfqeouq&quot;&gt;found one that I was really able to understand from gravitar64&lt;/a&gt;, using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Sieve_theory&quot;&gt;‚Äúsieving‚Äù method&lt;/a&gt;. This didn‚Äôt use some intense number theory, like other solutions which used the &lt;a href=&quot;https://en.wikipedia.org/wiki/Chinese_remainder_theorem&quot;&gt;Chinese Remainder Theorem&lt;/a&gt;. I did cheat, but I understand the answer and how it works and that‚Äôs all I wanted anyway.&lt;/li&gt;
  &lt;li&gt;20201213: &lt;a href=&quot;/2020/12/13/aoc-day-13&quot;&gt;Made a write up of how the sieve method works to repent for what feels like cheating.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;20201215: Solved day 14 and 15. Day 15 was really tough to understand while I was doing it, as there was a lot to juggle, but it was a very fun one to solve. Ended up refactoring quite a bit by reading the code of &lt;a href=&quot;https://github.com/Scarygami/aoc2020/blob/main/15/day15.py&quot;&gt;Scarymagi&lt;/a&gt; I found on Reddit.&lt;/li&gt;
  &lt;li&gt;20201216: Solved day 16, and parsing was the majority of the work. It was kind of its own challenge in itself. The problem for part 1 after that was pretty straightforward with a set. Part 2 presented an interesting challenge of essentially trying to solve a &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_puzzle#Logic_grid_puzzles&quot;&gt;logic grid puzzle&lt;/a&gt; using programming, which I hadn‚Äôt done before. That was a good time!&lt;/li&gt;
  &lt;li&gt;20201218: Started on day 17 and realized I need to finally learn how to use Numpy and deal with 3 dimensional arrays, as this is essentially &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway's_Game_of_Life&quot;&gt;Conway‚Äôs Game of Life&lt;/a&gt; but in 3 dimensions.&lt;/li&gt;
  &lt;li&gt;20201219: Solved day 17 and learned how to use Numpy fairly well with it. Ended up doing Game of Life as a 3 dimensional and &lt;em&gt;4 dimensional&lt;/em&gt; version, which was wild. 3-dimensions required a lot from me, a guy who doesn‚Äôt ever do anything like this and probably solved it in a very long-winded inelegant way, but dammit I solved it.&lt;/li&gt;
  &lt;li&gt;20201219: Solved day 10 part 2 finally. Tried a recursive solution but it was blasting my computer and taking way too long, so I went searching. The solutions I found using &lt;code class=&quot;highlighter-rouge&quot;&gt;defaultdict&lt;/code&gt; was super elegant, so went with that and am pretty happy with it.&lt;/li&gt;
  &lt;li&gt;20201221: Solved day 18, which was all about essentially making math that solved in the wrong order (i.e. not &lt;a href=&quot;https://blog.prepscholar.com/pemdas-meaning-rule&quot;&gt;PEMDAS&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;20201222: Solved day 19 part 1, which was really hard to grok, but I got it. A recursion puzzle that was hard to wrap my head around the initial parts. Part 2 is beyond the scope of what my late night brain can handle.&lt;/li&gt;
  &lt;li&gt;20201225: Solved day 20 and it took me a few hours yesterday and most of today. This was really fun, essentially automating putting together a puzzle, which was a really satisfying project.&lt;/li&gt;
  &lt;li&gt;20201228: Solved day 21 and it was much, much easier than 20. Essentially logic grid puzzle solving again, like in day 16, which is so satisfying to implement!&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Bytebeat - Overview and How To Make/Record on OSX</title>
   <link href="http://milofultz.com/2020/11/10/bytebeat"/>
   <updated>2020-11-10T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/11/10/bytebeat</id>
   <content type="html">&lt;p&gt;‚ÄúBytebeat‚Äù is the name given to the method of piping mathematical equations to an audio device make lo-fidelity gritty sounds. They often sound pretty musical due to the mathematical nature of the equations and bitwise operations. But that does not mean that it has to be ‚Äúmusical‚Äù to be good either, as you will discover when messing around with it.&lt;/p&gt;

&lt;p&gt;For a good dive into what Bytebeat is and how it started, check out these links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://canonical.org/~kragen/bytebeat/&quot;&gt;Kragen‚Äôs Writeup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://countercomplex.blogspot.com/2011/10/algorithmic-symphonies-from-one-line-of.html&quot;&gt;The original post from  Ville-Matias Heikkil√§&lt;/a&gt; and &lt;a href=&quot;https://countercomplex.blogspot.com/2011/10/some-deep-analysis-of-one-line-music.html&quot;&gt;his follow up post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zserge.com/posts/etude-in-c/&quot;&gt;ZSerge‚Äôs article where I first heard about it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=GtQdIYUtAHg&quot;&gt;Bytebeat: Experimental music from very short C programs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=qlrs2Vorw2Y&quot;&gt;Bytebeat: Experimental one-line algorithmic music - the 2nd iteration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=tCRPUv8V22o&quot;&gt;Bytebeat: Music from very short programs - the 3rd iteration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-to-make-your-own&quot;&gt;How To Make Your Own&lt;/h3&gt;

&lt;p&gt;A fantastic how-to of the basics including the math operations and how to use them can be found in PDF at &lt;a href=&quot;https://github.com/TuesdayNightMachines/Bytebeats&quot;&gt;TuesdayNightMachine‚Äôs Github page&lt;/a&gt;. I would highly recommend starting here if you don‚Äôt get binary or bitwise operations.&lt;/p&gt;

&lt;p&gt;The super simplest way to implement and test (hear) Bytebeat code is through the many online HTML5/JS apps online.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://greggman.com/downloads/examples/html5bytebeat/html5bytebeat.html#t=0&amp;amp;e=0&amp;amp;s=8000&amp;amp;bb=5d00000100180000000000000000141d0150043e1f062919296ab90380807628655b351388d1ffe7d4a000&quot;&gt;Gregg Tavares&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wurstcaptures.untergrund.net/music/&quot;&gt;Bemmu and rarefluid (in stereo!)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;making-it-offline-on-osx&quot;&gt;Making It Offline On OSX&lt;/h3&gt;

&lt;p&gt;My desire when starting to mess with this stuff was trying to figure out how I could do it in the command line, as that was how I had seen it laid out in many examples in Linux. The problem was that the built in tools to pipe data into your audio device was not built in to OSX the way it is built in to Linux, so I had to do some sleuthing. With &lt;a href=&quot;https://merveilles.town/web/statuses/105096777143471978&quot;&gt;a lot of help from the Merveilles community&lt;/a&gt;, I was able to finally figure out the process and I wanted to document it here.&lt;/p&gt;

&lt;h4 id=&quot;step-1-install-sox-with-homebrew&quot;&gt;Step 1. Install SoX with homebrew&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install sox&lt;/code&gt; (&lt;a href=&quot;https://chrisrosser.net/posts/2020/04/06/using-sox-on-macos/&quot;&gt;you can follow this tutorial here if you are confused&lt;/a&gt;)&lt;/p&gt;

&lt;h4 id=&quot;step-2-create-a-bash-script-to-automate-the-build-compile-and-piping-of-your-bytebeat-formulas-all-on-the-cli&quot;&gt;Step 2. Create a bash script to automate the build, compile, and piping of your Bytebeat formulas all on the CLI.&lt;/h4&gt;

&lt;p&gt;The way that I did this was pretty much completely stolen from &lt;a href=&quot;https://web.archive.org/web/20160610140821/http://coleingraham.com/2013/04/28/bytebeat-shell-script/&quot;&gt;Cole Ingraham‚Äôs post&lt;/a&gt; that I dug up on archive.org. Essentially without this, you have to do quite a few very boring and uninteresting steps which means very little instant gratification, which is what we want.&lt;/p&gt;

&lt;p&gt;Here is the script that I created for using it in bash on OSX:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This script creates and plays a simple ByteBeat&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ARGS&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# $1: a string with the ByteBeat algorithm e.g. &quot;((t * 3) &amp;amp; (t &amp;gt;&amp;gt; 5))&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# $2: the name of the file to be creates (without an extension)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create the C program&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#include &amp;lt;math.h&amp;gt;

int s(double num){
    return 256*sin(num);
};

int c(double num){
    return 256*cos(num);
};

main(t){
    for(t=0;;t++){
        putchar( &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; );
    }
};&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.c&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# compile the source&lt;/span&gt;
gcc &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.c&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# play it with standard ByteBeat settings&lt;/span&gt;
./&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | sox &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; u8 &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; 8k &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 1 - &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Take this script and copy it into a code editor/text editor, saving it as a file with an &lt;code class=&quot;highlighter-rouge&quot;&gt;.sh&lt;/code&gt; extension (I called it &lt;code class=&quot;highlighter-rouge&quot;&gt;bytebeat.sh&lt;/code&gt;). Put it in a folder where you can access it easily with the command line in your terminal. There you will be able to make the audio using the arguments written in the script. But before that,&lt;/p&gt;

&lt;h4 id=&quot;step-3-turn-down-your-volume&quot;&gt;Step 3. Turn down your volume!&lt;/h4&gt;

&lt;p&gt;Trust me, it‚Äôs LOUD. Don‚Äôt forget!&lt;/p&gt;

&lt;h4 id=&quot;step-4-try-it-out&quot;&gt;Step 4. Try it out!&lt;/h4&gt;

&lt;p&gt;Once you have saved that script and you have navigated to the enclosing folder in your terminal, you can make some noises! Your script takes two arguments:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The Bytebeat algorithm/equation&lt;/li&gt;
  &lt;li&gt;The name of the file that will be gnenerated and played (can be whatever, I usually go with test)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./bytebeat.sh &quot;(t/4)*(t&amp;gt;&amp;gt;8|((14 &amp;amp; t)^3))&quot; test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This runs the bash script (&lt;code class=&quot;highlighter-rouge&quot;&gt;bytebeat.sh&lt;/code&gt;) and uses the Bytebeat algorithm/equation &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;(t/4)*(t&amp;gt;&amp;gt;8|((14 &amp;amp; t)^3))&quot;&lt;/code&gt; to generate the compiled C program &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;. This program &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; is then piped into sox and plays through the speakers. You‚Äôre done!&lt;/p&gt;

&lt;h3 id=&quot;record-it&quot;&gt;Record it!&lt;/h3&gt;

&lt;p&gt;There are two ways you can save the audio you‚Äôve created. One is fairly user friendly and the other one is a bit clunky.&lt;/p&gt;

&lt;p&gt;The easiest way is to download and install Rogue Amoeba‚Äôs &lt;a href=&quot;https://rogueamoeba.com/loopback/&quot;&gt;Loopback&lt;/a&gt; to record your system audio. THis is very simple and highly recommend it.&lt;/p&gt;

&lt;p&gt;If for whatever reason that doesn‚Äôt work for you, you can create a raw audio file on your computer and use &lt;a href=&quot;https://www.audacityteam.org/&quot;&gt;Audacity&lt;/a&gt; to open it. This may not output exactly what you heard when playing it using the bash script, but it may yield some cool variations.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run your script to create the compiled Bytebeat script (give it a proper name instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; if that‚Äôs easier to find). Within your folder, you should find a file of that name.&lt;/li&gt;
  &lt;li&gt;Send the output of this newly compiled script to a file instead of piped to SoX. (NOTE: This can create endlessly large files on your computer and possibly eat up all empty memory if you don‚Äôt stop it quickly. To avoid this, cancel (ctrl + C) the process around a half-second to a second after you start it.) To do this, write this in your shell, assuming your newly compiled file is called &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; and the output file is called &lt;code class=&quot;highlighter-rouge&quot;&gt;output.raw&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;./test &amp;gt; output.raw&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;As said before, you will want to cancel this process very quickly after you start it with ctrl + C, as it can otherwise create a massive file.&lt;/li&gt;
  &lt;li&gt;Open Audacity. Select &lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Import&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Raw Data...&lt;/code&gt; and choose your newly output file (&lt;code class=&quot;highlighter-rouge&quot;&gt;output.raw&lt;/code&gt; in our example). Use the following settings in the dialog box:
    &lt;ul&gt;
      &lt;li&gt;Encoding: Unsigned 8-bit PCM&lt;/li&gt;
      &lt;li&gt;Byte Order: No endianness&lt;/li&gt;
      &lt;li&gt;Channels: 1 (Mono)&lt;/li&gt;
      &lt;li&gt;Start Offset: 0&lt;/li&gt;
      &lt;li&gt;Amount to Import: 100&lt;/li&gt;
      &lt;li&gt;Sample Rate: 8000&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Listen to your hideous creation.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;other-resourcesimplementations&quot;&gt;Other Resources/Implementations&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;C and Python: &lt;a href=&quot;http://royal-paw.com/2012/01/bytebeats-in-c-and-python-generative-symphonies-from-extremely-small-programs/&quot;&gt;http://royal-paw.com/2012/01/bytebeats-in-c-and-python-generative-symphonies-from-extremely-small-programs/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Python: &lt;a href=&quot;https://gist.github.com/bzamecnik/a2d45dc0addb8d602d70b1d8df0f9fd0&quot;&gt;https://gist.github.com/bzamecnik/a2d45dc0addb8d602d70b1d8df0f9fd0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- --- 

- _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>The point of diminishing returns is already here</title>
   <link href="http://milofultz.com/2020/11/09/the-point-of-diminis"/>
   <updated>2020-11-09T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/11/09/the-point-of-diminis</id>
   <content type="html">&lt;p&gt;The point of diminishing returns is well before we think it is. What is the point of a crazy fast computer when most of what you do is send messages to people and read text? We were able to download and watch videos on our computer 15 years ago and were only limited by internet speed. Now we have it all and we want more for some reason. Is convenience via minimal time saved with a faster piece of hardware worth the money, your time, and the waste it makes?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://idlewords.com/talks/web_design_first_100_years.htm&quot;&gt;Here is the talk that got me really thinking about this today.&lt;/a&gt;&lt;/p&gt;

&lt;!-- - _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>Rules for Hanafuda game &quot;Koi-Koi&quot;</title>
   <link href="http://milofultz.com/2020/11/01/koi-koi-rules"/>
   <updated>2020-11-01T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/11/01/koi-koi-rules</id>
   <content type="html">&lt;p&gt;&lt;em&gt;All text pulled from Nintendo‚Äôs PDF online for a much easier to read page&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Koi-Koi is a two-player game that is played
with Hanafuda cards. It requires a sharp
mind, strategic thinking, and risk-taking in
the spirit of friendly competition. It is truly a
classic brain training game.&lt;/p&gt;

&lt;h3 id=&quot;goal&quot;&gt;Goal:&lt;/h3&gt;

&lt;p&gt;The goal of Koi-Koi is to earn points by
making sets as fast as you can. Unlike
poker, whoever makes a set first can win a
game. A full session is 12 games, and the
player with the most points after 12 games
is the winner.&lt;/p&gt;

&lt;h3 id=&quot;choosing-a-dealer&quot;&gt;Choosing a Dealer:&lt;/h3&gt;

&lt;p&gt;Players will choose one of the cards face
down, and the player who has the earliest
month card becomes the dealer (also
called ‚Äúoya,‚Äù meaning ‚Äúparent‚Äù), who takes
their turn first. Try not to choose the
‚Äúparent‚Äù in any other way, as this is the
authentic way of choosing the dealer in
Koi-Koi&lt;/p&gt;

&lt;h3 id=&quot;playing-the-game&quot;&gt;Playing the Game&lt;/h3&gt;

&lt;p&gt;The dealer will deal two cards at a time in
order of the player, field, and dealer. Deal
eight cards face down for each player, and
eight cards face up in the field in-between.
Place the remaining deck of cards to the
side of the field face down&lt;/p&gt;

&lt;p&gt;After the players look at their cards, the
game will begin with the first player (the
dealer) taking one card from their hand
and placing it face up on the field. If the
card matches the month of any of the
cards on the field, the dealer takes the pair.
If there are no matching cards on the field,
that card will remain on the field face up.
The player will then pick a card from the
top of the remaining deck, and again if
there is a card of a matching month on the
field, the two cards will become a matching
pair. If not, the card will be placed on the
field face up. The player takes the
matching pairs, if they have any. and
places them face up in front of them,
ending their turn.&lt;/p&gt;

&lt;p&gt;Continue to take turns playing until one of
the players comes up with a set. Tally the
points scored for that set, and continue
playing with a new game, with the winner
becoming the dealer. If either player is
unable to make a set and their cards run
out, the game is a draw and the other player
becomes the dealer in the next game.&lt;/p&gt;

&lt;h3 id=&quot;the-koi-koi&quot;&gt;The Koi-Koi&lt;/h3&gt;

&lt;p&gt;After you make a set you can either end the
game there and earn the points for that one
set, or if you think you can get another, you
can call ‚ÄúKoi-Koi!‚Äù and keep playing to get
another set. Be careful though, because if
your opponent makes a set after you call
Koi-Koi before you make your second set,
the other player will double their points, and
the game will end. Koi-Koi can only be
called once per game.&lt;/p&gt;

&lt;h4 id=&quot;multipliers&quot;&gt;Multipliers&lt;/h4&gt;

&lt;p&gt;If your sets total 7 or more points in a single
game, you earn a multiplier and get double
points! This is where you can win big, so
rack those points up!&lt;/p&gt;

&lt;h3 id=&quot;lucky-hands&quot;&gt;Lucky Hands&lt;/h3&gt;

&lt;p&gt;If the sets below are already made in your
hand when the cards are first handed out,
that player wins these points and the next
game will begin.&lt;/p&gt;

&lt;h4 id=&quot;four-hands&quot;&gt;Four Hands&lt;/h4&gt;

&lt;p&gt;When there are four cards of the same
month: 6pts&lt;/p&gt;

&lt;h4 id=&quot;sticky&quot;&gt;Sticky&lt;/h4&gt;

&lt;p&gt;When there are four sets of two cards
fram the same month: 6pts&lt;/p&gt;

&lt;h4 id=&quot;special-card&quot;&gt;Special Card&lt;/h4&gt;

&lt;p&gt;The Chrysanthemum and Sake Cup card can be used
as a 10 or a 1 point card.&lt;/p&gt;

&lt;h3 id=&quot;the-sets&quot;&gt;The Sets&lt;/h3&gt;

&lt;p&gt;Obtaining one of these sets will earn you points and give you
the opportunity to claim victory, or call ‚ÄúKoi-Koi!‚Äù&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Kasu (Plains) - 10 Plain cards. 1 point. Each Additional 1P after.&lt;/li&gt;
  &lt;li&gt;Tanzaku (Ribbons) - 5 Ribbons. 1 point. Each Additional 1P after.&lt;/li&gt;
  &lt;li&gt;Tane (Animals) - 5 Animals. 1 point. Each Additional 1P after.&lt;/li&gt;
  &lt;li&gt;Ino-Shika-Cho (Boar-Deer-Butterfly) - Animal cards of Clover, Maple, Peony. 5 points.&lt;/li&gt;
  &lt;li&gt;Akatan (Red Poetry Ribbons) - All 3 red poetry ribbons. 6 points.&lt;/li&gt;
  &lt;li&gt;Aotan (Blue Ribbons) - All 3 blue ribbons. 6 points.&lt;/li&gt;
  &lt;li&gt;Sanko (3Brights) - 3 Bright cards not containing Rain man card. 6 points.&lt;/li&gt;
  &lt;li&gt;Ame-Shiko (Rain man) - 4Brights containing Rain man card. 8 points.&lt;/li&gt;
  &lt;li&gt;Shiko (4Brights) - 4 Bright cards not containing Rain man card. 10 points.&lt;/li&gt;
  &lt;li&gt;Goko (5Brights) - All 5 Bright cards. 15 points.&lt;/li&gt;
  &lt;li&gt;Tsuki-fuda (Monthly Cards) - All four cards in one group shown right on screen. 4 points.&lt;/li&gt;
  &lt;li&gt;Oya-Ken (Dealer‚Äôs Privilege) - If neither gets any Yaku, Dealer wins 6 points.&lt;/li&gt;
  &lt;li&gt;Bake-Fuda (Wild Card) - The animal card of Chrysanthemum (sake cup) can be regarded as a plain card as well. If you have this, 9 plain cards and this card will be the Yaku of Kasu.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;suits&quot;&gt;Suits&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Month&lt;/th&gt;
      &lt;th&gt;Suit/Plant&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;January&lt;/td&gt;
      &lt;td&gt;Pine&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;February&lt;/td&gt;
      &lt;td&gt;Plum Blossom&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;March&lt;/td&gt;
      &lt;td&gt;Cherry Blossoms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;April&lt;/td&gt;
      &lt;td&gt;Wisteria&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;May&lt;/td&gt;
      &lt;td&gt;Iris&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;June&lt;/td&gt;
      &lt;td&gt;Peony&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;July&lt;/td&gt;
      &lt;td&gt;Clover&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;August&lt;/td&gt;
      &lt;td&gt;Pampas&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;September&lt;/td&gt;
      &lt;td&gt;Chrysanthemum&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;October&lt;/td&gt;
      &lt;td&gt;Maple&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;November&lt;/td&gt;
      &lt;td&gt;Willow&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;December&lt;/td&gt;
      &lt;td&gt;Paulownia&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;http://milofultz.com/assets/fudasuits.png&quot; alt=&quot;Suits of Hanafuda&quot; /&gt;&lt;/p&gt;

&lt;!-- --- 

- _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>üìä Tablatal Parser - Plaintext Database to JSON (Python)</title>
   <link href="http://milofultz.com/2020/10/31/tablatal-parser"/>
   <updated>2020-10-31T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/10/31/tablatal-parser</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/milofultz/tablatal_parser&quot;&gt;&lt;strong&gt;Check out the up-to-date version on GitHub&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I‚Äôm rethinking my Track and Tod apps for tracking my tasks, mood, and other
data after checking out &lt;a href=&quot;https://avanier.now.sh/w/log.html&quot;&gt;Josh Avanier‚Äôs Log&lt;/a&gt;,
&lt;a href=&quot;https://v-os.ca/timekeeping&quot;&gt;V‚Äôs Log&lt;/a&gt;, 
&lt;a href=&quot;https://wiki.xxiivv.com/site/horaire.html&quot;&gt;Devine Lu Linvega‚Äôs Horaire&lt;/a&gt; and
others. I am determined to keep my log plaintext and was not
satisfied with options like CSV or TSV, as they look terrible when reading
in a plain text editor. I eventually found 
&lt;a href=&quot;https://wiki.xxiivv.com/site/tablatal.html&quot;&gt;Devine‚Äôs Tablatal&lt;/a&gt; and am looking
forward to using it with my system.&lt;/p&gt;

&lt;p&gt;From Devine‚Äôs site: ‚ÄúIn the Tablatal file, the first line declares the key, the
spacing between each key defines the length of the parameters for all
subsequent lines.‚Äù It is a much more aesthetically pleasing plaintext data
format, though the tradeoff is malleability, as you must define how large
the field sizes are before getting going (I‚Äôll solve this with some kind of
utility if it ever comes up as a problem).&lt;/p&gt;

&lt;p&gt;There is both a to- and from-Tablatal utility. Both use a list of dicts as
their starting point, but can also be used directly in the CLI to interface
with JSON files.&lt;/p&gt;

&lt;h3 id=&quot;syntax&quot;&gt;Syntax&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Comments are preceded by a semicolon.&lt;/li&gt;
  &lt;li&gt;The header line is expected to be all caps and may be preceded by a
semicolon as if a comment. The spacing of this header line sets the spacing
for all content that follows.&lt;/li&gt;
  &lt;li&gt;The content is everything that follows the header line. Empty fields
default to None.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples can be found 
&lt;a href=&quot;https://github.com/XXIIVV/oscean/tree/master/src/database&quot;&gt;here at neauoire‚Äôs page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;p&gt;As a CLI, the parser takes in a plaintext Tablatal file (&lt;code class=&quot;highlighter-rouge&quot;&gt;tbtl&lt;/code&gt;) and
returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt; file. There is one optional argument &lt;code class=&quot;highlighter-rouge&quot;&gt;--headers&lt;/code&gt;, which
you can supply a set of custom headers separated by commas for the parser
to use when outputting. For instance, if the beginning of your file
including your headers looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;; The horaire is a collection of logs.
; https://wiki.xxiivv.com/site/tablatal.html
;     CODE HOST                 PIC NAME
;     7    12                   33  37
20X09 +300 talk                     Talk at Speakers Series, SNSYC
20X07 +300 talk                     Grundlagen der digitalen Kommunikation
20V08 -332 orca
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The header line is started by a semicolon, which would obfuscate the parser
from giving it a useful name. This can be remedied via the CLI:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python3 tbtl_parse.py input.tbtl output.json --headers &quot;DATE, CODE, HOST, PIC,
 NAME&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The JSON-to-Tablatal parser needs a little user input to determine the
 order of the fields, but otherwise operates the same as the other utility.&lt;/p&gt;

&lt;!-- --- 

- _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>üíª HIITimer - Exercise Timer w/Routines and TTS (Python)</title>
   <link href="http://milofultz.com/2020/10/25/hiitimer"/>
   <updated>2020-10-25T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/10/25/hiitimer</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/milofultz/hiitimer&quot;&gt;&lt;strong&gt;Check out the up-to-date version on GitHub&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I made a basic HIIT timer so I wouldn‚Äôt have to rely on online pages and 
really terrible HIIT phone apps that do too much for me anyway. It‚Äôs the
bare minimum:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Say (with TTS) and display the current state of the routine (exercise 
name, rest, upcoming exercise)&lt;/li&gt;
  &lt;li&gt;Make your routine on the fly&lt;/li&gt;
  &lt;li&gt;Load up created plaintext routines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It doesn‚Äôt do anything else and there is no reason I can find for it to 
do anything more.&lt;/p&gt;

&lt;h3 id=&quot;preset-routines&quot;&gt;Preset Routines&lt;/h3&gt;

&lt;p&gt;Preset routines can be loaded into HIITimer with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; flag followed 
by the filename:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 hiitimer.py -f preset1.hiit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are four fields necessary for a successful routine file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exercises:&lt;/code&gt; - A list of exercises which will comprise one rep. This 
list is comprised of an &lt;code class=&quot;highlighter-rouge&quot;&gt;exercises:&lt;/code&gt; line, followed by an exercise on
each subsequent line.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exercise_time:&lt;/code&gt; - How long to spend on one exercise in seconds. This 
and all the following fields are to be comprised of the key and value on
the same line.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rest_time:&lt;/code&gt; - How long to spend resting between exercises in seconds.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reps:&lt;/code&gt; - How many cycles of the list of exercises to do in total.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The parser overlooks blank lines and lines that begin with &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2020/05/25/exercise-routine&quot;&gt;A sample routine that I created&lt;/a&gt; looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Sample Exercise Routine 1

exercises:
	Pushups
	Squats
	Plank
	Jumping Jacks

exercise_time: 30

rest_time: 10

reps: 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;This program and all the TTS has only been tested on OSX, so please let
me know if you get any errors, as I‚Äôd love to figure it out :)&lt;/em&gt;&lt;/p&gt;

&lt;!-- - _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>HTML / CSS / JS Resources</title>
   <link href="http://milofultz.com/2020/10/21/html-css-js"/>
   <updated>2020-10-21T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/10/21/html-css-js</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://codingheroes.io/resources/&quot;&gt;Jonas Schmedtmann‚Äôs Coding Resources&lt;/a&gt; - Chock full of good resources and helpful links for all of these.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;HTML&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.shayhowe.com/html-css/&quot;&gt;Learn to Code HTML &amp;amp; CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://secretgeek.github.io/html_wysiwyg/html.html&quot;&gt;This page is a truly naked, brutalist html quine.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;CSS&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://adamwathan.me/css-utility-classes-and-separation-of-concerns/&quot;&gt;CSS Utility Classes and ‚ÄúSeparation of Concerns‚Äù&lt;/a&gt; - Going over the differences between semantic CSS and ‚Äúfunctional‚Äù CSS, where reuse and ease of understanding is paramount.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.shayhowe.com/html-css/&quot;&gt;Learn to Code HTML &amp;amp; CSS&lt;/a&gt; - Good overview of the basics of HTML and CSS design (pre-Flex or Grid systems).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.udemy.com/course/advanced-css-and-sass/&quot;&gt;Advanced CSS &amp;amp; Sass&lt;/a&gt; - Shows best practices in structure, design, implementation, and working through problems, taught by Jonas Schmedtmann.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jrl.ninja/etc/1/&quot;&gt;58 bytes of css to look great nearly everywhere&lt;/a&gt; - It‚Äôs like a hyper-minimal version of &lt;a href=&quot;http://getskeleton.com/&quot;&gt;Skeleton CSS&lt;/a&gt;. Does one thing really well, but if that‚Äôs what you need, it‚Äôs perfect.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jgthms.com/web-design-in-4-minutes/&quot;&gt;Web Design in 4 minutes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;JS&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.udemy.com/course/modern-javascript-from-the-beginning/&quot;&gt;Modern JavaScript From The Beginning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- - _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>üíª Tod - Plan and Manage Daily Tasks In The CLI (Python)</title>
   <link href="http://milofultz.com/2020/10/17/tod-python"/>
   <updated>2020-10-17T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/10/17/tod-python</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/milofultz/tod&quot;&gt;&lt;strong&gt;Check out the up-to-date version on GitHub&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Plan and manage daily tasks. Deliberately simple so I can stay focused on what I need to do.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Saves tasks in an easy to read plaintext file in the root folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.tod&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Includes built in timer for timeboxing/focused work time&lt;/li&gt;
  &lt;li&gt;Pulls most recent MIT from &lt;a href=&quot;/2020/10/12/track-python&quot;&gt;Track&lt;/a&gt; when starting a new set of daily tasks&lt;/li&gt;
  &lt;li&gt;Allows pulling of completed tasks for &lt;a href=&quot;/2020/10/12/track-python&quot;&gt;Track‚Äôs&lt;/a&gt; accomplishment tracking&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Tasks on screen are shown as below. On the left is the task number, followed by the task name, and lastly the time spent on that task so far, if any. Time spent can be changed manually or can be changed automatically through use of the timer. A green task represents a completed task.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://milofultz.com/assets/20201017tod/tod1.png&quot; /&gt;
&lt;img src=&quot;http://milofultz.com/assets/20201017tod/tod2.png&quot; /&gt;&lt;/p&gt;

&lt;!-- - _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>Friends don't let friends look at pageviews</title>
   <link href="http://milofultz.com/2020/10/16/friends-dont"/>
   <updated>2020-10-16T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/10/16/friends-dont</id>
   <content type="html">&lt;p&gt;‚ÄúFriends don‚Äôt let friends look at pageviews. Ever.‚Äù - Avinash Kaushik (&lt;em&gt;from Algorithms To Live By&lt;/em&gt;)&lt;/p&gt;

&lt;!-- - _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>üíª Track - Daily Journal and Log (Python)</title>
   <link href="http://milofultz.com/2020/10/12/track-python"/>
   <updated>2020-10-12T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/10/12/track-python</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/milofultz/track&quot;&gt;&lt;strong&gt;Check out the up-to-date version on GitHub&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wanted to have a way to track my mood and accomplishments over time, keep track of my priority for the next day, as well as a basic journaling platform that was not pretentious or leading. Seemed like a good project and I had seen a few people on &lt;a href=&quot;http://merveilles.town&quot;&gt;http://merveilles.town&lt;/a&gt; making some fun CLI tools in this vein, so I took a swing at it.&lt;/p&gt;

&lt;p&gt;Inspo from &lt;a href=&quot;https://github.com/0xdstn/lon&quot;&gt;lon by dstn&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tracks mood, accomplishments, journal entries, and MIT for next day&lt;/li&gt;
  &lt;li&gt;Saves data in an easy to read plaintext file in the root folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.track&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Integrates with &lt;a href=&quot;/2020/10/17/tod-python&quot;&gt;Tod&lt;/a&gt; to pull in completed accomplishments&lt;/li&gt;
  &lt;li&gt;Allows pulling of MIT into &lt;a href=&quot;/2020/10/17/tod-python&quot;&gt;Tod‚Äôs&lt;/a&gt; task list&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;p&gt;On prompting, input:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Your mood on a 1-5 scale.&lt;/li&gt;
  &lt;li&gt;Your accomplishments for the day. When finished, leave the line blank and press enter.&lt;/li&gt;
  &lt;li&gt;Your most important task for the next day.&lt;/li&gt;
  &lt;li&gt;A 50 character or less summary of your day.&lt;/li&gt;
  &lt;li&gt;A longer journal entry of anything you feel is relevant.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will save this data into a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;.track&lt;/code&gt; in your root folder, formatted like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
20201011 (4) Spend time on programming, exercise, and work.

* Write daily tracker program
* Exercise with 1.5hr walk
* Brainstorm programming projects
* Vote in election

&amp;gt; Prepare for next week and resolve all open tasks

I walked farther south than I have since moving here, and I really like how quiet
the side streets are.

Been listening to vogue ball playlists all night.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- - _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>üéß Sleep Realms (Paulstretch)</title>
   <link href="http://milofultz.com/2020/10/12/sleep-realms"/>
   <updated>2020-10-12T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/10/12/sleep-realms</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ie5z6AsEMQU&quot;&gt;&lt;img src=&quot;https://i.ytimg.com/vi/ie5z6AsEMQU/hqdefault.jpg&quot; alt=&quot;Sleep Realms&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ie5z6AsEMQU&quot;&gt;Listen here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to get better at Star Realms, listen to this while you sleep and it will increase your ability to win by 341%.&lt;/p&gt;

&lt;p&gt;Used &lt;a href=&quot;http://hypermammut.sourceforge.net/paulstretch/&quot;&gt;Paulstretch&lt;/a&gt; that is built in to &lt;a href=&quot;https://www.audacityteam.org/&quot;&gt;Audacity&lt;/a&gt;.&lt;/p&gt;

&lt;!-- - _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>The Two-Minute Rule</title>
   <link href="http://milofultz.com/2020/10/04/two-minute-rule"/>
   <updated>2020-10-04T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/10/04/two-minute-rule</id>
   <content type="html">&lt;p&gt;I‚Äôm a big self-help junkie and there honestly isn‚Äôt a lot that I feel I have taken action and eventually has stuck. Usually it‚Äôs a lot of ‚Äúshould‚Äùing about random things in my life that in hindsight is not that big of a deal. Or it‚Äôs &lt;a href=&quot;https://tjcx.me/posts/defense-self-help/&quot;&gt;stuff that makes a real difference but is really hard[1]&lt;/a&gt;, which means a lot more work.&lt;/p&gt;

&lt;p&gt;But one thing has amazingly made it through this filter in the background, being both successful and impactful in my life: the Two-Minute Rule from Getting Things Done.&lt;/p&gt;

&lt;p&gt;It‚Äôs simple and has been tossed around in a zillion different books by a billion different people under just as many names (thirty-second rule, five-minute rule). Essentially, &lt;strong&gt;if it takes less that two minutes to do, do it now&lt;/strong&gt;. It‚Äôs so easy and honestly is such a small time investment, it somehow just happened for me. And even better, when something does fall through the cracks even though I know it will only take a couple of minutes, this now &lt;em&gt;means&lt;/em&gt; something. It means that this task or to-do has some emotional weight that I need to deal with, and at least I‚Äôve made it easier to see this and now actionable.&lt;/p&gt;

&lt;p&gt;The thing that I like most about this is that it‚Äôs not about ‚Äú‚Äúgetting things done‚Äù (particularly for the &lt;em&gt;sake&lt;/em&gt; of getting things done, which is the worst), it‚Äôs about closing open loops. I realized I ran around all day seeing these open loops and it weighted me down: a dirty dish, unopened mail, a difficult email, etc. Using this rule helps with the toughest part of completing these difficult tasks: &lt;strong&gt;starting&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;References:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://tjcx.me/posts/defense-self-help/&quot;&gt;https://tjcx.me/posts/defense-self-help/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- - _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>Trying to become reacquainted with being bored</title>
   <link href="http://milofultz.com/2020/10/04/doing"/>
   <updated>2020-10-04T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/10/04/doing</id>
   <content type="html">&lt;p&gt;During quarantine, I‚Äôve been trying to just be bored and not constantly DO things and it‚Äôs weird how hard that is. Blah blah, every complaint about technology bad. But that aside, I &lt;em&gt;do&lt;/em&gt; like techology and love spending time with it. And trying to reconcile these two things in particular has been difficult.&lt;/p&gt;

&lt;p&gt;Tech has had a weird hold on me since I was a kid, and it has been what I have always wanted to spend my time doing. But I felt like I was also getting signals from various places that technology was bad and I shouldn‚Äôt spend so much time on it, probably a recoil from video games and the like.&lt;/p&gt;

&lt;p&gt;So now looking back, I think my reticence was due to a conflict between my love of tech and the avoidance of doing ‚Äúthe bad thing‚Äù, in this case, ‚Äúwaste my life‚Äù on computers, etc. Realizing this recently has led to a feverish pursuit of so many things I have pursued but guiltily so for years: programming, video games, and electronics in general.&lt;/p&gt;

&lt;p&gt;During these COVID times, I couldn‚Äôt have really asked for a better hobby than sitting on a computer and creating things alone in a room. However, these times of reclusivity also create this problem where I find I can‚Äôt let it go and I have to keep &lt;em&gt;working&lt;/em&gt; because I ‚Äúshould‚Äù or ‚Äúelse‚Äù ‚Äúsomething‚Äù might happen.&lt;/p&gt;

&lt;p&gt;So now I am on a quest to try and be bored more. Like not do anything for as long as possible until I feel an &lt;strong&gt;urge&lt;/strong&gt; to do it or a really strong desire, and not just a tiny pinprick of discomfort. At this point, I am completely out of practice, but I‚Äôm excited to see how this develops and if this space leaves me a bit more relaxed and mindful.&lt;/p&gt;

&lt;!-- - _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 
 <entry>
   <title>üíª Maximize Evernote Storage Using Web Clipper (JS)</title>
   <link href="http://milofultz.com/2020/09/30/evernote-images"/>
   <updated>2020-09-30T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/09/30/evernote-images</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/milofultz/no-images&quot;&gt;&lt;strong&gt;Check out the up-to-date version on GitHub&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When using Evernote‚Äôs web clipper, I was using too much of my upload cap with Evernote every month, mostly because images are too big when cropping the whole article. So I decided to practice some JS and see if I could make it work better without paying an $8 per month subscription for just a few extra megs of upload per month.&lt;/p&gt;

&lt;p&gt;On an average article with supporting (but not necessarily useful) pictures, I‚Äôve seen about a &lt;strong&gt;90%+ reduction&lt;/strong&gt; in note sizes.&lt;/p&gt;

&lt;p&gt;This extension has been tested to work on the ‚ÄúArticle‚Äù, ‚ÄúSimplified Article‚Äù, and ‚ÄúFull Page‚Äù options.&lt;/p&gt;

&lt;h2 id=&quot;cheap-and-easy-no-install-browser-agnostic-version&quot;&gt;Cheap and Easy No-Install Browser Agnostic Version&lt;/h2&gt;

&lt;p&gt;In the console of your browser, type the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;document.querySelectorAll('img').forEach(image =&amp;gt; image.remove());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To reset this, reload your page.&lt;/p&gt;

&lt;h2 id=&quot;chrome-extension&quot;&gt;Chrome Extension&lt;/h2&gt;

&lt;p&gt;This extension is really simple: on click, it goes through all the &lt;code class=&quot;highlighter-rouge&quot;&gt;img&lt;/code&gt; elements on the page and removes them from the DOM. On another click, the page is refreshed.&lt;/p&gt;

&lt;p&gt;The original implementation set the element‚Äôs display to &lt;code class=&quot;highlighter-rouge&quot;&gt;none&lt;/code&gt; on clicking the button again, all display settings for the images were set to their original value. Unfortunately, Evernote adds and modifies inline style on import, so it negated this otherwise more elegant implementation.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation:&lt;/h3&gt;

&lt;p&gt;To install this extension, please go to the Github page for updated information and instructions.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;20201007: Changed to avoid Evernote‚Äôs inline styling on import&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;20201030: Added average space savings&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>üíª Zentube - Youtube Lite w/Note Taking (HTML/CSS/JS)</title>
   <link href="http://milofultz.com/2020/09/26/zentube"/>
   <updated>2020-09-26T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/09/26/zentube</id>
   <content type="html">&lt;p&gt;&lt;em&gt;This was designed for desktop use only, so the user experience on mobile is really not great.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://milofultz.com/zentube/&quot;&gt;&lt;strong&gt;Try it out here&lt;/strong&gt;&lt;/a&gt; // &lt;a href=&quot;https://github.com/milofultz/zentube&quot;&gt;You can find the updated project and all necessary files here on GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wanted to be able to take notes on a Youtube video without having to tab out of the window to a text editor all of the time. After seeing Josh Avanier‚Äôs &lt;a href=&quot;https://down.avanier.now.sh&quot;&gt;Down&lt;/a&gt; and Hundred Rabbit‚Äôs &lt;a href=&quot;https://github.com/hundredrabbits/left&quot;&gt;Left&lt;/a&gt;, I realized I didn‚Äôt need to do anything fancy, and in fact I preferred the minimalist layout that vanilla JS can provide.&lt;/p&gt;

&lt;p&gt;This saves the text you write for a given Youtube video into local storage and will load it up again upon returning to the same video. Supports exporting to a text file and adding automatic timestamps.&lt;/p&gt;

&lt;p&gt;Borrowed/stole heavily from &lt;a href=&quot;http://getskeleton.com/&quot;&gt;Skeleton CSS&lt;/a&gt; and Josh Avanier‚Äôs &lt;a href=&quot;https://down.avanier.now.sh&quot;&gt;Down&lt;/a&gt; for code, stylesheets, and ideas.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;20210105: Overhauled the program a bit. Added a title and refactored the CSS a bunch. Changed the style on a few elements and added a webfont to look better than the stock one.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;20210106: Did some centering of the bottom editor in sub-1000px screens.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Mastodon</title>
   <link href="http://milofultz.com/2020/09/23/mastodon"/>
   <updated>2020-09-23T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/09/23/mastodon</id>
   <content type="html">&lt;p&gt;Been digging into Mastodon, as it brings all the good things I like about social media and none of the trash. &lt;a rel=&quot;me&quot; href=&quot;https://merveilles.town/@milofultz&quot;&gt;Find me there.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- 20201009: Moved to &lt;a href=&quot;https://merveilles.town&quot;&gt;https://merveilles.town&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Domine (game from Hundred Rabbits)</title>
   <link href="http://milofultz.com/2020/09/01/domine"/>
   <updated>2020-09-01T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/09/01/domine</id>
   <content type="html">&lt;p&gt;I recently came across this &lt;a href=&quot;https://www.youtube.com/watch?v=fjZb190qn00&quot;&gt;video&lt;/a&gt; from Hundred Rabbits of a game called Domine. Super simple game you can play with a set of dominoes. I transcribed the rules for this game from the video since it looks really fun and I can‚Äôt find the rules page anymore.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Equipment: Double 9 domino set&lt;/p&gt;

&lt;p&gt;Goal: To have the most ‚Äúliving‚Äù dominoes at the end of the round.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Each player draws a hand of seven dominoes and keeps them hidden from their opponent. The two numbers on either side of a domino are the attack and defense points, facing the opponent and the player respectively. The dominoes can be flipped as long as it‚Äôs before they are played.&lt;/li&gt;
  &lt;li&gt;Each turn consists of an attack using a domino and choosing which is the attack side and which is the defense.&lt;/li&gt;
  &lt;li&gt;Players alternate turns until all dominoes have been played. The player with the most living dominoes wins.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;attack-rules&quot;&gt;Attack Rules&lt;/h3&gt;

&lt;p&gt;When a player attacks with a domino, the opponent must defend with a value equal to or higher than the attack. If the opponent‚Äôs domino defense value is lower than the attack, the domino is killed. If the opponent‚Äôs domino defense value is equal to or higher, then they have survived. If the opponent can defend and has an attack number higher than the player‚Äôs domino defense value, the opponent can counter to kill the player‚Äôs domino. Double dominoes get first strike, regardless if they initiate the attack.&lt;/p&gt;

&lt;p&gt;Part of &lt;a href=&quot;/2020/06/25/inexpensive-games&quot;&gt;Inexpensive and Minimal Equipment Games To Spend Time On&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;20201127: Played as I finally got a hold of dominoes. Can it be played with playing cards?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>üíª Open A Random Note/Lo-Fi Idea Generator (Python)</title>
   <link href="http://milofultz.com/2020/08/26/random-note"/>
   <updated>2020-08-26T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/08/26/random-note</id>
   <content type="html">&lt;p&gt;For the last few months, I have been feeding my &lt;a href=&quot;/2020/05/22/zettelkasten&quot;&gt;Zettelkasten&lt;/a&gt; with essentially anything that I find interesting: programming, emotional development, quotes, productivity, book or video reviews, whatever. If I think it‚Äôs something that will help me or make me excited later, I put it in there.&lt;/p&gt;

&lt;p&gt;The problem I had was that even though I had these notes for reference, I wasn‚Äôt finding myself reviewing them just for creating those interesting and random connections, which was something that I had initially started using the Zettelkasten for. Those random connections are what creates interesting ideas and diffuse connections, as well as a spaced repetition for ideas that I already decided are worth knowing.&lt;/p&gt;

&lt;p&gt;I found a solution that was implemented by productivity dude and Twitter instigator Tiago Forte. Essentially, his ‚Äúsecond brain‚Äù, analogous to a Zettelkasten, is housed in Evernote, and he had &lt;a href=&quot;&quot;&gt;an app&lt;/a&gt; developed that would pop open a random Evernote every time he clicked it. He found that this boosted his creativity and because of how easy it was, he was able to do it between meetings, during his breaks, essentially in any spare moment. In doing some research, I found somebody who made a &lt;a href=&quot;&quot;&gt;random note Applescript for the Evernote app&lt;/a&gt; that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Applescript
tell application &quot;Evernote&quot;
	set noteList to find notes
	set randomNote to some item of noteList
	set query string of window 1 to (title of randomNote as string)
end tell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I figured it was just as simple of a task if you had your notes saved locally, which I do as text/Markdown files, so I set out to make a Python script that did this, along with an app implementation that can sit in my dock. I used the same process I did in my ‚Äú&lt;a href=&quot;/2020/07/22/make-python-apps&quot;&gt;Make Python ‚ÄòApps‚Äô and Shortcuts To Run Them on OSX&lt;/a&gt;‚Äù post, so obviously this is geared towards OSX users.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Create your Python script, replacing the paths and extension to yours:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import os
import random

folder = &quot;/path/to/notes&quot;
prog = &quot;/path/to/application.app&quot;
ext = &quot;txt&quot;

file_list = os.listdir(folder)
txt_list = [file for file in file_list if file.endswith(ext)]
random_file = random.choice(file_list)
random_fp = os.path.join(folder, random_file)
os.system('open &quot;{}&quot; -a &quot;{}&quot;'.format(random_fp, prog))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Save this file and name it whatever you like &lt;code class=&quot;highlighter-rouge&quot;&gt;.py&lt;/code&gt;, like &lt;code class=&quot;highlighter-rouge&quot;&gt;random_note.py&lt;/code&gt;. (I saved it where all my code projects are, but you could also create a folder in your Applications folder and stick it there)&lt;/li&gt;
  &lt;li&gt;Open Script Editor and make a new document. Ensure that AppleScript is selected in the dropdown menu in the upper left of the window.&lt;/li&gt;
  &lt;li&gt;Create your Applescript, replacing the paths and script name to yours:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;do shell script &quot;cd '/path/to/script'; python script_name.py&quot;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Save the script in your Applications folder as an ‚ÄúApplication‚Äù file format.&lt;/li&gt;
  &lt;li&gt;Put it on your dock and go wild.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I added a little light bulb icon on mine[6], as is tradition, and it is a great way to pass the time. I spent all this time curating ideas, recipes, thoughts, information, and experiences I thought were interesting, and now I can really enjoy the payoff in a very fun way.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;References:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;RandomNote app from Tiago Forte&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;RandomNote Web&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;random note Applescript for the Evernote app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2020/07/22/make-python-apps&quot;&gt;Make Python ‚ÄòApps‚Äô and Shortcuts To Run Them on OSX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Add icon&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>üéº Purple Rain Outro Transcription</title>
   <link href="http://milofultz.com/2020/08/22/purple-rain-outro"/>
   <updated>2020-08-22T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/08/22/purple-rain-outro</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/20200822PurpleRain.jpg&quot; alt=&quot;Purple Rain Outro Transcription&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=km6Ryvor5_k&quot;&gt;You can listen to it here on YouTube.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>üéß Soulja Realms</title>
   <link href="http://milofultz.com/2020/08/19/soulja-realms"/>
   <updated>2020-08-19T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/08/19/soulja-realms</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=xb6MV25Ktjc&quot;&gt;&lt;img src=&quot;https://i.ytimg.com/vi/xb6MV25Ktjc/maxresdefault.jpg&quot; alt=&quot;Soulja Realms&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=xb6MV25Ktjc&quot;&gt;Listen here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My brain started mashing together &lt;a href=&quot;https://www.youtube.com/watch?v=8UFIYGkROII&quot;&gt;Crank Dat Soulja Boy&lt;/a&gt; with the first Star Realms song and I could not stop until they were all combined into one dumb megamix. If you don‚Äôt know Star Realms or Soulja Boy, this probably won‚Äôt make much sense, but you should at least check out &lt;a href=&quot;https://www.starrealms.com/&quot;&gt;Star Realms&lt;/a&gt;, because it‚Äôs a great deck-building game and a fun app to pass the time.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>üéß Piu Piu ringtone but it's only Avgustina's laugh</title>
   <link href="http://milofultz.com/2020/08/04/piu-piu-ringtone"/>
   <updated>2020-08-04T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/08/04/piu-piu-ringtone</id>
   <content type="html">&lt;p&gt;I am starting a project to see how long my roommates and I can handle listening to Avgustina‚Äôs laugh as my text message notification sound. I set it to where it only does it when my partner messages me, but it should be horrible enough.&lt;/p&gt;

&lt;p&gt;You can download this atrocity as an m4r file &lt;a href=&quot;/assets/20200804PiuPiu.m4r&quot;&gt;here&lt;/a&gt;. Made using Mediahuman Audio Converter for OSX.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>üíª Awfulizer - Make Surfing The Web Awful (Firefox)</title>
   <link href="http://milofultz.com/2020/07/23/awfulizer"/>
   <updated>2020-07-23T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/07/23/awfulizer</id>
   <content type="html">&lt;p&gt;You can get the add-on &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/awfulizer/&quot;&gt;here&lt;/a&gt; and see the code on &lt;a href=&quot;https://github.com/milofultz/awfulizer&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=dx7hZAAHFuk&amp;amp;feature=youtu.be&quot;&gt;Watch a video of it in action.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While studying some CSS and HTML on &lt;a href=&quot;https://www.freecodecamp.org/&quot;&gt;FreeCodeCamp&lt;/a&gt;, I was trying to figure out how I could exercise some of the skills I was learning. One of the basics of CSS is just changing style of fonts and backgrounds, so I figured why not try and make some program that cycles all of those over and over? I found that &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Your_first_WebExtension&quot;&gt;making your first extension is very easy&lt;/a&gt;, so I tried it. After a ton of trial and error, I made a button that allows you to manually turn it on on a given tab, but you can only turn it off through refreshing it. I‚Äôve added a static feature and the ability to choose (wow!) in v1.2. In the future, I‚Äôm hoping to add an option to turn it off once it starts.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;References:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Your_first_WebExtension&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Make Python 'Apps' and Shortcuts To Run Them on OSX</title>
   <link href="http://milofultz.com/2020/07/22/make-python-apps"/>
   <updated>2020-07-22T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/07/22/make-python-apps</id>
   <content type="html">&lt;p&gt;After experimenting with &lt;a href=&quot;https://pyinstaller.readthedocs.io/en/stable/&quot;&gt;PyInstaller&lt;/a&gt; and &lt;a href=&quot;https://sveinbjorn.org/platypus&quot;&gt;Platypus&lt;/a&gt; to create a standalone app in OSX with no success, I went the much lower fidelity route. But it was successful, so I‚Äôm happy with it. YOu can see the script I made &lt;a href=&quot;https://github.com/milofultz/email_service/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The goal of this was first to make a standalone app that will run Python script, but second to assign it to a keystroke. I have only tested this with running a Python script, but I can‚Äôt imagine it would be much more difficult for any other bash script. So here is the process:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open Script Editor (in Applications/Utilities).&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;do shell script&lt;/code&gt; command, add the script you want to run. Essentially, you‚Äôll want to write in what you normally put into the Terminal, separated by semicolons.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;do shell script &quot;cd 'path/to/script'; source venv/bin/activate; python main.py&quot;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Save this as an Application to your Applications folder (or wherever makes sense).&lt;/li&gt;
  &lt;li&gt;Close Script Editor. &lt;em&gt;(If you don‚Äôt want to add a shortcut, you can stop here)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Open Automator (in Applications).&lt;/li&gt;
  &lt;li&gt;Create a ‚ÄúQuick Action‚Äù or ‚ÄúService‚Äù, whatever one your OS says.&lt;/li&gt;
  &lt;li&gt;In the top bar, set the following setting: Workflow receives current &lt;strong&gt;no input&lt;/strong&gt; in &lt;strong&gt;any application&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;In the column second from the left, drag the ‚ÄúLaunch Application‚Äù task into the ‚ÄúDrag actions or files here‚Äù area.&lt;/li&gt;
  &lt;li&gt;Select your application within that dropdown menu.&lt;/li&gt;
  &lt;li&gt;Save this with a memorable name.&lt;/li&gt;
  &lt;li&gt;Close Automator.&lt;/li&gt;
  &lt;li&gt;Open System Preferences and go to ‚ÄúKeyboard‚Äù.&lt;/li&gt;
  &lt;li&gt;Within this window, click ‚ÄúShortcuts‚Äù.&lt;/li&gt;
  &lt;li&gt;Click on the ‚ÄúServices‚Äù menu on the left hand side.&lt;/li&gt;
  &lt;li&gt;Scroll to the bottom of the right window until you see your new service you created.&lt;/li&gt;
  &lt;li&gt;Double-click where it says ‚Äònone‚Äô and set a new shortcut (make sure it‚Äôs unique and won‚Äôt conflict with other programs or special characters. I chose &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+opt+shift+A&lt;/code&gt;). 
&lt;strong&gt;NOTE: If you don‚Äôt do the following steps, your shortcut will not work.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Close your System Preferences.&lt;/li&gt;
  &lt;li&gt;Click on Finder in your dock.&lt;/li&gt;
  &lt;li&gt;Open the Finder dropdown menu and go into Services. Click on your new service to run it manually.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.makeuseof.com/tag/applescript-bash-scripts-apps/&quot;&gt;https://www.makeuseof.com/tag/applescript-bash-scripts-apps/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://discussions.apple.com/thread/5048120&quot;&gt;https://discussions.apple.com/thread/5048120&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Create a better program faster with an outline V2</title>
   <link href="http://milofultz.com/2020/07/18/programming-outline"/>
   <updated>2020-07-18T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/07/18/programming-outline</id>
   <content type="html">&lt;p&gt;Like before, &lt;strong&gt;stay in abstract thinking as long as possible. The longer you take to implement your concepts, the better.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;big-overview&quot;&gt;Big Overview:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Understanding the Problem&lt;/li&gt;
  &lt;li&gt;Breaking It Down&lt;/li&gt;
  &lt;li&gt;Inspection&lt;/li&gt;
  &lt;li&gt;Development/Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;understanding-the-problem&quot;&gt;Understanding the Problem&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Describe what the problem is in abstract terms as clearly as you can. What is the thing that you can‚Äôt do or isn‚Äôt happening right now?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Describe the solution to this problem in abstract terms as the desired result. Don‚Äôt worry about the how yet, just what the result will be.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Describe in abstract terms what things the program will do, as if it was a person doing it, not a computer. What are all of the smaller tasks within this bigger problem/solution?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;From there, describe how your program will handle data on the way in and the way out (not within the program). What do you as the user want to give it and what do you want it to spit back out? Like when you give the dry cleaner your clothes: input is dirty clothes, output is clean clothes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;breaking-it-down&quot;&gt;Breaking It Down&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Break down the process further in abstract terms. What are the distinct actions the program will need to take to solve this problem? If you were asking a very pedantic person to do this task for you, what would you tell them?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the biggest distinct functions you can perceive in the description you just created?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Can you break these down further into sub-tasks? If so, go back to breaking it down (5.) in abstract terms until you can‚Äôt do it anymore.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With the many discrete functions you have, what data types would be best to give to and get from them?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make a very rough outline of each function in your program using information from chunking steps. Include only necessary in/out information (e.g. if you are wanting to eat and the data type is ‚Äòfood‚Äô and it will return ‚Äòpoop‚Äô: &lt;code class=&quot;highlighter-rouge&quot;&gt;def eat(food): return poop&lt;/code&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Within these functions, write out an overview for each function. Write again for this ultra pedantic person.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;See if you can break down elements of the functions into even smaller parts. The more that functions can be used and reused all around the whole program, the better.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;inspection&quot;&gt;Inspection&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Once the program has been broken down into its most atomistic functions, start writing pseudocode into them to have an idea of what you‚Äôre going to do.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Look again for similarities in between functions and see if there is any process the functions could share. If so, then take that and break it down into it‚Äôs own function.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When you feel it has been fully broken down and the flow of data makes sense, create a basic outline of how the different functions will flow together from beginning to the end of the program. Do the data types match? If not, can you use a different data type? Is an adaptation needed between one function and another?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;developmenttesting&quot;&gt;Development/Testing&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Make a basic way to develop each function and test it as it goes (in Python, by adding an &lt;code class=&quot;highlighter-rouge&quot;&gt;if __name__ == '__main__':&lt;/code&gt; section).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Figure out what is the easiest thing to program and test. Go with the pseudocode you‚Äôve written and start fleshing it out with real functionality. Test each part as you go in the terminal.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Repeat this process with each element of your code, ensuring that it works exactly as you expect. You don‚Äôt have to go in a linear fashion, if it is easier or more sensible to jump around.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Don‚Äôt be afraid to go back to previous steps if you realize further possibilities of chunking or other revisions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>üíª star_maker - a lo-fi ambient visual (Python)</title>
   <link href="http://milofultz.com/2020/07/08/star-maker"/>
   <updated>2020-07-08T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/07/08/star_maker</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/milofultz/star_maker&quot;&gt;You can visit the project and download the files on GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;star_maker is a lo-fi screen saver or ambient visual using blessed. I originally made it so I could make a star visual for &lt;a href=&quot;/2020/07/07/spacelove&quot;&gt;a page on my website&lt;/a&gt; and then mucked around and realized it offered me both a chance to mess around with &lt;a href=&quot;https://github.com/jquast/blessed&quot;&gt;blessed&lt;/a&gt; and a really funny but relatively simple challenge.&lt;/p&gt;

&lt;p&gt;It looks like &lt;a href=&quot;/2020/07/07/spacelove&quot;&gt;this&lt;/a&gt;, but much more interesting.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;20200708: Added color and more special characters&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;20200708: Added parallax effect in  c o l o r&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>üéß spacelove.xm - Made using an old E-MAX sample</title>
   <link href="http://milofultz.com/2020/07/07/spacelove"/>
   <updated>2020-07-07T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/07/07/spacelove</id>
   <content type="html">&lt;p class=&quot;stars&quot;&gt;&amp;nbsp;` &amp;nbsp; &amp;nbsp; ' . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; ` &amp;nbsp;. , &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; ` &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; . &amp;nbsp; + , ' &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp;. ` &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; + . &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp;` &amp;nbsp; &amp;nbsp;` ' ` &amp;nbsp; &amp;nbsp;, + &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. ` &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp;+ &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, , &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp;` &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp;. &amp;nbsp; ' &amp;nbsp; &amp;nbsp; . ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp;&quot; . &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp;+ &amp;nbsp;+ &amp;nbsp; &amp;nbsp;&quot; + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp;+ , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp;` &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; ` &quot; &quot; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; , . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; + . &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp;, ` &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; + ` &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp;. &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; + &amp;nbsp; + &amp;nbsp; + &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp; ' &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; . &quot; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; . &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; ' &amp;nbsp; &quot; &quot; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp;' &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp;. &amp;nbsp; &quot; &amp;nbsp; + . , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp;' . &amp;nbsp; , &amp;nbsp;&quot; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp;+ , &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; ` ` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp;, &amp;nbsp; &amp;nbsp; ` &amp;nbsp;` ` &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp;' &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp;. &amp;nbsp; &amp;nbsp; ' ` &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; . &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; + + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; , &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; + &amp;nbsp; ' + &amp;nbsp; &amp;nbsp; &amp;nbsp; + . + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp;. &amp;nbsp; &amp;nbsp; + &amp;nbsp;+ &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp;` &amp;nbsp; ' &amp;nbsp; &amp;nbsp;, &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp;' , ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp;, &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; , ` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp;` &amp;nbsp;+ &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; ' &quot; + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp;+ ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp;+ , . &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp; + &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; , &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, ' ' &amp;nbsp; ` &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &quot; &amp;nbsp;' &amp;nbsp;` &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; ` &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp;` &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; `&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;audio controls=&quot;&quot;&gt;
  &lt;source src=&quot;http://milofultz.com/assets/20200707spacelove.mp3&quot; type=&quot;audio/mpeg&quot; /&gt;
Your browser does not support the audio element.
&lt;/audio&gt;
&lt;p&gt;&lt;a href=&quot;http://milofultz.com/assets/20200707spacelove.xm&quot;&gt;Download the XM file here&lt;/a&gt; &lt;sub&gt;&lt;a href=&quot;http://modarchive.org/index.php?article-trackers#milkytracker&quot;&gt;What's an XM file and how do I open it?&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p class=&quot;stars&quot;&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp;+ &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; + &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; + &amp;nbsp; &amp;nbsp;+ &amp;nbsp;+ &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ ` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; + &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; + , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; + &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; . . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; ' &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; + ` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp;` &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` ` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; ' &amp;nbsp; . &amp;nbsp; &amp;nbsp; ` &amp;nbsp; + , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; + &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp;, &amp;nbsp;. &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp;' &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp;' &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp;&quot; &amp;nbsp; , &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; + &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, + &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp;&quot; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; , &quot; &amp;nbsp; ' &amp;nbsp; ' &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; , &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; ' &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp;, . &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp;' ` &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` ` &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp;' &amp;nbsp;&quot; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; + ' &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp;+ &amp;nbsp;. &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp;, &amp;nbsp;. &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp;+ &amp;nbsp; &amp;nbsp; ' ` &amp;nbsp;' &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; ' , &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; ` &amp;nbsp;+ &amp;nbsp; ` ' &amp;nbsp; &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; ' + &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp;' , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp;' &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; ' &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` , &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp;. &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp;' &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; + + &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; ' + &amp;nbsp;. &amp;nbsp; + + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp;+ &quot; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; , &amp;nbsp; &amp;nbsp;, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; + &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp;+ &amp;nbsp; , &amp;nbsp;, &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; ' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; + , &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` ' &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &quot; &amp;nbsp; . &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp;` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &quot; &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; &amp;nbsp; &amp;nbsp;, ` &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp;` &amp;nbsp; &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;. &amp;nbsp; &amp;nbsp;' , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&quot; &amp;nbsp; . &amp;nbsp; . &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp;+ &amp;nbsp; ` &amp;nbsp; &amp;nbsp; &amp;nbsp;, &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;, + &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;` ' &amp;nbsp; &amp;nbsp; , &amp;nbsp; &amp;nbsp; . &amp;nbsp;' &amp;nbsp; &amp;nbsp; &amp;nbsp;+ &amp;nbsp; &amp;nbsp;`&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>üíª Wordsmash Explosion - Mastermind With Words (Python)</title>
   <link href="http://milofultz.com/2020/07/03/wordsmash"/>
   <updated>2020-07-03T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/07/03/wordsmash</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/milofultz/wordmastermind&quot;&gt;You can visit the project and download the files on GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-game&quot;&gt;The Game&lt;/h2&gt;

&lt;p&gt;The easiest way to think of this game is as Mastermind but with words. &lt;a href=&quot;https://www.word-grabber.com/printable-word-games/a-mastermind-with-words-jotto&quot;&gt;You can see a more detailed explanation of the rules here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The program will pick a random 5 letter word that the user will try to guess. The user will guess a 5 letter word and the program will return how many of the letters from the user‚Äôs word exist in the random word. This process will repeat until the user guesses the word correctly.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;future-implementation&quot;&gt;Future Implementation&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Different word lengths as a measure of difficulty.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Options for keeping tabs on which letters you‚Äôve guessed.&lt;/del&gt; &lt;em&gt;Implemented 20200708&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Hints.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>üíª Bookmark Crawler - Make Internet More Fun (Python)</title>
   <link href="http://milofultz.com/2020/07/02/bmcrawl"/>
   <updated>2020-07-02T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/07/02/bmcrawl</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/milofultz/bmcrawl&quot;&gt;You can find the updated project and all necessary files here on GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;

&lt;p&gt;Search engines are too broad and do not serve people who search for interesting and curated content that does not have relevant keywords. For example, searching ‚ÄúDIY Projects‚Äù will not yield interesting results, as those SEO search terms are saturated by bigger scale organizations and make finding smaller creators and curators much more difficult. As the internet gets larger and larger, this will only be more of a problem with modern search engines, as their algorithm rewards good SEO and Alexa rankings, which is determined not necessarily by quality of content, but by linking and optimization.&lt;/p&gt;

&lt;p&gt;So if you want to find interesting and curated content regarding DIY projects, how can you find them? This is an experiment that utilizes given URL‚Äôs to create an extremely specific set of links based on the sites that you already like. Hopefully this will provide the user with new domains and pages to explore that are related and recommended within the provided pages.&lt;/p&gt;

&lt;h2 id=&quot;how&quot;&gt;How&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Take a single URL or a user‚Äôs bookmarks (exported from Firefox as an HTML file) and create a list of URLs to scrape.&lt;/li&gt;
  &lt;li&gt;Scrape each URL for links.&lt;/li&gt;
  &lt;li&gt;Allow process to repeat up to N degrees away from initial source URL.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Return an HTML file of new sites to explore.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;20201031 - On the backburner, but I hope to turn this into a browser plugin in the future&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Nobody Takes Advice</title>
   <link href="http://milofultz.com/2020/06/26/nobody-takes-advice"/>
   <updated>2020-06-26T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/06/26/nobody-takes-advice</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;‚ÄúThe great, unspoken secret of advice is that no one takes it. ‚Ä¶ People always just do exactly what they want to do in every scenario.‚Äù - Nicole Cliffe[1]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;References:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elle.com/life-love/advice/a46441/nicole-knows-how-do-i-support-my-friends-when-they-make-bad-choices/&quot;&gt;https://www.elle.com/life-love/advice/a46441/nicole-knows-how-do-i-support-my-friends-when-they-make-bad-choices/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Inexpensive and Minimal Equipment Games To Play</title>
   <link href="http://milofultz.com/2020/06/25/inexpensive-games"/>
   <updated>2020-06-25T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/06/25/inexpensive-games</id>
   <content type="html">&lt;p&gt;I‚Äôve always been interested in being frugal and wanted a repository of fun and inexpensive games to play by yourself and with others. Here‚Äôs a list of what I‚Äôve found.&lt;/p&gt;

&lt;h3 id=&quot;solo&quot;&gt;Solo&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://itch.io/t/54944/donsol-guide&quot;&gt;Donsol&lt;/a&gt; - Donsol is a solitaire card game made by John Eternal during Train Jam using a regular playing card deck. I found this on &lt;a href=&quot;https://www.youtube.com/watch?v=GNoZrr56GqA&quot;&gt;Hundred Rabbit‚Äôs Youtube channel&lt;/a&gt; and thought it looked like a fun game for solo play that made solitaire a lot more interesting. The rules are a bit confusing so be sure to watch the video and see them play it through.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Canfield_(solitaire)&quot;&gt;Canfield&lt;/a&gt; - When I was on a cruise ship for a week for a gig, I literally played this game for probably upwards of 7 hours and I think I won once. For some reason, I keep coming back to it.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://boardgamegeek.com/boardgame/1443/alpha-blitz&quot;&gt;Alpha Blitz&lt;/a&gt; - Not really a ‚Äúgame‚Äù but a good way to pass time. Find a word and then figure out the longest anagram you can using only those letters (lens = senselessness).&lt;/li&gt;
  &lt;li&gt;Hanafuda (solitaire) &lt;a href=&quot;http://hanafudahawaii.com/gsolitaire1.html&quot;&gt;v1&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://hanafudahawaii.com/gsolitaire2.html&quot;&gt;v2&lt;/a&gt; - Super satisfying as a human who loves pattern matching. Very helpful in developing knowledge of the cards and their suits, as having grown up with more easy to organize designs, it takes some getting used it. The deck of cards cost me $1.50 at a Daiso.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-player&quot;&gt;2+ Player&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.word-grabber.com/printable-word-games/a-mastermind-with-words-jotto&quot;&gt;Word Mastermind/Jotto&lt;/a&gt; - I played this a ton with a friend of mine in our down time in college. Super easy to play and you don‚Äôt really need anything except a paper and pencil, unless you have a good memory. It‚Äôs pretty much just the game mastermind but with words instead. &lt;a href=&quot;/2020/07/03/wordsmash&quot;&gt;I made a Python version of this, which you can find here.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Paper_football&quot;&gt;Paper Football&lt;/a&gt; - Aside from the obvious of kicking it, the tabletop play of this game is so fun and makes waiting in a place with a floor or table much more fun. All you need is some scrap paper and a surface.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Exquisite_corpse&quot;&gt;Exquisite Corpse&lt;/a&gt; - Total absurdity and chaos through drawing. Only need a pen and paper and will create a wide range of stuff, from silly pictures to nightmare fuel.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://athleticexplorations.com/en_US/ae96/&quot;&gt;Monkey Tree&lt;/a&gt; (&lt;a href=&quot;https://www.youtube.com/watch?v=hXVRyI2ULHI&quot;&gt;video&lt;/a&gt;) - This is almost a workout more than it‚Äôs a game, but nonetheless a fun way to spend time. One person stands arms out to their sides with legs wide, stable on the ground. The other person climbs on their back and finds ways to maneuver around them. Tougher than it seems, both physically and for your friendship.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2020/09/01/domine&quot;&gt;Domine&lt;/a&gt; (&lt;a href=&quot;https://www.youtube.com/watch?v=fjZb190qn00&quot;&gt;video&lt;/a&gt;) - Another one from Hundred Rabbits. All you need is a double 9 domino set. Super quick and fun!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gamedesign.jp/flash/hanafuda/rule_e.html&quot;&gt;Hanafuda (Koi Koi)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;20201031 - Added Hanafuda to both solo and 2+&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Quality and quantity's relevance to critical feeling</title>
   <link href="http://milofultz.com/2020/06/21/quantity-quality"/>
   <updated>2020-06-21T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/06/21/quantity-quality</id>
   <content type="html">&lt;p&gt;Quality is an attribute you give to help label something. Quantity is a measurement you use to help label something.&lt;/p&gt;

&lt;p&gt;Quality requires quantity for it to exist. One can‚Äôt measure how hard something is without two things to compare them to. Quantity requires quality for it to exist. One can‚Äôt measure something with which it has no label.&lt;/p&gt;

&lt;p&gt;To attribute a quality to something, it must be fully defined. One cannot attribute a quality to something without fully knowing what it is. In turn, one cannot measure something that has not been fully defined. What is 0 or 100 if one cannot define them?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This struck me as I was watching a video[1] and ended up with a discussion with a roommate about this relates to &lt;a href=&quot;/2020/06/10/critical-feeling&quot;&gt;critical feeling&lt;/a&gt;. As defined by Bret Weinstein[3], critical feeling is making sure that you don‚Äôt get caught up in other people‚Äôs feelings. One can use quality and quantity to more honestly trust your critical feeling in this way:&lt;/p&gt;

&lt;p&gt;When one is presented with a quality or label, either from another person or from within themselves, one must seek to define the quality as fully and completely as possible. For instance, if one is accused of being ‚Äúlazy‚Äù, one must define it, and preferably with whoever is making the accusation in mind. Once this quality is defined, one can then measure if they indeed hold this attribute, how much, and the impact this quality is having upon those affected, which could be themselves, their community, their family, or whatever. Once one has this information, one can truly understand the circumstances and be critical of the quality and it‚Äôs truthfulness in it‚Äôs application.&lt;/p&gt;

&lt;p&gt;If one cannot define the quality that is being attributed, they have no business attributing it. And if once defined, one cannot measure the impact the attribute has, then it is not important.&lt;/p&gt;

&lt;p&gt;I believe this exercise has the potential to avoid claims of essentialism[4] (all humans are bad/good, all X people are Y), to help ground accusations or problems in the realm of the logical and the real, and to present us with further action, instead of letting our brain buck or accept a quality that may or may not be useful or important.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;References:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/eOfVBqGPwi0?t=886&quot;&gt;https://youtu.be/eOfVBqGPwi0?t=886&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2020/06/10/critical-feeling&quot;&gt;Critical Feeling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=PfAumoTIeik&quot;&gt;https://www.youtube.com/watch?v=PfAumoTIeik&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Essentialism&quot;&gt;https://en.wikipedia.org/wiki/Essentialism&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Critical feeling is as important as critical thinking</title>
   <link href="http://milofultz.com/2020/06/10/critical-feeling"/>
   <updated>2020-06-10T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/06/10/critical-feeling</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;Critical feeling is making sure that you don‚Äôt get caught up in other people‚Äôs feelings.[1]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I like this idea a lot because it clarifies a problem that I have often had. My emotional conviction on my values and ethics have often been weak, untethered on clear principled thought, and thus I have been more susceptible to bandwagoning based on big emotions. There have been many times where I later found that my actions or thoughts were not honest to what I actually desired in the situation or believed and this I think was due to a lack of critical feeling.&lt;/p&gt;

&lt;p&gt;When it comes to critically thinking, the analysis of facts to form a judgment[2], I tend to be more skeptical in the points or ideas of others. I usually disagree with people until I run through the scenario sufficiently and fully understand and agree with what is being presented. Emotions tend to override this skepticism and sweep me up in the romantic nature of whatever is at hand. This I believe is due to a relatively weak understanding of my own emotions and what they are trying to communicate to me, as well as a lack of practice in working with them.&lt;/p&gt;

&lt;p&gt;The new question is how to practice and develop critical feeling. &lt;em&gt;(Update 20200622: I developed a method that you can find &lt;a href=&quot;/2020/06/21/quantity-quality&quot;&gt;here&lt;/a&gt;)&lt;/em&gt;. As for critical thinking, according to this article in the HBR[3], there are three things that can help you: question assumptions, reason through logic, and diversify thought. I believe these are the same, and for people like me who have had problems with their emotional development, this can include some really difficult practice, alone or with a guide (therapist, friend, family, etc.).&lt;/p&gt;

&lt;p&gt;In the last few months, I have been going to therapy weekly, devouring YouTube videos about philosophy[4][5][6], and talking a lot with my friends and family about more emotionally complex things, and I have noticed a much larger capacity to understand what is happening with my emotional state, and therefore maintain what I feel while also being able to empathize better with others.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;References:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=PfAumoTIeik&quot;&gt;https://www.youtube.com/watch?v=PfAumoTIeik&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Critical_thinking&quot;&gt;https://en.wikipedia.org/wiki/Critical_thinking&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hbr.org/2019/05/3-simple-habits-to-improve-your-critical-thinking&quot;&gt;https://hbr.org/2019/05/3-simple-habits-to-improve-your-critical-thinking&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/thephilosophytube/videos&quot;&gt;https://www.youtube.com/user/thephilosophytube/videos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/ContraPoints&quot;&gt;https://www.youtube.com/user/ContraPoints&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/alexjoconnor&quot;&gt;https://www.youtube.com/user/alexjoconnor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/2020/06/21/quantity-quality&quot;&gt;Quality and quantity‚Äôs relevance to critical feeling&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Simple + Minimal Exercise Routine</title>
   <link href="http://milofultz.com/2020/05/25/exercise-routine"/>
   <updated>2020-05-25T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/05/25/exercise-routine</id>
   <content type="html">&lt;p&gt;A couple of weeks ago, I worked on starting my &lt;a href=&quot;/2020/05/22/zettelkasten&quot;&gt;Zettelkasten&lt;/a&gt; and just to try it out and see how it worked, I started with exercise. Using it and a few resources, I was able to come up with a list of various strength, mobility, and flexibility exercises that target various areas and a very basic framework with which to apply them. I won‚Äôt be posting all the exercises here, but I will show the system, my focus areas, and my general guidelines it is based on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My dream is to be able to do this anywhere and at anytime.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My motivation to exercise is certainly not to get ripped or super swole. As anybody who knows me could probably guess, that‚Äôs a bit out of reach, as I am a tiny stick with the metabolism of a squirrel. So knowing that, I wanted my system to take the least amount of time and have the least amount of gear to haul around (preferably zero). I also knew after having purchased and selling gear multiple times that having exercise gear doesn‚Äôt really inspire me to exercise, anyway, so I aimed mostly for bodyweight exercises for this reason.&lt;/p&gt;

&lt;p&gt;After doing a cursory amount of research, I aimed to focus on these different areas[1] in the main part of my workout:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upper Body&lt;/li&gt;
  &lt;li&gt;Lower Body&lt;/li&gt;
  &lt;li&gt;Core&lt;/li&gt;
  &lt;li&gt;Cardio&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The other category mentioned was flexibility, which I decided to use as a bookend for my workout.&lt;/p&gt;

&lt;p&gt;After digging around and settling on a bunch of options for exercises in each of these categories, I am using a high intensity interval training framework described in this blog post[2], ‚Äúusing full-body exercises, while training in a shorter amount of time and doing a circuit‚Äù.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Dynamic stretching[3] of whole body, top to bottom[4]&lt;/li&gt;
  &lt;li&gt;Circuit using one exercise from each of the four categories above in timed increments in any order&lt;/li&gt;
  &lt;li&gt;Repeat step 2 with a short break until you feel well exercised&lt;/li&gt;
  &lt;li&gt;Flexibility exercises of joints[5][6] and static stretching of whole body, top to bottom&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using bodyweight exercises, this can essentially be done in tiny space with nothing, which is really useful for getting me to do it instead of making excuses.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;These are some examples of circuits I have been using. One of these circuits per session, 4x through the circuit with 30s on each exercise and 10s rest in between each:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Circuit 1&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Pushups&lt;/li&gt;
  &lt;li&gt;Squats&lt;/li&gt;
  &lt;li&gt;Situps&lt;/li&gt;
  &lt;li&gt;Shoulder to Foot Taps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Circuit 2&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Superman&lt;/li&gt;
  &lt;li&gt;Lunges&lt;/li&gt;
  &lt;li&gt;Mountain Climbers&lt;/li&gt;
  &lt;li&gt;Jumping Jacks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Circuit 3&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Pullup Superman&lt;/li&gt;
  &lt;li&gt;Lunges&lt;/li&gt;
  &lt;li&gt;Bicycle Crunches&lt;/li&gt;
  &lt;li&gt;Jumping Jacks&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hiitimer&quot;&gt;HIITimer&lt;/h3&gt;

&lt;p&gt;I made a super basic program that utilizes the native TTS on your computer to help time your exercise routine and loads exercise presets from plaintext files you can create and edit. &lt;a href=&quot;/2020/10/25/hiitimer&quot;&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;20201023: Added example circuits&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;20201028: Added HIITimer program&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.fitnessauthority247.com/fitness/fit-for-life-the-top-five-areas-to-work-on/&quot;&gt;http://www.fitnessauthority247.com/fitness/fit-for-life-the-top-five-areas-to-work-on/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://themovementathlete.com/workout-in-small-spaces/&quot;&gt;https://themovementathlete.com/workout-in-small-spaces/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=LjcZ7FqS5JE&quot;&gt;https://www.youtube.com/watch?v=LjcZ7FqS5JE&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hss.edu/conditions_dynamic-static-stretching.asp#dynamic&quot;&gt;https://www.hss.edu/conditions_dynamic-static-stretching.asp#dynamic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/flexibility/comments/6cwsap/complete_guide_to_improving_ankle_mobility/&quot;&gt;https://www.reddit.com/r/flexibility/comments/6cwsap/complete_guide_to_improving_ankle_mobility/&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=1QPKpk8WC_I&quot;&gt;https://www.youtube.com/watch?v=1QPKpk8WC_I&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=jlewUVQliFA&quot;&gt;https://www.youtube.com/watch?v=jlewUVQliFA&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/Fitness/comments/eh1tb/please_send_help_coder_lifter_with_evertighter/c181mg6/&quot;&gt;https://www.reddit.com/r/Fitness/comments/eh1tb/please_send_help_coder_lifter_with_evertighter/c181mg6/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>üó∫ Day planner based on location</title>
   <link href="http://milofultz.com/2020/05/23/day-planner"/>
   <updated>2020-05-23T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/05/23/day-planner</id>
   <content type="html">&lt;p&gt;I found this idea on the internet probably around 2009, made my own version, and then unfortunately lost the reference to the original page. If you know where or from whom this originated, &lt;strong&gt;please&lt;/strong&gt; tell me!&lt;/p&gt;

&lt;p&gt;The idea of this is to have a day planner where the axis around which you plan is not time, but location. Instead of thinking about what you are going to do between 9am and 10am, this has you think about what you can do in a given space.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://milofultz.com/assets/20200523dayplan.jpg&quot; alt=&quot;Example of the day planner&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The thing I like best about this is that it is really good for keeping you in touch with activities you enjoy and places you like, making it easy to do those things by choosing it off of a menu. It‚Äôs almost like a worksheet for the day, with the bottom of the page open for note taking, drawing, and scribbling ideas down. Appointments and other real-life things aside, this is a lateral-thinking way to encourage you into desired activities.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>I just found out about Zettelkasten</title>
   <link href="http://milofultz.com/2020/05/22/zettelkasten"/>
   <updated>2020-05-22T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/05/22/zettelkasten</id>
   <content type="html">&lt;p&gt;I‚Äôm probably going to do a hack job explaining this, so TL;DR: Zettelkasten makes all of your notes easier to develop, utilize, and organize for whatever you need them.&lt;/p&gt;

&lt;p&gt;Zettelkasten is a way of note taking and cataloguing that was popularized by sociologist Niklas Luhmann. This particular system intrigued me because it seems to overcome the issues that some basic note taking strategies have.&lt;/p&gt;

&lt;p&gt;Note taking, in the way I was taught, is all about writing down what you‚Äôre thinking in a stream-of-consiousness, extremely linear way. This can be good for going through a whole thought process and getting it all down, but it‚Äôs lacking any ability to be anything but ‚Äústart here and end up there‚Äù. It‚Äôs hard to link it to any other ideas without explicitly remembering what your thought process was. It is possible, with use of notes in the margins, post it notes, and maybe a synopsis (which is also a written out linear thought), but is very unwieldy and again relies on your remembering or regularly reviewing your documented info. Kind of defeats the purpose of documentation.&lt;/p&gt;

&lt;p&gt;The other way is to use a kind of &lt;a href=&quot;https://en.wikipedia.org/wiki/Mind_map&quot;&gt;mind map&lt;/a&gt;. Starting with a basic idea or concept, one branches out into all related things. Maybe ‚ÄúFood‚Äù branches off into ‚ÄúBread‚Äù, ‚ÄúVegetables‚Äù, ‚ÄúNuts‚Äù, ‚ÄúSeeds‚Äù, and ‚ÄúFruits‚Äù. Maybe ‚ÄúBread‚Äù then branches off into ‚ÄúFocaccia‚Äù, ‚ÄúYeast‚Äù, ‚ÄúSourdough‚Äù, ‚ÄúRolls‚Äù, ‚ÄúPizza‚Äù, etc. This can go along for a LONG time, leading people into a more creative exploratory area, kind of allowing their brain to just utilize that free association. The problem that can occur here is again a lack of mobility. Under ‚ÄúBread‚Äù, maybe you want to create some kind of grouping by if it is a yeasted bread, or if it is enriched. Maybe you want to expound on the greatness of sourdough crust on a pizza, where would you put it: under ‚ÄúPizza‚Äù or ‚ÄúSourdough‚Äù? How would you go about organizing these already existing elements in the map without having duplicates or just wasting time moving things around?&lt;/p&gt;

&lt;p&gt;I believe that the Zettelkasten can help solve this issue. This allowed Luhmann the luxury of seeing this larger mapping of ideas and freedom of association that the mindmap provides, along with the linearity of thought that the more ‚Äúacademic‚Äù linear note taking technique provides, but without their rigid limitations.&lt;/p&gt;

&lt;p&gt;In my short time playing with this note taking concept, I have used it to take notes on a book I‚Äôm reading and help develop some of the major points I‚Äôve seen into things that are relevant to me. I‚Äôm able to cross reference from different notes, allowing core concepts to stand on their own and also lead me down expository rabbit holes, allowing a development of smaller ideas that can create new connections once more.&lt;/p&gt;

&lt;p&gt;The way I see it, the longer I keep my Zettelkasten, the more robust my index of information, the more connections I can make, the better I can understand and develop my ideas.&lt;/p&gt;

&lt;p&gt;Because you‚Äôre probably wondering what it actually is and not just my real glossy surface level explanation of it, I recommend reading more in depth on it in these two articles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lesswrong.com/posts/NfdHG6oHBJ8Qxc26s/the-zettelkasten-method-1&quot;&gt;The Zettelkasten Method&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://writingcooperative.com/zettelkasten-how-one-german-scholar-was-so-freakishly-productive-997e4e0ca125&quot;&gt;Zettelkasten ‚Äî How One German Scholar Was So Freakishly Productive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Keyboard Remapping on OSX - Adding the Insert Key</title>
   <link href="http://milofultz.com/2020/05/22/keyboard-remapping"/>
   <updated>2020-05-22T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/05/22/keyboard-remapping</id>
   <content type="html">&lt;p&gt;I downloaded &lt;a href=&quot;https://www.3eality.com/productions/reality-adlib-tracker&quot;&gt;Reality Adlib Tracker&lt;/a&gt; and &lt;a href=&quot;https://milkytracker.titandemo.org/&quot;&gt;MilkyTracker&lt;/a&gt; the other day and realized that Apple removed their insert key abilities a LONG time ago. The insert key is used quite a bit in these older programs for basic things like adding a line in your tracker, creating your pattern sequence, etc. Along with things like Dosbox, where these old relics are utilized, most of these older programs don‚Äôt allow new keybindings, so I had to dig around and find a new solution. I unfortunately couldn‚Äôt find anything directly related to trackers and stuff on any of their forums, so I figured I‚Äôd try and make something that could be found when searching for trackers, DOS, etc.&lt;/p&gt;

&lt;p&gt;Here‚Äôs one very simple and one not very simple but extremely interesting (read: difficult to understand for a rube like me) solution.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;simple-and-recommended&quot;&gt;SIMPLE And Recommended:&lt;/h3&gt;

&lt;p&gt;Karabiner-Elements is an open-source program that allows you to remap any key on any device to another key. In this instance, I remapped my right alt/option key to the insert key, as I do not use that option key almost ever. In Karabiner, it‚Äôs honestly so simple, as you can see in the screenshot. Choose what key you want to press and what you want it to output. I tested this in RAD and it works beautifully.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://milofultz.com/assets/20200522karabiner.png&quot;&gt;Check out a picture of my settings here.&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;not-as-simple-and-honestly-not-recommended&quot;&gt;NOT AS SIMPLE And Honestly Not Recommended:&lt;/h3&gt;

&lt;p&gt;So this way is much more in depth and I honestly don‚Äôt really know a lot of what I am doing here. What I tested works for me, but of course YMMV.&lt;/p&gt;

&lt;p&gt;I utilized the ideas listed in nanoant‚Äôs article, &lt;a href=&quot;https://www.nanoant.com/mac/macos-function-key-remapping-with-hidutil&quot;&gt;‚ÄúmacOS function key remapping with hidutil‚Äù&lt;/a&gt;, as well as the &lt;a href=&quot;https://www.freebsddiary.org/APC/usb_hid_usages.php&quot;&gt;USB HID usage table&lt;/a&gt; and made a couple lines of code that can be input to achieve the same effect as above.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://milofultz.com/assets/20200522karabiner.png&quot;&gt;Check out a picture of my settings here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go into terminal and type the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hidutil property --set '{&quot;UserKeyMapping&quot;:[
{&quot;HIDKeyboardModifierMappingSrc&quot;:0x7000000e6, &quot;HIDKeyboardModifierMappingDst&quot;:0x700000049}]}'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What this does is the hidutil (Human Interface Design utility) is setting a new key map in the following way: key ‚Äúright alt‚Äù is going to now output key ‚Äúinsert‚Äù. At this point, it wasn‚Äôt working, so I figured I needed to do the opposite, setting the ‚Äúinsert‚Äù key to map to ‚Äúright alt‚Äù.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hidutil property --set '{&quot;UserKeyMapping&quot;:[
{&quot;HIDKeyboardModifierMappingSrc&quot;:0x700000049, &quot;HIDKeyboardModifierMappingDst&quot;:0x7000000e6}]}'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This made it work for me, and I don‚Äôt fully understand, but it is interesting to note. There are a lot of interesting controls in the USB HID image table, so I wonder if I would need any of these strange controls in the future. At least I‚Äôll know how to map them ‚Ä¶ maybe?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;20201001: Used to make caps lock key the escape key for use with Vim&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Buying Things &quot;Just In Case&quot; vs. Real Estate</title>
   <link href="http://milofultz.com/2020/05/22/just-in-case"/>
   <updated>2020-05-22T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/05/22/just-in-case</id>
   <content type="html">&lt;p&gt;In wondering if I should make a purchase, I noticed a problem with my thinking early on: if something was on sale, I‚Äôd buy it, just in case I needed it later to accomplish some goal or in a project I had in mind. The reasoning was that if I bought it now, in a year when I need that very specific thing on that project, then I won‚Äôt have to pay what feels like an extra amount, as well as extra time, to go and buy it.&lt;/p&gt;

&lt;p&gt;There were a lot of problems with this line of thinking, mostly that the allure of a sale deluded me into thinking that I will use the thing, making me think about all the things I may need this thing for and justifying it that way. But what finally broke this down for me was thinking about the real estate these things take up and how it affects me.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Does buying a thing just in case I need it in the future outweigh the costs? Putting extreme situations aside, I pretty much always feel the answer is &lt;strong&gt;no&lt;/strong&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;The cost of space.&lt;/strong&gt; Even with smaller things, there is a cost to house these just-in-case items, especially the more you get. Storage isn‚Äôt free, and there is a very real cost to keeping your things organized and maintained.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The cost of finding it when you need it.&lt;/strong&gt; This problem grows worse and worse the more just-in-case stuff you get. If you have a house full of stuff you might use, you have two choices: spend your time organizing and maintaining that organization, or save that time and then spend that time later trying to find it. Either way, your total time spent goes up with each just-in-case item you buy, and if you feel that your time is worth anything, the time spent in trying to find it later will most likely negate any savings you may have gotten.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The mental cost.&lt;/strong&gt; With items that are tied to half-done or barely started projects, there is a mental cost to seeing these just-in-case items around the house. When I walked by my oak 1x8‚Äôs in the garage, I was reminded that I bought those to build a skateboard and I haven‚Äôt done anything with them for two years. For me, being reminded of all of that whenever I walked in the garage gave me a sense of disappointment instead of excitement. If I had scheduled time to finish that project before I bought the supplies, I would have closed the loop, finished the project, and not brought down my mood over those years.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The cost of never using it.&lt;/strong&gt; If you never end up using it, it is a &lt;em&gt;total loss&lt;/em&gt;. I can‚Äôt tell you how many times I have bought something just in case, just to try and sell it and then give it to a thrift store 4 years later when I finally gave up the ghost. In these situations, I lost 4 years of space, 4 years of organizing and maintaining it, and the full cost of the item. If I do this with one item out of ten, will that make the other nine worth it?&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;There are still situations where buying something just in case is actually useful, but I find that is few and far between. At this point, I have much more usable space than I did before, a lot less half-done or barely started projects, and more money.&lt;/p&gt;

&lt;p&gt;Overall, if I had to choose one side, I would choose real estate over buying things ‚Äújust in case‚Äù.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Adam Savage Trial Method</title>
   <link href="http://milofultz.com/2020/05/17/adam-savage"/>
   <updated>2020-05-17T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/05/17/adam-savage</id>
   <content type="html">&lt;p&gt;Adam Savage agreed with the following advice regarding buying tools:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When you‚Äôre first starting a hobby, don‚Äôt buy the expensive tools. Buy something mid-range. If you use it so much that it breaks, then buy the best one to replace it.[1]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Following with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Once I was working professionally my goal was to steadily accumulate better versions of my high-use tools. And if there was a tool I didn‚Äôt have but NEEDED more than 3x/year I‚Äôd invest in that tool.[1]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are unsure how often you will use this tool or it‚Äôs efficacy in achieving your goal, you may buy cheap first &lt;em&gt;on purpose&lt;/em&gt;. This goes against the prevailing advice of ‚Äúpennywise and pound foolish‚Äù and ‚Äúbuy cheap, buy twice‚Äù, but in the long-term, this advice may save money and give you valuable data you didn‚Äôt have before.&lt;/p&gt;

&lt;p&gt;If you are considering getting a tool, you may be able to bypass most criteria aside from ‚ÄúEffectiveness‚Äù with this method. Simply look for the one that is cheapest and will get the job done well. It doesn‚Äôt have to be perfect or do everything, but it needs to do the job. In buying cheap here, you are ending up giving yourself a way to accrue data:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Do I actually need this tool?&lt;/li&gt;
  &lt;li&gt;Will I use this tool very often?&lt;/li&gt;
  &lt;li&gt;Is this tool effective?&lt;/li&gt;
  &lt;li&gt;Does this tool do everything I need it to?&lt;/li&gt;
  &lt;li&gt;Do I need it to do more than it does now?&lt;/li&gt;
  &lt;li&gt;What are the elements I wish were improved?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These insights are things you may not have known to think about prior to owning this ‚Äúinferior‚Äù tool, and now for a minimal investment and real world experience, you can make a better informed purchase in the future.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;References:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/donttrythis/status/941149124497305600&quot;&gt;https://twitter.com/donttrythis/status/941149124497305600&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>I Miss The Old Internet</title>
   <link href="http://milofultz.com/2020/05/01/old-internet"/>
   <updated>2020-05-01T00:00:00+07:00</updated>
   <id>http://milofultz.com/2020/05/01/old-internet</id>
   <content type="html">&lt;p&gt;I miss the old internet.&lt;/p&gt;

&lt;p&gt;Where everything was Times New Roman and you rummaged around people‚Äôs websites to see what kind of stuff they were interested in. You‚Äôd read their treatises about some topic that was so foreign to you but you would get lost in it. It was like walking into somebody‚Äôs workshop: half-finished ideas, seemingly throwaway creations, and really weird shit.&lt;/p&gt;

&lt;p&gt;I wanted a place to put whatever I wanted, like a &lt;a href=&quot;https://joelhooks.com/digital-garden&quot;&gt;digital garden&lt;/a&gt; instead of a perfectly curated space for branding or whatever. My creativity suffers when I worry about my image.&lt;/p&gt;

&lt;!-- - _202XXXXX: Update format_ --&gt;
</content>
 </entry>
 

</feed>
