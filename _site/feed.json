{
    "version": "https://jsonfeed.org/version/1",
    "title": "Milo Fultz",
    "home_page_url": "http://milofultz.com/",
    "feed_url": "http://milofultz.com/feed.json",
    "description": null,
    "icon": "http://milofultz.com/apple-touch-icon.png",
    "favicon": "http://milofultz.com/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Milo Fultz",
        "url": "http://milofultz.com",
        "avatar": null
    },
    
"items": [
    
        {
            "id": "http://milofultz.com/2021/07/04/make-a-simple-wiki",
            "title": "üìÑ Make A Simple Wiki with Markdown",
            "summary": "How to make your own simple wiki with backlinking out of Markdown files with {{SWIKI}}.",
            "content_text": "For the last year or so, I‚Äôve been keeping notes about programming and what I‚Äôve been learning about it, which has been super helpful for me. But I‚Äôve also found myself sending out some of these files to people for reference, which is fine but not ideal. I always thought that what would be WAY nicer is to have a wiki online that I could send people to so that they would have a reference now and for the future, plus then they could reference it for whatever else, as well. My note-taking is essentially my learning process, so why not share it?I recently did this for those notes at https://www.tinybrain.fans, and will continue using it for any wiki/Zettelkasten material I generate.Set UpThis setup requires {{SWIKI}}, a Github repository where you will put your built static site, and optionally, a domain to host it on.{{SWIKI}}You will need to use Markdown files with the Jekyll-style front matter for your pages, and to create the necessary files that SWIKI needs to build it (learn more about the features and specifics of {{SWIKI}} here). After getting those created and placed, you should be able to build your site and output a set of static HTML files.Create a new folder where you will keep this built out site. You will want to initiate a new Git repository there and after you build your site in that folder, commit your changes.Github PagesCreate a new Github repo which will house your built site and connect it to the Git repo you built in the last step. If you aren‚Äôt using a custom domain, be sure to name this using yourusername.github.io or you may not be able to host it correctly on the Github Pages URL.Go ahead and push up those newly built files to the remote repo. If you don‚Äôt do this first, it won‚Äôt let you set up your Github Pages.After completing this, go into this repo‚Äôs settings and open the ‚ÄúPages‚Äù or ‚ÄúGithub Pages‚Äù tab. Set the source to be the root folder,    and you should be able to go to the URL listed to see your new site.Custom DomainIf you end up wanting to use a custom domain for hosting, you will need to put the custom domain‚Äôs URL into the Github Pages settings first. After completing this, go into the DNS settings of your custom domain and change your ‚ÄúCustom resource records‚Äù. You will need to add an ‚ÄúA‚Äù type to point the domain at the Github Pages, using these four IP addresses:185.199.108.153185.199.109.153185.199.110.153185.199.111.153WAITYou may not see any updates to your website for the next 48-hours, so give it time. Go for a walk, eat dinner, I dunno.You‚Äôre done!After this, your page should be visible at your chosen domain. To make updates to your wiki, just update your Markdown files, rebuild your site, commit the changes in Git, and push it up. These changes should be visible within about a minute of pushing up.",
            "content_html": "<p>For the last year or so, I‚Äôve been keeping notes about programming and what I‚Äôve been learning about it, which has been super helpful for me. But I‚Äôve also found myself sending out some of these files to people for reference, which is fine but not ideal. I always thought that what would be WAY nicer is to have a wiki online that I could send people to so that they would have a reference now <em>and</em> for the future, plus then they could reference it for whatever else, as well. My note-taking is essentially my learning process, so why not share it?</p><p>I recently did this for those notes at <a href=\"https://www.tinybrain.fans\">https://www.tinybrain.fans</a>, and will continue using it for any wiki/Zettelkasten material I generate.</p><h2 id=\"set-up\">Set Up</h2><p>This setup requires <a href=\"https://github.com/milofultz/swiki\">{{SWIKI}}</a>, a <a href=\"https://github.com/\">Github</a> repository where you will put your built static site, and optionally, a domain to host it on.</p><h3 id=\"swiki\"><a href=\"https://github.com/milofultz/swiki\">{{SWIKI}}</a></h3><p>You will need to use Markdown files with the <a href=\"https://jekyllrb.com/docs/front-matter/\">Jekyll-style front matter</a> for your pages, and to create the necessary files that SWIKI needs to build it (learn more about the features and specifics of <a href=\"https://github.com/milofultz/swiki\">{{SWIKI}}</a> here). After getting those created and placed, you should be able to build your site and output a set of static HTML files.</p><p>Create a new folder where you will keep this built out site. You will want to <a href=\"https://kbroman.org/github_tutorial/pages/init.html\">initiate a new Git repository</a> there and after you build your site in that folder, commit your changes.</p><h3 id=\"github-pages\">Github Pages</h3><p>Create a new Github repo which will house your built site and connect it to the Git repo you built in the last step. If you aren‚Äôt using a custom domain, <a href=\"https://guides.github.com/features/pages/\">be sure to name this using yourusername.github.io</a> or you may not be able to host it correctly on the Github Pages URL.</p><p>Go ahead and push up those newly built files to the remote repo. If you don‚Äôt do this first, it won‚Äôt let you set up your Github Pages.</p><p>After completing this, go into this repo‚Äôs settings and open the ‚ÄúPages‚Äù or ‚ÄúGithub Pages‚Äù tab. Set the source to be the root folder,    and you should be able to go to the URL listed to see your new site.</p><h3 id=\"custom-domain\">Custom Domain</h3><p>If you end up wanting to use a custom domain for hosting, you will need to put the custom domain‚Äôs URL into the Github Pages settings first. After completing this, go into the DNS settings of your custom domain and change your ‚ÄúCustom resource records‚Äù. You will need to add an ‚ÄúA‚Äù type to point the domain at the Github Pages, using these four IP addresses:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>185.199.108.153185.199.109.153185.199.110.153185.199.111.153</code></pre></div></div><h3 id=\"wait\">WAIT</h3><p>You may not see any updates to your website for the next 48-hours, so give it time. Go for a walk, eat dinner, I dunno.</p><h2 id=\"youre-done\">You‚Äôre done!</h2><p>After this, your page should be visible at your chosen domain. To make updates to your wiki, just update your Markdown files, rebuild your site, commit the changes in Git, and push it up. These changes should be visible within about a minute of pushing up.</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2021/07/04/make-a-simple-wiki",
            
            
            
            
            
            "date_published": "2021-07-04T00:00:00-07:00",
            "date_modified": "2021-07-04T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2021/07/03/swiki-tinybrainfans",
            "title": "üîñ {{SWIKI}} / tinybrain.fans",
            "summary": "{{SWIKI}} is a flat-file wiki generator and the basis of my Zettelkasten at tinybrainfans.com.",
            "content_text": "Check it out here! // Check out  on GitHub{{SWIKI}} is a flatfile wiki generator using Python. Using some basic configuration and template files, you can build a wiki out of Markdown files and some {{double brackets}}.  Any page that is linked out locally will have the current page backlinked on that page, allowing for easy trawling through related information and finding new stuff.  The structure of the web pages is defined by a static ‚Äúframe‚Äù HTML file where the content is injected.  Produces a ‚Äúfatfile‚Äù page that contains all of the content of every page, which makes for easy searching of the entire wiki with just ctrl + f.Check it out on GitHub to learn more about how it works, and go to https://www.tinybrain.fans to play around in a working demo.",
            "content_html": "<p><a href=\"https://www.tinybrain.fans/\"><strong>Check it out here!</strong></a> // <a href=\"https://github.com/milofultz/swiki\">Check out  on GitHub</a></p><p>{{SWIKI}} is a flatfile wiki generator using Python. Using some basic configuration and template files, you can build a wiki out of Markdown files and some {{double brackets}}.</p><ul>  <li>Any page that is linked out locally will have the current page backlinked on that page, allowing for easy trawling through related information and finding new stuff.</li>  <li>The structure of the web pages is defined by a static ‚Äúframe‚Äù HTML file where the content is injected.</li>  <li>Produces a ‚Äúfatfile‚Äù page that contains all of the content of every page, which makes for easy searching of the entire wiki with just <code class=\"highlighter-rouge\">ctrl</code> + <code class=\"highlighter-rouge\">f</code>.</li></ul><p><a href=\"https://github.com/milofultz/swiki\">Check it out on GitHub</a> to learn more about how it works, and go to <a href=\"https://www.tinybrain.fans\">https://www.tinybrain.fans</a> to play around in a working demo.</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2021/07/03/swiki-tinybrainfans",
            
            
            
            
            
            "date_published": "2021-07-03T00:00:00-07:00",
            "date_modified": "2021-07-03T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2021/04/11/tiny-font-3-by-3",
            "title": "üìï Make A Tiny 3x3 Font",
            "summary": "How readable and how satisfying is a font using only a 3x3 grid?",
            "content_text": "Check it out here! // Check out the font file on GitHubI was inpired by zserge‚Äôs post on making a tiny 2x3 font and wanted to see if I could make a readable 3x3 font myself. This challenge is exponentialy easier as there is so much more fidelity there, and it gave me a chance to play with Affinity Designer, which I‚Äôd never used before, as well as some basic bit shifting practice.The end result is surprisingly readable, and even has punctuation!",
            "content_html": "<p><a href=\"http://milofultz.com/3x3/tinyfont3x3--font.html\"><strong>Check it out here!</strong></a> // <a href=\"https://github.com/milofultz/3x3\">Check out the font file on GitHub</a></p><p>I was inpired by zserge‚Äôs post on <a href=\"https://zserge.com/posts/tiny-font/\">making a tiny 2x3 font</a> and wanted to see if I could make a readable 3x3 font myself. This challenge is exponentialy easier as there is so much more fidelity there, and it gave me a chance to play with Affinity Designer, which I‚Äôd never used before, as well as some basic bit shifting practice.</p><p>The end result is surprisingly readable, and even has punctuation!</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2021/04/11/tiny-font-3-by-3",
            
            
            
            
            
            "date_published": "2021-04-11T00:00:00-07:00",
            "date_modified": "2021-04-11T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2021/03/06/sublime-keymap",
            "title": "Find and Remove Autocompletes in Sublime Text 3",
            "summary": "Ever had trouble diagnosing where an autocompleted character is coming from and how to stop it?",
            "content_text": "I just spent forever trying to find a solution for this, so I figure putting it up here will be helpful for me and hopefully for others, too.In my case, I have been using Emmet to write HTML and CSS much faster. The issue that first came up was that when typing a colon in CSS, by default Sublime Text will add a semicolon. This doesn‚Äôt allow Emmet to expand correctly, or at best leaves you with an extra semicolon. After getting a hacky fix for this that didn‚Äôt fix the same problem in a Sass package, I had to actually figure out how to solve the root issue.OdatNurd on StackOverflow provided a fantastic walkthrough to a similar problem and left me with the tools to actually diagnose and solve the problem. You can use this to find out what is happening and in what part of the program, not just flailing and hoping you fix something.  Open the console (View &gt; Show Console or ctrl + ` on OSX).  In the console, enter in sublime.log_commands(True).  Do what you need to recreate the issue. Immediately after triggering the unwanted behavior, document what you think is causing it that is in the console. In my case it was command: insert_snippet {\"contents\": \":$0;\"}.  Depending on which syntax you are in, or which plugin is listed/suspected, use the command palette to View Package File and type in the syntax/plugin. This will show files that are hidden, as well, which makes diagnosing issues with default plugins/syntaxes much easier.  Once you find a possible file, open it. Save As in the Packages directory under a new folder called the name of the plugin or syntax. e.g. for the Sass plugin/syntax, I created a folder in Packages called Sass and saved a copy of the Default.sublime-keymap file there, which included my additions. You can find more on overriding packages here.  In my case, I copied the old rule over and changed the {\"contents\": \":$0;\"} object to {\"contents\": \":$0\"}, which allowed the colon to be typed without adding any additional characters.",
            "content_html": "<p>I just spent forever trying to find a solution for this, so I figure putting it up here will be helpful for me and hopefully for others, too.</p><p>In my case, I have been using Emmet to write HTML and CSS much faster. The issue that first came up was that when typing a colon in CSS, by default Sublime Text will add a semicolon. This doesn‚Äôt allow Emmet to expand correctly, or at best leaves you with an extra semicolon. After getting a hacky fix for this that didn‚Äôt fix the same problem in a Sass package, I had to actually figure out how to solve the root issue.</p><p><a href=\"https://stackoverflow.com/questions/59635627/how-to-override-sublime-text-3-packages-css3-completion-syntax\">OdatNurd on StackOverflow</a> provided a fantastic walkthrough to a similar problem and left me with the tools to actually diagnose and solve the problem. You can use this to find out <em>what</em> is happening and in <em>what</em> part of the program, not just flailing and hoping you fix something.</p><ol>  <li>Open the console (<code class=\"highlighter-rouge\">View &gt; Show Console</code> or <code class=\"highlighter-rouge\">ctrl + `</code> on OSX).</li>  <li>In the console, enter in <code class=\"highlighter-rouge\">sublime.log_commands(True)</code>.</li>  <li>Do what you need to recreate the issue. Immediately after triggering the unwanted behavior, document what you think is causing it that is in the console. In my case it was <code class=\"highlighter-rouge\">command: insert_snippet {\"contents\": \":$0;\"}</code>.</li>  <li>Depending on which syntax you are in, or which plugin is listed/suspected, use the command palette to <code class=\"highlighter-rouge\">View Package File</code> and type in the syntax/plugin. This will show files that are hidden, as well, which makes diagnosing issues with default plugins/syntaxes much easier.</li>  <li>Once you find a possible file, open it. <code class=\"highlighter-rouge\">Save As</code> in the <code class=\"highlighter-rouge\">Packages</code> directory under a new folder called the name of the plugin or syntax. e.g. for the Sass plugin/syntax, I created a folder in <code class=\"highlighter-rouge\">Packages</code> called <code class=\"highlighter-rouge\">Sass</code> and saved a copy of the <code class=\"highlighter-rouge\">Default.sublime-keymap</code> file there, which included my additions. <a href=\"https://www.sublimetext.com/docs/3/packages.html\">You can find more on overriding packages here</a>.</li>  <li>In my case, I copied the old rule over and changed the <code class=\"highlighter-rouge\">{\"contents\": \":$0;\"}</code> object to <code class=\"highlighter-rouge\">{\"contents\": \":$0\"}</code>, which allowed the colon to be typed without adding any additional characters.</li></ol><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2021/03/06/sublime-keymap",
            
            
            
            
            
            "date_published": "2021-03-06T00:00:00-08:00",
            "date_modified": "2021-03-06T00:00:00-08:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2021/01/28/snake-js",
            "title": "üêç SNAKEHACK - snake with constantly changing controls",
            "summary": "I just got started on this, but the goal is to make a snake game with more or less arbitrary rules that change as you play. Part Warioware, part snake, whatever.",
            "content_text": "Try it out here! // Check out the up-to-date version on GitHubI just got started on this, but the goal is to make a snake game with more or less arbitrary rules that change as you play. Part Warioware, part snake, whatever.Mainly making this as a way to practice basic website construction, HTML5 canvas drawing, and fun.",
            "content_html": "<p><a href=\"https://www.milofultz.com/snake_js\"><strong>Try it out here!</strong></a> // <a href=\"https://github.com/milofultz/snake_js\"><strong>Check out the up-to-date version on GitHub</strong></a></p><p>I just got started on this, but the goal is to make a snake game with more or less arbitrary rules that change as you play. Part Warioware, part snake, whatever.</p><p>Mainly making this as a way to practice basic website construction, HTML5 canvas drawing, and fun.</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2021/01/28/snake-js",
            
            
            
            
            
            "date_published": "2021-01-28T00:00:00-08:00",
            "date_modified": "2021-01-28T00:00:00-08:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2021/01/08/software",
            "title": "Apps, Software, and More That I Use Everyday",
            "summary": "This is a list of all my most useful or relevant apps.",
            "content_text": "ProgramsaText: This is the text and snippet expander that I moved to after using TextExpander for years. It‚Äôs only $5 instead of a $36/year subscription and essentially the same program but with more features available, most notably automated keystrokes. I use it most often in my copywriting for podcasts, emails, and projects with a lot of repetition, but it‚Äôs also super useful in generating timestamps and datestamps. Much more fun to use than the built-in OSX feature.Dozer: Free and open source app to hide menu bar icons to give your Mac a cleaner look. Helps me not get distracted by unimportant stuff.EasyRes: Menubar app that allows you to switch screen resolutions quickly and easily. Most useful when using multiple monitors or external keyboard/mouse configs that put the laptop farther away from your eyes.f.lux: Warms your screen color at sundown until sunup so it doesn‚Äôt destroy your eyes in the dark. Just essential and makes using a computer without it almost unbearable.GrandPerspective: A small utility application for macOS that graphically shows the disk usage within a file system. I use this to monitor unruly client Dropbox folders as well as runaway audio/video projects.iTerm2: Terminal that allows multiple tabs, styling, font choice, etc. Just better than OSX built in.Karabiner-Elements:   A powerful and stable keyboard customizer for macOS. I use this to map capslock to escape, the bottom right alt button to insert, for some of those old DOS programs, and flip the F-row buttons from having to use fn every time I want to press any actual F key.1Password: I use Lastpass (I used to use Lastpass, but their free model will only work on a single device at a time, making it useless if you use a phone and computer with it), but use ANY password manager, please please please.OcenAudio: If Audacity was actually pleasant to use. Not as powerful, but for 99% of what I do, it is much better for audio editing/manipulation in every way.PyCharm: A much nicer environment to write Python in. Preferred over VSCodium for the built-in Python specific console and debugger.Quitter: One of my most useful apps. Quits an app based on minutes of inactivity. Super useful for very distracting and/or power-hungry apps like Messages, Slack, etc.Reaper: I use this for all my podcast editing because of the ability to make super useful keyboard shortcuts and Lua scripts along with the varispeed that can go over 2x speed (looking at you, Logic).Rectangle / ShiftIt: Window manager that uses keyboard shortcuts. Super easy to arrange windows into quandrants, screen halves/thirds, etc., or move windows over to other screens. Just overall very useful for smaller single-monitor or large multi-monitor setups.SublimeText: This is my coding scratchpad as well as my daily task manager using PlainTasks. Not as full featured as PyCharm or VSCodium, but still fantastic and a pleasure to use. Packages I use:  Emmet: If you do any HTML/CSS/JS, get Emmet.  HTML-CSS-JS Prettify: Auto-formats different web files for easy editing/analysis.  MarkdownPreview: Lets you export Markdown as a Github-flavored HTML file. Good for general prototyping.  PlainTasks: Great todo app. I use it for all my workflows and SOP‚Äôs since it is not proprietary and is saved as plaintext.  RainbowBrackets: Shows your matching brackets at a glance. Makes debugging missed brackets simple.  Sync Settings: Helps sync settings across multiple computers.Typora: Super simple and pretty markdown editor I use all of the time for my blog posts, code diary, note taking, and any other markdown-related stuff. Interchangeable CSS themes make it really easy to customize, too.VSCodium: An open source version of Microsoft‚Äôs VSCode, meaning it had none of the bloat that MS adds like tracking, telemetry, etc. Extensions I use:  Bracket Pair Colorizer 2: Same as RainbowBrackets above.  Colorize: Shows what colors are in your CSS/Sass when using any color method including variables.  ESLint: Javascript linter.  Indent-Rainbow: Like bracket colorizers, this gives your indentation a coloring so you can understand indentation more at a glance.  Monokai Pro: Same as above.  Prettier: Helpful for keeping your code matching code style standards. Auto-formats your code according to user-set rules.FontsAtkinson Hyperlegible Font: I use this as my default font for sans-serif on my browser so I can set the default font size much smaller and still be readable.Fira Code: I use this in every piece of software that I need monospace fonts. Has ligatures which makes things more readable and easier to understand, as well as dynamic adjustment of heights to match nearby letters. A bunch of things that added together just look really nice.  20210206: Added f.lux and Lastpass, SublimeText and VSCodium extensions to programs, Atkinson Hyperlegible to fonts  20210403: Removed Lastpass and added 1Password, HTML-CSS-JS Prettify, Sync Settings",
            "content_html": "<h3 id=\"programs\">Programs</h3><p><a href=\"https://trankynam.com/atext/\">aText</a>: This is the text and snippet expander that I moved to after using TextExpander for years. It‚Äôs only $5 instead of a $36/year subscription and essentially the same program but with more features available, most notably automated keystrokes. I use it most often in my copywriting for podcasts, emails, and projects with a lot of repetition, but it‚Äôs also super useful in generating timestamps and datestamps. Much more fun to use than the built-in OSX feature.</p><p><a href=\"https://github.com/Mortennn/Dozer\">Dozer</a>: Free and open source app to hide menu bar icons to give your Mac a cleaner look. Helps me not get distracted by unimportant stuff.</p><p><a href=\"http://easyresapp.com/\">EasyRes</a>: Menubar app that allows you to switch screen resolutions quickly and easily. Most useful when using multiple monitors or external keyboard/mouse configs that put the laptop farther away from your eyes.</p><p><a href=\"https://justgetflux.com/\">f.lux</a>: Warms your screen color at sundown until sunup so it doesn‚Äôt destroy your eyes in the dark. Just essential and makes using a computer without it almost unbearable.</p><p><a href=\"http://grandperspectiv.sourceforge.net/\">GrandPerspective</a>: A small utility application for macOS that graphically shows the disk usage within a file system. I use this to monitor unruly client Dropbox folders as well as runaway audio/video projects.</p><p><a href=\"https://iterm2.com/\">iTerm2</a>: Terminal that allows multiple tabs, styling, font choice, etc. Just better than OSX built in.</p><p><a href=\"https://karabiner-elements.pqrs.org/\">Karabiner-Elements</a>:   A powerful and stable keyboard customizer for macOS. I use this to map capslock to escape, the bottom right alt button to insert, for some of those old DOS programs, and flip the F-row buttons from having to use <code class=\"highlighter-rouge\">fn</code> every time I want to press any actual F key.</p><p><a href=\"https://www.1password.com/\">1Password</a>: <del>I use Lastpass</del> (I used to use Lastpass, but their free model will only work on a single device at a time, making it useless if you use a phone and computer with it), but <a href=\"https://www.tomsguide.com/us/password-manager-pros-cons,news-19018.html\">use ANY password manager</a>, please please please.</p><p><a href=\"https://www.ocenaudio.com/en/\">OcenAudio</a>: If Audacity was actually pleasant to use. Not <em>as</em> powerful, but for 99% of what I do, it is much better for audio editing/manipulation in every way.</p><p><a href=\"https://www.jetbrains.com/pycharm/\">PyCharm</a>: A much nicer environment to write Python in. Preferred over VSCodium for the built-in Python specific console and debugger.</p><p><a href=\"https://marco.org/apps\">Quitter</a>: One of my most useful apps. Quits an app based on minutes of inactivity. Super useful for very distracting and/or power-hungry apps like Messages, Slack, etc.</p><p><a href=\"https://www.reaper.fm/\">Reaper</a>: I use this for all my podcast editing because of the ability to make super useful keyboard shortcuts and Lua scripts along with the varispeed that can go over 2x speed (looking at you, Logic).</p><p><a href=\"https://rectangleapp.com/\">Rectangle</a> / <a href=\"https://github.com/fikovnik/ShiftIt\">ShiftIt</a>: Window manager that uses keyboard shortcuts. Super easy to arrange windows into quandrants, screen halves/thirds, etc., or move windows over to other screens. Just overall very useful for smaller single-monitor or large multi-monitor setups.</p><p><a href=\"https://www.sublimetext.com/\">SublimeText</a>: This is my coding scratchpad as well as my daily task manager using <a href=\"https://github.com/aziz/PlainTasks\">PlainTasks</a>. Not as full featured as PyCharm or VSCodium, but still fantastic and a pleasure to use. Packages I use:</p><ul>  <li><a href=\"https://emmet.io/blog/sublime-text-3/\">Emmet</a>: If you do any HTML/CSS/JS, get Emmet.</li>  <li><a href=\"https://packagecontrol.io/packages/HTML-CSS-JS%20Prettify\">HTML-CSS-JS Prettify</a>: Auto-formats different web files for easy editing/analysis.</li>  <li><a href=\"https://github.com/facelessuser/MarkdownPreview\">MarkdownPreview</a>: Lets you export Markdown as a Github-flavored HTML file. Good for general prototyping.</li>  <li><a href=\"https://github.com/aziz/PlainTasks\">PlainTasks</a>: Great todo app. I use it for all my workflows and SOP‚Äôs since it is not proprietary and is saved as plaintext.</li>  <li><a href=\"https://packagecontrol.io/packages/RainbowBrackets\">RainbowBrackets</a>: Shows your matching brackets at a glance. Makes debugging missed brackets simple.</li>  <li><a href=\"https://packagecontrol.io/packages/Sync%20Settings\">Sync Settings</a>: Helps sync settings across multiple computers.</li></ul><p><a href=\"https://typora.io/\">Typora</a>: Super simple and pretty markdown editor I use all of the time for my blog posts, code diary, note taking, and any other markdown-related stuff. Interchangeable CSS themes make it really easy to customize, too.</p><p><a href=\"https://vscodium.com/\">VSCodium</a>: An open source version of Microsoft‚Äôs VSCode, meaning it had none of the bloat that MS adds like tracking, telemetry, etc. Extensions I use:</p><ul>  <li><a href=\"https://open-vsx.org/extension/CoenraadS/bracket-pair-colorizer-2\">Bracket Pair Colorizer 2</a>: Same as RainbowBrackets above.</li>  <li><a href=\"https://github.com/KamiKillertO/vscode-colorize/\">Colorize</a>: Shows what colors are in your CSS/Sass when using any color method including variables.</li>  <li><a href=\"https://eslint.org/\">ESLint</a>: Javascript linter.</li>  <li><a href=\"https://open-vsx.org/vscode/item?itemName=oderwat.indent-rainbow\">Indent-Rainbow</a>: Like bracket colorizers, this gives your indentation a coloring so you can understand indentation more at a glance.</li>  <li><a href=\"https://monokai.pro/\">Monokai Pro</a>: Same as above.</li>  <li><a href=\"https://prettier.io/\">Prettier</a>: Helpful for keeping your code matching code style standards. Auto-formats your code according to user-set rules.</li></ul><h3 id=\"fonts\">Fonts</h3><p><a href=\"https://brailleinstitute.org/freefont\">Atkinson Hyperlegible Font</a>: I use this as my default font for sans-serif on my browser so I can set the default font size much smaller and still be readable.</p><p><a href=\"https://github.com/tonsky/FiraCode\">Fira Code</a>: I use this in every piece of software that I need monospace fonts. Has ligatures which makes things more readable and easier to understand, as well as dynamic adjustment of heights to match nearby letters. A bunch of things that added together just look really nice.</p><ul>  <li><em>20210206: Added f.lux and Lastpass, SublimeText and VSCodium extensions to programs, Atkinson Hyperlegible to fonts</em></li>  <li><em>20210403: Removed Lastpass and added 1Password, HTML-CSS-JS Prettify, Sync Settings</em></li></ul><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2021/01/08/software",
            
            
            
            
            
            "date_published": "2021-01-08T00:00:00-08:00",
            "date_modified": "2021-01-08T00:00:00-08:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2021/01/06/reverse-horoscope",
            "title": "üåå Reverse Horoscope - Find Out Your Real Birthday (JS)",
            "summary": "Find out when you were supposed to be born. Answer some questions and discover your true sign and your real birthday.",
            "content_text": "Try it out here! // Check out the project files on GitHubIf you ever thought that your zodiac sign didn‚Äôt truly represent you, this is for you. Take this quiz to find out what your real birthday should be based on these twelve questions!When beginning the quiz, the questions are pulled from the list of horoscopes and then populate the question elements. These are then loaded one by one via jQuery before submitting the final question.Once the questions are submitted, the winning sign is decided and the birthday is created from these results. By knowing the midpoint of each sign, the birthday date is chosen through calculating the adjusted midpoint based on the scores of the adjacent signs.Uses Charts.css for the bar graph at the end and jQuery for animation and DOM population.",
            "content_html": "<p><a href=\"https://www.milofultz.com/reverse-horoscope\"><strong>Try it out here!</strong></a> // <a href=\"https://github.com/milofultz/reverse_horoscope\">Check out the project files on GitHub</a></p><p>If you ever thought that your zodiac sign didn‚Äôt <em>truly</em> represent you, this is for you. Take this quiz to find out what your real birthday should be based on these twelve questions!</p><hr /><p>When beginning the quiz, the questions are pulled from the list of horoscopes and then populate the question elements. These are then loaded one by one via jQuery before submitting the final question.</p><p>Once the questions are submitted, the winning sign is decided and the birthday is created from these results. By knowing the midpoint of each sign, the birthday date is chosen through calculating the adjusted midpoint based on the scores of the adjacent signs.</p><p>Uses <a href=\"https://chartscss.org/\">Charts.css</a> for the bar graph at the end and <a href=\"https://jquery.com/\">jQuery</a> for animation and DOM population.</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2021/01/06/reverse-horoscope",
            
            
            
            
            
            "date_published": "2021-01-06T00:00:00-08:00",
            "date_modified": "2021-01-06T00:00:00-08:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/12/27/atlb-notes",
            "title": "üìï Algorithms To Live By - Book Notes",
            "summary": "Algorithms To Live By - Book Notes",
            "content_text": "These are notes from the book Algorithms To Live By by Brian Christian and Tom Griffiths. These are all just my paraphrasings and may not be 100% accurate, but I tried to transcribe what I thought were the most salient points and put them up. All unattributed quotes are merely citations from the book.Explore/Exploit: AKA What‚Äôs New/What‚Äôs BestIntervalThe length of an interval and where you are within it defines whether one should be in a mode of explore or exploit. At the beginning of an interval, one has time and necessity to explore and the highest return on investment of time. At the end, the ROI are almost none to exploring and therefore exploit becomes much more valuable.A/B Tests  A/B tests are when multiple presentations or implementations are used until the best option is decided upon; then the process repeats with the winner and another option.  In A/B testing, the user is the product. The user is being used to gain something that can‚Äôt otherwise be gained. This is why online services can be free, is that the providers are getting valuable data.Zelen‚Äôs AlgorithmZelen‚Äôs algorithm is a variant of the A/B test that increases the likelihood of the most successful choice and minimizes the likelihood of the other. It is one way to better quantify the A/B test.  There are two choices or tests (A and B). These are chosen at random as if balls in a hat.  When one of the random choices or tests succeeds, the successful choice or test is increased in probability, as in adding another of those balls to the hat. If the choice is a failure, the other choice is increased in probability, as in adding another of those balls to the hat.Regret and OptimismYour amount of regret will always increase, even if you chose the best choice. If you choose the best choice, it may increase more slowly or slow down, but it is still there. The minimum possible regret increases logarithmically.  In the long run, optimism is the best prevention for regret.Upper Confidence Bounds are the highest payout that an option could possibly have, based on the knowledge we have.  The UCB is always higher than the expected value but by less and less as we get more experience with a particular option.Summary            Explore      Exploit                  Necessary at the beginning      Impossible without explore              Only explore means no ability to connect or grow with discoveries      Only exploit means no more potential bests; can‚Äôt find any new              Exploring determines there is not a clear end in sight      Exploiting signals an end of the interval              Children are almost exclusively here      Adults are almost exclusively here      Optimal Stopping - Knowing When To Move OnOptimal stopping is a way to know when to cut losses and move on. Don‚Äôt waste potential opportunities or resources on irrational ideas or scenarios.No Information ScenariosThis applies only in ‚Äúno information‚Äù games, where no information is provided on the data that is being looked through: the number of things, the things to come, the total population, etc. In this situation, you can only compare the elements to one another and not to a standard or metric.  Look then leap: set a predetermined time to gather data and don‚Äôt choose anything. After that, be willing to commit to anything that is better than what you saw before.  37%: A variant of Look then leap, the 37% rule is a rule derived from the idea of optimal stopping. 37% into a search, one should be prepared to pounce on the first thing they find that is better than what they saw before. First 37% is only looking and gathering data. Used in house searches, hiring, etc.Second Chance ScenariosIn second chance scenarios, being restless and having doubt is important. Since you never know if you have the best **and **you have a second chance, this is important in getting the best.  To live in a restless word requires a certain restlessness in oneself.Full Information ScenariosThis is when you are using knowable and measurable things as a criteria or a standard with no second chances.The problem of when to sell an item is a full information problem. In this case, the cost of holding an item is the equivalent of a cost of running out of elements to search through. In both cases, the longer you wait, the less chance you have of turning a profit (or in the latter, the less chance of choosing an ideal element). The cost of holding goes up, be willing to accept less sooner, and vice versa.The threshold rule is used to pick somebody based upon their rating within the group after X amount of elements have passed by. If an element at X position within Y total elements has a rating above Z percentile, then you should choose them and look at any following elements. Or, choose element if over Z percentile and Y elements are left.Sorting - Reducing Future Search TimeSorting is only important in reducing future search time. As the cost of searching drops, the value of sorting goes down, and similarly, as the amount of elements to sort goes up, the speed in which it is done goes down.Instead of sorting by comparing elements to each other, a more efficient way to sort is by comparing to an external standard or measure. This is called a ‚Äúcardinal number‚Äù instead of an ‚Äúordinal number‚Äù. A benchmark like this allows sorting without time intensive systems. Overall it may be incorrect, but it‚Äôs good enough , saves time and potential problems, and is therefore acceptable. (Example: The ‚Äúlaw of gross tonnage‚Äù states that smaller yields to bigger. This may not always be true, but it is true a large amount of the time and will yield less expended less resources for a high accuracy.)AlgorithmsBig OBig O notation is about hard guarantees and deadlines.            Notation      Name      Analogy                  O(1)      Constant      Cleaning the house before a party              O(n)      Linear      Giving drinks to every guest              O(n log n)      Linearithmic      ¬†              O(n^2)      Quadratic      Every person meeting every person              O(2^n)      Exponential      ¬†              O(n!)      Factorial      Must organize everyone in every possible permutation      The fastest way to sort a list can‚Äôt be less than O(n) because you have to check all of the elements and that is at least the length of the list itself.More efficient algorithms can sacrifice accuracy for speed. For instance, errors in Mergesort can compound quickly, when simpler sorts like Bubblesort are much safer.Quadratic SortsBubble Sort  Start at the beginning  Test each element against the next one  If A &gt; B, swap A and B  Continue to the end of the elements  Repeat the above steps until all elements are sortedInsertion Sort  Start at the beginning  Copy each element into a new array  Put the copied element in order in the new array  Repeat the above steps until all elements have been copied into the new arrayLinearithmic SortMergesort  Start at the beginning of the array and take every two elements out as a pair  Compare each pair of elements and put them in order (element 1 and element 2, element 3 and element 4, etc.)  Now pair each group up with another group  Compare each pair of elements across groups and place them in order  Repeat this process until all groups have become one groupCaching - Minimize Searching, Maximize UseThe goal of a cache management system is to minimize the amount of times you need to search your ‚Äúbase‚Äù and maximize the times you find what you need in your ‚Äúcache‚Äù. Memory hierarchies are like a pyramid: the base in largest and accessed the least; the highest is accessed the most and is the smallest. For example, a library is the base and your checked out books are at the top.The alogirthms with which information in the cache is replaced by new information is similar to many algorithms and heuristics used in minimalism and getting rid of stuff (how long have I had it? when did I use it last?).Least Recently UsedThe Least Recently Used (LRU) algorithm is where you make LRU data more accessible, either via distance, ease, speed, location, etc. LRU is effective because of ‚ÄúTemporal Locality‚Äù: if it is in cache, it will probably be used again. Self organizing lists use LRU:  Put documents in a pile  When a document is recalled, put it on top when finished.  End result: least recently used is at the bottom (long term storage), most recently used at the top (cache)  The nearest thing to clairvoyance is to assume that history will repeat itself backwards.Our human memory is not limited but the time spent searching is. It is a library with one infinitely long bookshelf. Using LRU, the most popular things come to the front/top of mind, and vice versa. The aging mind getting slower is not due to lack of agility or speed. It is due to abundance of information and difficulty in successfully caching.Scheduling - Focus not on getting things done, but getting ‚Äúweighty‚Äù things doneHow you tackle your todo list is based on your goal. If your goal is to minimize time to total completion, do what has the shortest completion time first. THis makes each person waiting for their deliverables with the shortest amount of time. This also reduces total tasks on the todo list quickest. If your goal is to minimize oppressiveness/weight of tasks, divide the oppressiveness/weight of each task by the estimated completion time, and then do the tasks with the highest unit of weight per unit of time.The oppressiveness/weight metric needs an importance or price as a scale. The example below you could think of the weight metric as importance or dollars per hour to illustrate. Example (using a 1-10 scale of weight/oppressiveness with higher numbers being more oppressive, and an hour scale for time):  Task 1:          Weight: 1 (low)      Time: 8      Result: 1/8        Task 2:          Weight: 10 (high)      Time: 1      Result: 10/1        Comparison          Task 1 vs. Task 2 == 1/8 : 10/1 == Task 1 (1/8) is less important to do now than Task 2 (10/1).      In the context of debt reduction, stemming from these two algorithms are two different schools of thought:  Debt Snowball: focus is on removing the sources of the smallest balances first (using the ‚Äúminimize time to total completion‚Äù algorithm above).  Debt Avalanche: focus on removing the sources with the highest interest rates first (using the ‚Äúminimize oppressiveness/weight of tasks‚Äù algorithm above)Anti-PatternsPreemption is the ability to stop mid-task and start another. Using previous algorithms, preemption allows flexibility with tasks that can‚Äôt be started until a certain time or requisite is met. If receiving a new task in the middle of another one, comparing them using a weighted SPT ratio of weight/time is the best option.Context switching is work that is done in switching tasks to ensure that new task can be done, also known as meta-work. The cost of context switching is throughput. More responsiveness (more context switching with a lower threshold of rejection) leads to less throughput overall Lower responsiveness (less context switching with a higher threshold of rejection) leads to higher throughput overall.Thrashing is when this meta-work is taking up all of your time and no actual work can be done. If one finds themselves in a thrashing state, the best thing to do at that point is to do whatever tasks in whatever order to open up more resources.Priority inversion is where a lower level task is blocking a higher level task.Pre-crastination is when you choose smaller subtasks over a major task, with the goal being to lessen the total load of tasks. Pre-crastinators act with the wrong metric in mind: when a major task is difficult to manage, they try to lessen this difficulty by going for the ‚Äúminimize time to total completion‚Äù algorithm instead of the ‚Äúminimize oppressiveness‚Äù algorithm. This is most common in systems with no weighting system in place. For instance, email icons show all unread messages, including those messages that are unimportant as well as those that are. In trying to deal with the most weighty emails, this leads people to lower the total number of unread messages instead of dealing with those weighty emails, in an attempt to relieve the problem. If the goal is just to have less unreads, then this is the best choice, but if the goal is to do what is important, then the other algorithm is best, and therefore, managing the most weighty emails first is the best choice.  In the case of app badges, if we can‚Äôt get them to reflect our actual priorities, and can‚Äôt overcome the impulse to optimally reduce any numerical figure thrown in out face, then perhaps the next best thing is to turn the badges off.Best PracticesSetting minimum periods with no interruptions allow both the throughput and responsiveness without sacrificing either, a la Pomodoro Method. Determine the minimum acceptable limit of responsiveness and then be no more responsive than that.Interrupt coalescing is the grouping of like interrupts to all be done at once. Let all interrupts of type X wait until a minimum acceptable responsiveness and then attend to them all at once.When priority inversion is an issue, use priority inheritance, where that lower level task that is blocking the higher level task inherits the priority of that task. If you can‚Äôt do task Y because task Z isn‚Äôt done yet, then task Z is now the most important task to be done.Predictions  Events are always experienced at their proper frequencies, but this isn‚Äôt true of language.Good predictions require good priors. People generally have a ton of information from past experience and this allows good models. However, we retell interesting stories because of how interesting they are. This makes them seem to be more likely than they really are to be.The Stanford Marshmallow Experiment and its successive study to replicate it‚Äôs findings was not at its core a study of delayed gratification, as much as it was trust that the system will honor its word in giving you the marshmallow it promised. Kids who lived in places with less trust in authority or the words of others were less likely to wait as it would have no perceived benefit to them.Laws and RulesLaplace‚Äôs LawWith no priors or prior information given or known, the probability of a given event happening is (the number of successes + 1) / (the number of attempts + 2).Bayes‚Äôs RuleThis shows the probability of one scenario given that another scenario is true. The formula is written as Probability of A given B = [(Probability of B given A) multiplied by (Probability of A)] / (Probability of B).Example: What is the probability that the person is a librarian and not a farmer given a description? (from 3Blue1Brown‚Äôs video on Bayes Rule)The total options available are that the person described is either a farmer or a librarian.P(librarian | description) = ( P(description | librarian) * P(librarian) ) / P(description)  P(description | librarian) = the likelihood that the description fits a given librarian, let‚Äôs say 40%  P(librarian) = the percentage of librarians (10) to farmers (200), ~5%  P(description) = the likelihood that the description fits a given librarian AND the likelihood that the description fits a given farmer;          Librarian: let‚Äôs say 40%      Farmer: let‚Äôs say 10%      Total: (.4 * 10 + .1 * 200) / 210 = 11%      P(librarian | description) = ( 40 * 5 ) / 11 = 200/11 = 18% probability of the description matching a librarian in the given sample  The richer the information we bring to Bayes rule, the more useful the predictions we can get out of it.3Blue1Brown‚Äôs second video on Bayes‚Äôs RuleCopernican PrincipleWithout prior information, we encounter things on on average halfway through their entire existence. They will last as long as they already have again.Distributions/ScalesNormal Distribution: use the Average RuleThere is an average and then falls sharply on either side. Usually follows a single appropriate scale, e.g. average lifespan is 76; low is single digits and high is triple.The Average Rule is to use the distribution‚Äôs average to make your prediction.Power Law Distribution: use the Multiplicative RuleFollows a more displaced curve. Often accompanied by hige discrepancies of numbers, e.g. average income is $58k, but 2/3 of population make less while .01% make 100 times more. Can be interpreted as the 80/20 rule.The Multiplicative Rule is that, in the case of a power law distribution, the observation made can be multiplied by a constant factor to make a prediction.Erlang Distribution: use the Additive RuleIn between a normal and power law distribution. Models include radioactive decay, political terms in office.The Additive Rule is that things will go on a constant amount longer. These distributions yield the same prediction regardless of history or current state.Overfitting and How To Avoid ItOverfitting is a model that contains more parameters than can be justified by the data. Applying simple heuristics (fewer models or a simpler formula) can often be better and more accurate due to overfitting and confidence in it by the user. Too simple of a model will get you inaccurate results; too complex will imply things that don‚Äôt exist or are hyperbolic. The more noise you have, the more simple your model or heuristics need to be to ensure no overfitting occurs. The less noise you have, the more complex your model and heuristics can be. The more accurate our data, the more factors can be used safely. Adding more factors to help match the data correctly is not necessarily the way to get good predictions.Overfitting your work to fit the picture of success is product over process thinking. If your goal is to lose 30 pounds and you don‚Äôt eat, you will succeed (product) but you will also sacrifice the form (process) necessary to do it in a way that addressed the underlying information and goal: better health. Focus on the way and process over all else.In focusing on form, be careful what you measure as goal oriented behavior. This will be reached at all costs and that may or may not be in the way that was asked.Early stoppingEarly stopping is used to stop the refinement or research into solving a problem before you get too in the weeds. Overfitting will take place beyond the most important factors.  How early to stop depends on the gap between what you can measure and what really matters.Cross validationCross validation is assessing the given data and seeing how well the model predicts unseen data.  Withhold data points to plug in later and see if they follow  Use data pulled from another measure and see if it holds upCross training with different educational systems or testing methods can ensure that the learning is not being ‚Äútaught to the test‚Äù.RegularizationRegularization is introducing penalties for more complexity in the model to ensure that the extra complexity is worth it. Only the most important factors must stay in relation to how much importance the overall function the element is to the system. For instance, the brain would not be evolutionarily viable if it took 20% of our caloric intake and didn‚Äôt provide such benefits as it does now. Also, the brain is apparently not important enough to take 40% of our caloric intake.PredictionsModelsHill ClimbingHill Climbing is starting with a possibility and editing that possibility over and over to find the best solution. It gives you the ‚Äúlocal maximum‚Äù to your starting point. Hill climbing can be augmented with ‚Äújitter‚Äù, an applied randomness to test slight deviations for successful outcomes.Different types of Hill Climbing include:  ‚ÄúShotgun‚Äù hill climbing: restarting from a totally random or shuffled possibility and repeating your whole process.  Metropolis Algorithm: accepting slightly worse possibilities at random to ensure new directions are taken.  Simulated Annealing: starting at a random point, always take a better solution if found and accept slightly worse solutions X% of the time. Continue lowering X until it is zero and you will have found the local maximum. Good for use with Metropolis, simulates jitter, and utilizes shotgun.  Your likelihood of following a bad idea should be inversely proportional to how bad it is.Monte Carlo MethodReplace exhaustive probability calculations with sample simulations, usually samples made of random inputs.Sieve of EratosthenesExample: To find primes from 1 to n:  Write all numbers from 1 to n  Start at 2 and cross off any multiples of 2.  Repeat with all numbers not yet crossed out.  When n/2 is reached, all numbers not yet crossed out are primes.Greedy/Myopic AlgorithmsThese focus on only the best choice at each step and don‚Äôt worry about the others.Types of Relaxation and Their ImplementationConstraint RelaxationConstraint relaxation is when you try to solve an easier version of the problem, and then when you‚Äôve made progress, add constraints back in. Constraint relaxation is a tradeoff of time for good-enough solutions.Remove the constraints, make progress, and then reintegrate the constraints.Discrete Optimization/Continuous RelaxationDiscrete optimization/continuous relaxation is used where fractions aren‚Äôt used (number of fire trucks per capita, number of people to vaccinate). Relaxing these to use fractions and then round from there is usually good enough (number of fire trucks ending up being 1.2 per capita, rounding to 1).Turn discrete measurements to continuous measurements and then round them off.Lagrangian RelaxationIn optimization, there are the rules and the scorekeeping. Moving constraints from the rules (input) to the scorekeeping (output) allows for impossible solutions to get close enough.Change the bindings on the rules into bindings on the score.  The perfect is the enemy of the good. - VoltaireNetworkingExponential BackoffIf an attempt is failed, increase the previous constraint by double.  If network is not connecting, wait between 1-2s to try and reconnect; again, wait 2-4s more; etc.  If a person doesn‚Äôt respond to your call or text, wait 1 day to follow up; again, wait 2 days, etc.  If a person violates probation, the 1st time they should spend 1 day in jail; the 2nd, 2 days; 3rd, 4 days; etc.Additive increase, multiplicative decreaseOn a success, increase the input side at a constant rate. On a failure, cut back that input by half. Applicable most directly to internet connections and attempts to ask for or send information.BackchannelsThe backchannels in communication are responses, acknowledgements, or the lack thereof. In a conversation or speech, the effectiveness of a speaker is partly dependent on the listener‚Äôs backchannel communication.TaildropA taildrop is the dropping of everything that didn‚Äôt fit within the buffer. Modern communication doesn‚Äôt allow taildrop, and was specifically made to stop it. For example, a home phone with a tape message machine will eventually run out of space, but an email box has no feasible limit of how large the backlog can get. We aren‚Äôt always connected, but we are always buffered.  One of the fundamental principles of buffers is that they only work correctly if they are routinely zeroed out.Game Theory  We can hope to be fortunate, but should strive to be wise.‚ÄúPrice of anarchy‚Äù: The gap between cooperation and competition. The bigger the difference, the higher the price.Revelation Principle: Any game that requires strategic masking of the truth can be transformed into a game where the dominant strategy is honesty.Computational Kindness: relieving the amount of things for sombody to compute when forced with your problem. By asking a very specific question, the answer will be simpler. Too many questions will feel intractable. Instead of ‚Äúpassing the cognitive buck‚Äù, offering a suggestion is a way to lessen the burden for others. Instead of a continued computation, aka spinning (will the bus come soon?), opt for a single one, aka blocking (the bus is coming in 10 minutes; I can/cannot wait).LevelingOnly playing one level above your opponent. If you are playing at level 3 and they are at level 1, it is likely you will be overthinking your strategy and overfit your model.  Level 1 - I know  Level 2 - I know you know  Level 3 - You know I know you know  etc.An Information Cascade is when external information affects your personal information so much that you then disregard your own info completely.  Be wary of cases where you know more about what people are doing than why.  Actions are not beliefs. Do not misinterpret actions as beliefs.EquilibriumIn a two player game, this is the best strategy assuming rational play. This is distinctly outside of leveling, meta strategy, etc. The predictive abilities of Nash equilibrium are only useful if you can find them as a player.If the point of equilibrium can‚Äôt be changed directly, then the rules must be changed to force the equilibrium to move.  If employers give an option to take vacation or not, the equilibrium will shift to be the ‚Äúmost loyal‚Äù employee, taking less vacation than their peers.  By making vacation mandatory, this leaves everyone free to take the break, not allowing the competition to overtake their good judgment in taking care of themselves.AuctionsSealed Bid First-Price Auctions: Bids are made in secret and highest offer wins. The bidders are not offering what they want to pay; they are offering what they think others will pay plus some. Winners almost always overpay.Dutch Auction: Starting price is lowered until someone wants to buy it.English Auction: Starting price is raised until highest bidder.Vickrey Auction: Sealed bid first-price auction but winner pays second highest bid. Utilizes the Revelation Principle to convert the sealed bid first-price auction‚Äôs ‚Äústrategic masking of the truth‚Äù into a game where people play honestly.",
            "content_html": "<p>These are notes from the book <a href=\"https://openlibrary.org/works/OL17357767W/Algorithms_to_Live_By\"><em>Algorithms To Live By</em> by Brian Christian and Tom Griffiths</a>. These are all just my paraphrasings and may not be 100% accurate, but I tried to transcribe what I thought were the most salient points and put them up. All unattributed quotes are merely citations from the book.</p><hr /><h2 id=\"exploreexploit-aka-whats-newwhats-best\">Explore/Exploit: AKA What‚Äôs New/What‚Äôs Best</h2><h3 id=\"interval\">Interval</h3><p>The length of an interval and where you are within it defines whether one should be in a mode of explore or exploit. At the beginning of an interval, one has time and necessity to explore and the highest return on investment of time. At the end, the ROI are almost none to exploring and therefore exploit becomes much more valuable.</p><h3 id=\"ab-tests\">A/B Tests</h3><ul>  <li>A/B tests are when multiple presentations or implementations are used until the best option is decided upon; then the process repeats with the winner and another option.</li>  <li>In A/B testing, the user is the product. The user is being used to gain something that can‚Äôt otherwise be gained. This is why online services can be free, is that the providers are getting valuable data.</li></ul><h3 id=\"zelens-algorithm\">Zelen‚Äôs Algorithm</h3><p>Zelen‚Äôs algorithm is a variant of the A/B test that increases the likelihood of the most successful choice and minimizes the likelihood of the other. It is one way to better quantify the A/B test.</p><ul>  <li>There are two choices or tests (A and B). These are chosen at random as if balls in a hat.</li>  <li>When one of the random choices or tests succeeds, the successful choice or test is increased in probability, as in adding another of those balls to the hat. If the choice is a failure, the other choice is increased in probability, as in adding another of those balls to the hat.</li></ul><h3 id=\"regret-and-optimism\">Regret and Optimism</h3><p>Your amount of regret will always increase, even if you chose the best choice. If you choose the best choice, it may increase more slowly or slow down, but it is still there. The minimum possible regret increases <strong>logarithmically</strong>.</p><blockquote>  <p>In the long run, optimism is the best prevention for regret.</p></blockquote><p>Upper Confidence Bounds are the highest payout that an option could possibly have, based on the knowledge we have.</p><blockquote>  <p>The UCB is always higher than the expected value but by less and less as we get more experience with a particular option.</p></blockquote><h3 id=\"summary\">Summary</h3><table>  <thead>    <tr>      <th><strong>Explore</strong></th>      <th><strong>Exploit</strong></th>    </tr>  </thead>  <tbody>    <tr>      <td>Necessary at the beginning</td>      <td>Impossible without explore</td>    </tr>    <tr>      <td>Only explore means no ability to connect or grow with discoveries</td>      <td>Only exploit means no more potential bests; can‚Äôt find any new</td>    </tr>    <tr>      <td>Exploring determines there is not a clear end in sight</td>      <td>Exploiting signals an end of the interval</td>    </tr>    <tr>      <td>Children are almost exclusively here</td>      <td>Adults are almost exclusively here</td>    </tr>  </tbody></table><hr /><h2 id=\"optimal-stopping---knowing-when-to-move-on\">Optimal Stopping - Knowing When To Move On</h2><p>Optimal stopping is a way to know when to cut losses and move on. Don‚Äôt waste potential opportunities or resources on irrational ideas or scenarios.</p><h3 id=\"no-information-scenarios\">No Information Scenarios</h3><p>This applies only in ‚Äúno information‚Äù games, where no information is provided on the data that is being looked through: the number of things, the things to come, the total population, etc. In this situation, you can only compare the elements to one another and not to a standard or metric.</p><ul>  <li>Look then leap: set a predetermined time to gather data and don‚Äôt choose anything. After that, be willing to commit to anything that is better than what you saw before.</li>  <li>37%: A variant of Look then leap, the 37% rule is a rule derived from the idea of optimal stopping. 37% into a search, one should be prepared to pounce on the first thing they find that is better than what they saw before. First 37% is only looking and gathering data. Used in house searches, hiring, etc.</li></ul><h3 id=\"second-chance-scenarios\">Second Chance Scenarios</h3><p>In second chance scenarios, being restless and having doubt is important. Since you never know if you have the best **and **you have a second chance, this is important in getting the best.</p><blockquote>  <p>To live in a restless word requires a certain restlessness in oneself.</p></blockquote><h3 id=\"full-information-scenarios\">Full Information Scenarios</h3><p>This is when you are using knowable and measurable things as a criteria or a standard with no second chances.The problem of when to sell an item is a full information problem. In this case, the cost of holding an item is the equivalent of a cost of running out of elements to search through. In both cases, the longer you wait, the less chance you have of turning a profit (or in the latter, the less chance of choosing an ideal element). The cost of holding goes up, be willing to accept less sooner, and vice versa.</p><p>The <strong>threshold</strong> rule is used to pick somebody based upon their rating within the group after X amount of elements have passed by. If an element at X position within Y total elements has a rating above Z percentile, then you should choose them and look at any following elements. Or, choose element if over Z percentile and Y elements are left.</p><hr /><h2 id=\"sorting---reducing-future-search-time\">Sorting - Reducing Future Search Time</h2><p>Sorting is <strong>only</strong> important in reducing future search time. As the cost of searching drops, the value of sorting goes down, and similarly, as the amount of elements to sort goes up, the speed in which it is done goes down.</p><p>Instead of sorting by comparing elements to each other, a more efficient way to sort is by comparing to an external standard or measure. This is called a ‚Äúcardinal number‚Äù instead of an ‚Äúordinal number‚Äù. A benchmark like this allows sorting without time intensive systems. Overall it may be incorrect, but it‚Äôs good enough , saves time and potential problems, and is therefore acceptable. (Example: The ‚Äúlaw of gross tonnage‚Äù states that smaller yields to bigger. This may not always be true, but it is true a large amount of the time and will yield less expended less resources for a high accuracy.)</p><h3 id=\"algorithms\">Algorithms</h3><h4 id=\"big-o\">Big O</h4><p>Big O notation is about hard guarantees and deadlines.</p><table>  <thead>    <tr>      <th><strong>Notation</strong></th>      <th><strong>Name</strong></th>      <th><strong>Analogy</strong></th>    </tr>  </thead>  <tbody>    <tr>      <td>O(1)</td>      <td>Constant</td>      <td>Cleaning the house before a party</td>    </tr>    <tr>      <td>O(n)</td>      <td>Linear</td>      <td>Giving drinks to every guest</td>    </tr>    <tr>      <td>O(n log n)</td>      <td>Linearithmic</td>      <td>¬†</td>    </tr>    <tr>      <td>O(n^2)</td>      <td>Quadratic</td>      <td>Every person meeting every person</td>    </tr>    <tr>      <td>O(2^n)</td>      <td>Exponential</td>      <td>¬†</td>    </tr>    <tr>      <td>O(n!)</td>      <td>Factorial</td>      <td>Must organize everyone in every possible permutation</td>    </tr>  </tbody></table><p>The fastest way to sort a list can‚Äôt be less than O(n) because you have to check all of the elements and that is at least the length of the list itself.</p><p>More efficient algorithms can sacrifice accuracy for speed. For instance, errors in Mergesort can compound quickly, when simpler sorts like Bubblesort are much safer.</p><h4 id=\"quadratic-sorts\">Quadratic Sorts</h4><h5 id=\"bubble-sort\">Bubble Sort</h5><ul>  <li>Start at the beginning</li>  <li>Test each element against the next one</li>  <li>If A &gt; B, swap A and B</li>  <li>Continue to the end of the elements</li>  <li>Repeat the above steps until all elements are sorted</li></ul><h5 id=\"insertion-sort\">Insertion Sort</h5><ul>  <li>Start at the beginning</li>  <li>Copy each element into a new array</li>  <li>Put the copied element in order in the new array</li>  <li>Repeat the above steps until all elements have been copied into the new array</li></ul><h4 id=\"linearithmic-sort\">Linearithmic Sort</h4><h5 id=\"mergesort\">Mergesort</h5><ul>  <li>Start at the beginning of the array and take every two elements out as a pair</li>  <li>Compare each pair of elements and put them in order (element 1 and element 2, element 3 and element 4, etc.)</li>  <li>Now pair each group up with another group</li>  <li>Compare each pair of elements across groups and place them in order</li>  <li>Repeat this process until all groups have become one group</li></ul><hr /><h2 id=\"caching---minimize-searching-maximize-use\">Caching - Minimize Searching, Maximize Use</h2><p>The goal of a cache management system is to minimize the amount of times you need to search your ‚Äúbase‚Äù and maximize the times you find what you need in your ‚Äúcache‚Äù. Memory hierarchies are like a pyramid: the base in largest and accessed the least; the highest is accessed the most and is the smallest. For example, a library is the base and your checked out books are at the top.</p><p>The alogirthms with which information in the cache is replaced by new information is similar to many algorithms and heuristics used in minimalism and getting rid of stuff (how long have I had it? when did I use it last?).</p><h3 id=\"least-recently-used\">Least Recently Used</h3><p>The Least Recently Used (LRU) algorithm is where you make LRU data more accessible, either via distance, ease, speed, location, etc. LRU is effective because of ‚ÄúTemporal Locality‚Äù: if it is in cache, it will probably be used again. Self organizing lists use LRU:</p><ul>  <li>Put documents in a pile</li>  <li>When a document is recalled, put it on top when finished.</li>  <li>End result: least recently used is at the bottom (long term storage), most recently used at the top (cache)</li></ul><blockquote>  <p>The nearest thing to clairvoyance is to assume that history will repeat itself backwards.</p></blockquote><p>Our human memory is not limited but the time spent searching is. It is a library with one infinitely long bookshelf. Using LRU, the most popular things come to the front/top of mind, and vice versa. The aging mind getting slower is not due to lack of agility or speed. It is due to abundance of information and difficulty in successfully caching.</p><hr /><h2 id=\"scheduling---focus-not-on-getting-things-done-but-getting-weighty-things-done\">Scheduling - Focus not on getting things done, but getting ‚Äúweighty‚Äù things done</h2><p>How you tackle your todo list is based on your goal. If your goal is to <strong>minimize time to total completion</strong>, do what has the shortest completion time first. THis makes each person waiting for their deliverables with the shortest amount of time. This also reduces total tasks on the todo list quickest. If your goal is to <strong>minimize oppressiveness/weight of tasks</strong>, divide the oppressiveness/weight of each task by the estimated completion time, and then do the tasks with the highest unit of weight per unit of time.</p><p>The oppressiveness/weight metric needs an importance or price as a scale. The example below you could think of the weight metric as importance or dollars per hour to illustrate. Example (using a 1-10 scale of weight/oppressiveness with higher numbers being more oppressive, and an hour scale for time):</p><ul>  <li><strong>Task 1:</strong>    <ul>      <li>Weight: 1 (low)</li>      <li>Time: 8</li>      <li><strong>Result: 1/8</strong></li>    </ul>  </li>  <li><strong>Task 2:</strong>    <ul>      <li>Weight: 10 (high)</li>      <li>Time: 1</li>      <li><strong>Result: 10/1</strong></li>    </ul>  </li>  <li><strong>Comparison</strong>    <ul>      <li>Task 1 vs. Task 2 == 1/8 : 10/1 == Task 1 (1/8) is less important to do now than Task 2 (10/1).</li>    </ul>  </li></ul><p>In the context of debt reduction, stemming from these two algorithms are two different schools of thought:</p><ul>  <li><strong>Debt Snowball</strong>: focus is on removing the sources of the smallest balances first (using the ‚Äúminimize time to total completion‚Äù algorithm above).</li>  <li><strong>Debt Avalanche:</strong> focus on removing the sources with the highest interest rates first (using the ‚Äúminimize oppressiveness/weight of tasks‚Äù algorithm above)</li></ul><h3 id=\"anti-patterns\">Anti-Patterns</h3><p><strong>Preemption</strong> is the ability to stop mid-task and start another. Using previous algorithms, preemption allows flexibility with tasks that can‚Äôt be started until a certain time or requisite is met. If receiving a new task in the middle of another one, comparing them using a weighted SPT ratio of weight/time is the best option.</p><p><strong>Context switching</strong> is work that is done in switching tasks to ensure that new task can be done, also known as <strong>meta-work</strong>. The cost of context switching is throughput. More responsiveness (more context switching with a lower threshold of rejection) leads to less throughput overall Lower responsiveness (less context switching with a higher threshold of rejection) leads to higher throughput overall.</p><p><strong>Thrashing</strong> is when this meta-work is taking up all of your time and no actual work can be done. If one finds themselves in a thrashing state, the best thing to do at that point is to do whatever tasks in whatever order to open up more resources.</p><p><strong>Priority inversion</strong> is where a lower level task is blocking a higher level task.</p><p><strong>Pre-crastination</strong> is when you choose smaller subtasks over a major task, with the goal being to lessen the total load of tasks. Pre-crastinators act with the wrong metric in mind: when a major task is difficult to manage, they try to lessen this difficulty by going for the ‚Äúminimize time to total completion‚Äù algorithm instead of the ‚Äúminimize oppressiveness‚Äù algorithm. This is most common in systems with no weighting system in place. For instance, email icons show all unread messages, including those messages that are unimportant as well as those that are. In trying to deal with the most weighty emails, this leads people to lower the total number of unread messages instead of dealing with those weighty emails, in an attempt to relieve the problem. If the goal is just to have less unreads, then this is the best choice, but if the goal is to do what is important, then the other algorithm is best, and therefore, managing the most weighty emails first is the best choice.</p><blockquote>  <p>In the case of app badges, if we can‚Äôt get them to reflect our actual priorities, and can‚Äôt overcome the impulse to optimally reduce any numerical figure thrown in out face, then perhaps the next best thing is to turn the badges off.</p></blockquote><h3 id=\"best-practices\">Best Practices</h3><p>Setting minimum periods with no interruptions allow both the throughput and responsiveness without sacrificing either, a la Pomodoro Method. <strong>Determine the minimum acceptable limit of responsiveness and then be no more responsive than that.</strong></p><p><strong>Interrupt coalescing</strong> is the grouping of like interrupts to all be done at once. Let all interrupts of type X wait until a minimum acceptable responsiveness and then attend to them all at once.</p><p>When <strong>priority inversion</strong> is an issue, use <strong>priority inheritance</strong>, where that lower level task that is blocking the higher level task inherits the priority of that task. If you can‚Äôt do task Y because task Z isn‚Äôt done yet, then task Z is now the most important task to be done.</p><hr /><h2 id=\"predictions\">Predictions</h2><blockquote>  <p>Events are always experienced at their proper frequencies, but this isn‚Äôt true of language.</p></blockquote><p>Good predictions require good priors. People generally have a ton of information from past experience and this allows good models. However, we retell interesting stories because of how interesting they are. This makes them seem to be more likely than they really are to be.</p><p>The Stanford Marshmallow Experiment and its successive study to replicate it‚Äôs findings was not at its core a study of delayed gratification, as much as it was trust that the system will honor its word in giving you the marshmallow it promised. Kids who lived in places with less trust in authority or the words of others were less likely to wait as it would have no perceived benefit to them.</p><h3 id=\"laws-and-rules\">Laws and Rules</h3><h4 id=\"laplaces-law\">Laplace‚Äôs Law</h4><p>With no priors or prior information given or known, the probability of a given event happening is <code class=\"highlighter-rouge\">(the number of successes + 1) / (the number of attempts + 2)</code>.</p><h4 id=\"bayess-rule\">Bayes‚Äôs Rule</h4><p>This shows the probability of <strong>one scenario</strong> given that <strong>another scenario</strong> is true. The formula is written as <code class=\"highlighter-rouge\">Probability of A given B = [(Probability of B given A) multiplied by (Probability of A)] / (Probability of B)</code>.</p><p>Example: What is the probability that <strong>the person is a librarian and not a farmer</strong> given <strong>a description</strong>? (from <a href=\"https://www.youtube.com/watch?v=HZGCoVF3YvM\">3Blue1Brown‚Äôs video on Bayes Rule</a>)</p><p>The total options available are that the person described is either a <strong>farmer</strong> or a <strong>librarian</strong>.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>P(librarian | description) = ( P(description | librarian) * P(librarian) ) / P(description)</code></pre></div></div><ul>  <li><code class=\"highlighter-rouge\">P(description | librarian)</code> = the likelihood that the description fits a given librarian, let‚Äôs say 40%</li>  <li><code class=\"highlighter-rouge\">P(librarian)</code> = the percentage of librarians (10) to farmers (200), ~5%</li>  <li><code class=\"highlighter-rouge\">P(description)</code> = the likelihood that the description fits a given librarian AND the likelihood that the description fits a given farmer;    <ul>      <li>Librarian: let‚Äôs say 40%</li>      <li>Farmer: let‚Äôs say 10%</li>      <li>Total: (.4 * 10 + .1 * 200) / 210 = 11%</li>    </ul>  </li></ul><p><code class=\"highlighter-rouge\">P(librarian | description) = ( 40 * 5 ) / 11 = 200/11</code> = 18% probability of the description matching a librarian in the given sample</p><blockquote>  <p>The richer the information we bring to Bayes rule, the more useful the predictions we can get out of it.</p></blockquote><p><a href=\"https://www.youtube.com/watch?v=U_85TaXbeIo\">3Blue1Brown‚Äôs second video on Bayes‚Äôs Rule</a></p><h4 id=\"copernican-principle\">Copernican Principle</h4><p>Without prior information, we encounter things on on average halfway through their entire existence. They will last as long as they already have <em>again</em>.</p><h3 id=\"distributionsscales\">Distributions/Scales</h3><h4 id=\"normal-distribution-use-the-average-rule\">Normal Distribution: use the Average Rule</h4><p>There is an average and then falls sharply on either side. Usually follows a single appropriate scale, e.g. average lifespan is 76; low is single digits and high is triple.</p><p>The Average Rule is to use the distribution‚Äôs average to make your prediction.</p><h4 id=\"power-law-distribution-use-the-multiplicative-rule\">Power Law Distribution: use the Multiplicative Rule</h4><p>Follows a more displaced curve. Often accompanied by hige discrepancies of numbers, e.g. average income is $58k, but 2/3 of population make less while .01% make 100 times more. Can be interpreted as the 80/20 rule.</p><p>The Multiplicative Rule is that, in the case of a power law distribution, the observation made can be multiplied by a constant factor to make a prediction.</p><h4 id=\"erlang-distribution-use-the-additive-rule\">Erlang Distribution: use the Additive Rule</h4><p>In between a normal and power law distribution. Models include radioactive decay, political terms in office.</p><p>The Additive Rule is that things will go on a constant amount longer. These distributions yield the same prediction regardless of history or current state.</p><h3 id=\"overfitting-and-how-to-avoid-it\">Overfitting and How To Avoid It</h3><p><a href=\"https://en.wikipedia.org/wiki/Overfitting\">Overfitting is a model that contains more parameters than can be justified by the data</a>. Applying simple heuristics (fewer models or a simpler formula) can often be better and more accurate due to overfitting and confidence in it by the user. Too simple of a model will get you inaccurate results; too complex will imply things that don‚Äôt exist or are hyperbolic. The more noise you have, the more simple your model or heuristics need to be to ensure no overfitting occurs. The less noise you have, the more complex your model and heuristics can be. The more accurate our data, the more factors can be used safely. Adding more factors to help match the data correctly is not necessarily the way to get good predictions.</p><p>Overfitting your work to fit the picture of success is product over process thinking. If your goal is to lose 30 pounds and you don‚Äôt eat, you will succeed (product) but you will also sacrifice the form (process) necessary to do it in a way that addressed the underlying information and goal: better health. Focus on the way and process over all else.</p><p>In focusing on form, be careful what you measure as goal oriented behavior. This will be reached at all costs and that may or may not be in the way that was asked.</p><h4 id=\"early-stopping\">Early stopping</h4><p>Early stopping is used to stop the refinement or research into solving a problem before you get too in the weeds. Overfitting will take place beyond the most important factors.</p><blockquote>  <p>How early to stop depends on the gap between what you can measure and what really matters.</p></blockquote><h4 id=\"cross-validation\">Cross validation</h4><p>Cross validation is assessing the given data and seeing how well the model predicts unseen data.</p><ul>  <li>Withhold data points to plug in later and see if they follow</li>  <li>Use data pulled from another measure and see if it holds up</li></ul><p>Cross training with different educational systems or testing methods can ensure that the learning is not being ‚Äútaught to the test‚Äù.</p><h4 id=\"regularization\">Regularization</h4><p>Regularization is introducing penalties for more complexity in the model to ensure that the extra complexity is worth it. Only the most important factors must stay in relation to how much importance the overall function the element is to the system. For instance, the brain would not be evolutionarily viable if it took 20% of our caloric intake and didn‚Äôt provide such benefits as it does now. Also, the brain is apparently not important enough to take 40% of our caloric intake.</p><hr /><h2 id=\"predictions-1\">Predictions</h2><h3 id=\"models\">Models</h3><h4 id=\"hill-climbing\">Hill Climbing</h4><p>Hill Climbing is starting with a possibility and editing that possibility over and over to find the best solution. It gives you the ‚Äúlocal maximum‚Äù to your starting point. Hill climbing can be augmented with ‚Äújitter‚Äù, an applied randomness to test slight deviations for successful outcomes.</p><p>Different types of Hill Climbing include:</p><ul>  <li><strong>‚ÄúShotgun‚Äù hill climbing</strong>: restarting from a totally random or shuffled possibility and repeating your whole process.</li>  <li><strong>Metropolis Algorithm</strong>: accepting slightly worse possibilities at random to ensure new directions are taken.</li>  <li><strong>Simulated Annealing</strong>: starting at a random point, always take a better solution if found and accept slightly worse solutions X% of the time. Continue lowering X until it is zero and you will have found the local maximum. Good for use with Metropolis, simulates jitter, and utilizes shotgun.</li></ul><blockquote>  <p>Your likelihood of following a bad idea should be inversely proportional to how bad it is.</p></blockquote><h4 id=\"monte-carlo-method\">Monte Carlo Method</h4><p>Replace exhaustive probability calculations with sample simulations, usually samples made of random inputs.</p><h4 id=\"sieve-of-eratosthenes\">Sieve of Eratosthenes</h4><p>Example: To find primes from 1 to n:</p><ul>  <li>Write all numbers from 1 to n</li>  <li>Start at 2 and cross off any multiples of 2.</li>  <li>Repeat with all numbers not yet crossed out.</li>  <li>When n/2 is reached, all numbers not yet crossed out are primes.</li></ul><h4 id=\"greedymyopic-algorithms\">Greedy/Myopic Algorithms</h4><p>These focus on only the best choice at each step and don‚Äôt worry about the others.</p><h3 id=\"types-of-relaxation-and-their-implementation\">Types of Relaxation and Their Implementation</h3><h4 id=\"constraint-relaxation\">Constraint Relaxation</h4><p>Constraint relaxation is when you try to solve an easier version of the problem, and then when you‚Äôve made progress, add constraints back in. <strong>Constraint relaxation is a tradeoff of time for good-enough solutions.</strong></p><p>Remove the constraints, make progress, and then reintegrate the constraints.</p><h4 id=\"discrete-optimizationcontinuous-relaxation\">Discrete Optimization/Continuous Relaxation</h4><p>Discrete optimization/continuous relaxation is used where fractions aren‚Äôt used (number of fire trucks per capita, number of people to vaccinate). Relaxing these to use fractions and then round from there is usually good enough (number of fire trucks ending up being 1.2 per capita, rounding to 1).</p><p>Turn discrete measurements to continuous measurements and then round them off.</p><h4 id=\"lagrangian-relaxation\">Lagrangian Relaxation</h4><p>In optimization, there are the rules and the scorekeeping. Moving constraints from the rules (input) to the scorekeeping (output) allows for impossible solutions to get close enough.</p><p>Change the bindings on the rules into bindings on the score.</p><blockquote>  <p>The perfect is the enemy of the good. - Voltaire</p></blockquote><hr /><h2 id=\"networking\">Networking</h2><h3 id=\"exponential-backoff\">Exponential Backoff</h3><p>If an attempt is failed, increase the previous constraint by double.</p><ul>  <li>If network is not connecting, wait between 1-2s to try and reconnect; again, wait 2-4s more; etc.</li>  <li>If a person doesn‚Äôt respond to your call or text, wait 1 day to follow up; again, wait 2 days, etc.</li>  <li>If a person violates probation, the 1st time they should spend 1 day in jail; the 2nd, 2 days; 3rd, 4 days; etc.</li></ul><h3 id=\"additive-increase-multiplicative-decrease\">Additive increase, multiplicative decrease</h3><p>On a success, increase the input side at a constant rate. On a failure, cut back that input by half. Applicable most directly to internet connections and attempts to ask for or send information.</p><h3 id=\"backchannels\">Backchannels</h3><p>The backchannels in communication are responses, acknowledgements, or the lack thereof. In a conversation or speech, the effectiveness of a speaker is partly dependent on the listener‚Äôs backchannel communication.</p><h3 id=\"taildrop\">Taildrop</h3><p>A taildrop is the dropping of everything that didn‚Äôt fit within the buffer. Modern communication doesn‚Äôt allow taildrop, and was specifically made to stop it. For example, a home phone with a tape message machine will eventually run out of space, but an email box has no feasible limit of how large the backlog can get. <strong>We aren‚Äôt always connected, but we are always buffered.</strong></p><blockquote>  <p>One of the fundamental principles of buffers is that they only work correctly if they are routinely zeroed out.</p></blockquote><hr /><h2 id=\"game-theory\">Game Theory</h2><blockquote>  <p>We can hope to be fortunate, but should strive to be wise.</p></blockquote><p><strong>‚ÄúPrice of anarchy‚Äù</strong>: The gap between cooperation and competition. The bigger the difference, the higher the price.</p><p><strong>Revelation Principle</strong>: Any game that requires strategic masking of the truth can be transformed into a game where the dominant strategy is honesty.</p><p><strong>Computational Kindness</strong>: relieving the amount of things for sombody to compute when forced with your problem. By asking a very specific question, the answer will be simpler. Too many questions will feel intractable. Instead of ‚Äúpassing the cognitive buck‚Äù, offering a suggestion is a way to lessen the burden for others. Instead of a continued computation, aka spinning (will the bus come soon?), opt for a single one, aka blocking (the bus is coming in 10 minutes; I can/cannot wait).</p><h3 id=\"leveling\">Leveling</h3><p>Only playing one level above your opponent. If you are playing at level 3 and they are at level 1, it is likely you will be overthinking your strategy and overfit your model.</p><ul>  <li>Level 1 - I know</li>  <li>Level 2 - I know you know</li>  <li>Level 3 - You know I know you know</li>  <li>etc.</li></ul><p>An <strong>Information Cascade</strong> is when external information affects your personal information so much that you then disregard your own info completely.</p><ul>  <li>Be wary of cases where you know more about what people are doing than why.</li>  <li>Actions are not beliefs. Do not misinterpret actions as beliefs.</li></ul><h3 id=\"equilibrium\">Equilibrium</h3><p>In a two player game, this is the best strategy assuming rational play. This is distinctly outside of leveling, meta strategy, etc. The predictive abilities of Nash equilibrium are only useful if you can find them as a player.</p><p>If the point of equilibrium can‚Äôt be changed directly, then the rules must be changed to force the equilibrium to move.</p><ul>  <li>If employers give an option to take vacation or not, the equilibrium will shift to be the ‚Äúmost loyal‚Äù employee, taking less vacation than their peers.</li>  <li>By making vacation mandatory, this leaves everyone free to take the break, not allowing the competition to overtake their good judgment in taking care of themselves.</li></ul><h3 id=\"auctions\">Auctions</h3><p><strong>Sealed Bid First-Price Auctions</strong>: Bids are made in secret and highest offer wins. The bidders are not offering what they want to pay; they are offering what they think <em>others</em> will pay plus some. Winners almost always overpay.</p><p><strong>Dutch Auction</strong>: Starting price is lowered until someone wants to buy it.</p><p><strong>English Auction</strong>: Starting price is raised until highest bidder.</p><p><strong>Vickrey Auction</strong>: Sealed bid first-price auction but winner pays second highest bid. Utilizes the Revelation Principle to convert the sealed bid first-price auction‚Äôs ‚Äústrategic masking of the truth‚Äù into a game where people play honestly.</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/12/27/atlb-notes",
            
            
            
            
            
            "date_published": "2020-12-27T00:00:00-08:00",
            "date_modified": "2020-12-27T00:00:00-08:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/12/13/aoc-day-13",
            "title": "Solution to Advent of Code 13 - LCM with Offsets",
            "summary": "Solution to Advent of Code 13 - LCM with Offsets",
            "content_text": "Here, to help justify that I definitely stole an answer from somebody on Reddit to answer this question, I‚Äôm going to explain why the answer works. Mainly for myself to truly understand this, but also so that if somebody searches for something like this at a later date, there will be a reference. (I‚Äôll be using the smaller sample data for the explanation because it is way easier to grok)Check out the problem here, or this won‚Äôt make any sense.Brute ForceMy initial solution used brute force, as essentially all of my solutions have so far, and this‚Ä¶didn‚Äôt work. My computer was working really hard, fans spinning and everything, but wasn‚Äôt getting anywhere (because the answer for me ended up being 667,437,230,788,118 and I started at 1). I went to bed and tried to not think about it. First of course we start with parsing the data, which is a line of ‚Äúbus IDs‚Äù, which actually correspond to the intervals at which the buses leave the station.7,13,x,x,59,x,31,19I put these into an array, converting the numbers to integers and leaving the x‚Äôs as strings.[7, 13, 'x', 'x', 59, 'x', 31, 19]Here‚Äôs the pseudocode of the brute force solution:Set 'largest_number' to the largest number in the arraySet 'largest_offset' to the index of 'largest_number' in the arraySet the initial value of the 'multiple' by which to multiply the 'largest_number' to 1Set a 'found' variable to let the program know the solution has not been foundWhile the solution has not been 'found':    Set that the solution is 'found' until proven otherwise    Set the 'target' test value to the 'multiple' times the 'largest_number'    For each 'index' of each 'bus_ID' in the array        Set the 'offset' to the 'index' minus the 'largest_offset'        If the 'bus_ID' is an 'x', then continue to the next 'bus_ID'        If the remainder of (the sum of the 'target' and the 'offset') divided by the 'bus_ID' is not zero:        \tSet that the solution was not found and break out of the loop    Add one to the 'multiple'Return the 'target'I used the largest number in the array to try and speed up the already long search, as their multiples of 59 would get searched way faster than the multiples of 7. As this iterates through, it tests every multiple of the largest number against each number plus or minus its relative offset. Unfortunately, even though this works, it is not fast (at all) for the much longer and much more complex final puzzle input.One way I could have improved this was in the parsing of the data. Instead of trying to calculate weird offsets, I should have just included the offsets with the bus IDs as a tuple. The result would be a list of tuples, each of which include the offset and the bus ID/interval. The ‚Äòx‚Äôs are also discarded, as they are no longer necessary.# (offset, bus_id)[(0,7), (1,13), (4,59), (6,31), (7,19)]SievingThe idea of a ‚Äòsieve‚Äô in math is to use it to ‚Äòsieve‚Äô out all non-possibilities, leaving you with a much smaller pool to test. Most notable is the Sieve of Erastosthenes, which is used to calculate prime numbers.The most base case of this problem that I found was to find the least common multiple of a given set of integers. To find this using the sieve method, we can use this pseudocode:Set the initial value of the 'answer' number to 0Set the initial value of 'least common multiple' to 1For each 'number' in the array:\tWhile the remainder of the 'answer' value divided by the 'number' is not zero:\t\tAdd the value of the 'least common multiple' to the 'answer'\tSet the 'least common multiple' to the `answer`Return the 'answer'Example:Let‚Äôs say our given array of integers are [2,3,8]. We start by setting our answer as 0 and the least common multiple to 1. Then we reach the For loop, which will cycle through the numbers in the array:Set the `number` to the first number in the `array`, 2.While `answer` % `number` ‚â† 0: \t0 % 2 ‚â† 0 is true, so add `least common multiple` to the `answer`. `answer` now equals 1.\t1 % 2 ‚â† 0 is true, so add `least common multiple` to the `answer`. `answer` now equals 2.\t2 % 2 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 2.We continue through the for loop: `number` is the next in the `array`: 3.While `answer` % `number` ‚â† 0: \t2 % 3 ‚â† 0 is true, so add `least common multiple` to `answer`: 4.\t4 % 3 ‚â† 0 is true, so add `least common multiple` to `answer`:  6.\t6 % 3 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 6. We continue through the for loop: `number` is the next in the `array`: 8.While `answer` % `number` ‚â† 0: \t6 % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 12.\t12 % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 18.\t18 % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 24.\t24 % 8 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 24.One thing to note going forward is that all the numbers of the bus IDs are prime numbers, as if they were not, there would have to be some factorization in preparing to find the least common multiple. Finding the LCM of all primes is to just multiply them together, but with the offsets, we need this longhand to get there.Adding the OffsetsNow that we have this pseudocode, adding the offsets is easier for me to grok. The biggest difference is that we are going to utilize the least common multiple and the answer a tiny bit differently. Assuming we have our list of bus IDs from before, where each ID is a tuple containing the offset and the bus ID/interval, we now have to adjust our test in the while loop. Instead of testing for if the remainder of the answer divided by the number is not zero, we are going to test whether the remainder of the sum of the answer and the offset all divided by the number is not zero.('answer' + 'offset') % `number` ‚â† 0Now, here is the pseudocode, taking into account the offset needed to calculate the answer.Set the initial value of the 'answer' number to 0Set the initial value of 'least common multiple' to 1For each 'offset' and 'number' in the array:\tWhile the remainder of the sum of the 'answer' and the 'offset' value all divided by the 'number' is not zero:\t\tAdd the value of the 'least common multiple' to the 'answer'\tSet the 'least common multiple' to the 'least common multiple' multiplied by the 'number'Return the 'answer'ExampleI‚Äôll again use an array containing [2,3,8], keeping in mind the new problem: our solution must look for what number is:  A multiple of the first element, and  The sum of the offset plus a multiple of the number, for every other element.First we will need to parse our array into tuples containing their offsets and numbers:[(0, 2), (1, 3), (2, 4)]Next, we define answer as 0 and least common multiple as 1. Then we continue into the For loop:Set `offset` to the first number of the first tuple in `array`: 0; and set `number` to second number in the first tuple in `array`: 2.While (`answer` + `offset`) % `number` ‚â† 0: \t(0 + 0) % 2 ‚â† 0 is true, so add `least common multiple` to `answer`: 1.\t(1 + 0) % 2 ‚â† 0 is true, so add `least common multiple` to `answer`: 2.\t(2 + 0) % 2 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 2.We continue through the for loop: set `offset` and `number` as the numbers in the next tuple: 1 and 3.While (`answer` + `offset`) % `number` ‚â† 0: \t(2 + 1) % 3 ‚â† 0 is true, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 6.We continue through the for loop: set `offset` and `number` as the numbers in the next tuple: 2 and 8.While (`answer` + `offset`) % `number` ‚â† 0: \t(2 + 2) % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 8.\t(8 + 2) % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 14.\t(14 + 2) % 8 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 48.Return the `answer`: 14.Other SolutionsThe ones using the Chinese remainder theorem went way over my head and the videos I watched were not enough to compel me to spend time trying to: first, understand it and then second, write the program out. It was well beyond my understanding, but I think it probably is the ‚Äúdesired‚Äù solution.",
            "content_html": "<p>Here, to help justify that I definitely stole an answer from somebody on Reddit to answer this question, I‚Äôm going to explain <em>why</em> the answer works. Mainly for myself to truly understand this, but also so that if somebody searches for something like this at a later date, there will be a reference. (I‚Äôll be using the smaller sample data for the explanation because it is way easier to grok)</p><p><a href=\"https://adventofcode.com/2020/day/13\"><strong>Check out the problem here, or this won‚Äôt make any sense.</strong></a></p><h2 id=\"brute-force\">Brute Force</h2><p><a href=\"https://github.com/milofultz/aoc2020/blob/master/13/aoc13-2-brute.py\">My initial solution used brute force</a>, as essentially all of my solutions have so far, and this‚Ä¶didn‚Äôt work. My computer was working really hard, fans spinning and everything, but wasn‚Äôt getting anywhere (because the answer for me ended up being 667,437,230,788,118 and I started at <em>1</em>). I went to bed and tried to not think about it. First of course we start with parsing the data, which is a line of ‚Äúbus IDs‚Äù, which actually correspond to the intervals at which the buses leave the station.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>7,13,x,x,59,x,31,19</code></pre></div></div><p>I put these into an array, converting the numbers to integers and leaving the x‚Äôs as strings.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[7, 13, 'x', 'x', 59, 'x', 31, 19]</code></pre></div></div><p>Here‚Äôs the pseudocode of the brute force solution:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Set 'largest_number' to the largest number in the arraySet 'largest_offset' to the index of 'largest_number' in the arraySet the initial value of the 'multiple' by which to multiply the 'largest_number' to 1Set a 'found' variable to let the program know the solution has not been foundWhile the solution has not been 'found':    Set that the solution is 'found' until proven otherwise    Set the 'target' test value to the 'multiple' times the 'largest_number'    For each 'index' of each 'bus_ID' in the array        Set the 'offset' to the 'index' minus the 'largest_offset'        If the 'bus_ID' is an 'x', then continue to the next 'bus_ID'        If the remainder of (the sum of the 'target' and the 'offset') divided by the 'bus_ID' is not zero:        \tSet that the solution was not found and break out of the loop    Add one to the 'multiple'Return the 'target'</code></pre></div></div><p>I used the largest number in the array to try and speed up the already long search, as their multiples of 59 would get searched way faster than the multiples of 7. As this iterates through, it tests every multiple of the largest number against each number plus or minus its relative offset. Unfortunately, even though this works, it is not fast (at all) for the much longer and much more complex final puzzle input.</p><p>One way I could have improved this was in the parsing of the data. Instead of trying to calculate weird offsets, I should have just included the offsets with the bus IDs as a tuple. The result would be a list of tuples, each of which include the <strong>offset</strong> and the <strong>bus ID/interval</strong>. The ‚Äòx‚Äôs are also discarded, as they are no longer necessary.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># (offset, bus_id)[(0,7), (1,13), (4,59), (6,31), (7,19)]</code></pre></div></div><h2 id=\"sieving\">Sieving</h2><p>The idea of a <a href=\"https://en.wikipedia.org/wiki/Sieve_theory\">‚Äòsieve‚Äô</a> in math is to use it to ‚Äòsieve‚Äô out all non-possibilities, leaving you with a much smaller pool to test. Most notable is the <a href=\"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\">Sieve of Erastosthenes</a>, which is used to calculate prime numbers.</p><p>The most base case of this problem that I found was to find the least common multiple of a given set of integers. To find this using the sieve method, we can use this pseudocode:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Set the initial value of the 'answer' number to 0Set the initial value of 'least common multiple' to 1For each 'number' in the array:\tWhile the remainder of the 'answer' value divided by the 'number' is not zero:\t\tAdd the value of the 'least common multiple' to the 'answer'\tSet the 'least common multiple' to the `answer`Return the 'answer'</code></pre></div></div><h4 id=\"example\">Example:</h4><p>Let‚Äôs say our given <code class=\"highlighter-rouge\">array</code> of integers are [2,3,8]. We start by setting our <code class=\"highlighter-rouge\">answer</code> as 0 and the <code class=\"highlighter-rouge\">least common multiple</code> to 1. Then we reach the For loop, which will cycle through the <code class=\"highlighter-rouge\">number</code>s in the <code class=\"highlighter-rouge\">array</code>:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Set the `number` to the first number in the `array`, 2.While `answer` % `number` ‚â† 0: \t0 % 2 ‚â† 0 is true, so add `least common multiple` to the `answer`. `answer` now equals 1.\t1 % 2 ‚â† 0 is true, so add `least common multiple` to the `answer`. `answer` now equals 2.\t2 % 2 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 2.We continue through the for loop: `number` is the next in the `array`: 3.While `answer` % `number` ‚â† 0: \t2 % 3 ‚â† 0 is true, so add `least common multiple` to `answer`: 4.\t4 % 3 ‚â† 0 is true, so add `least common multiple` to `answer`:  6.\t6 % 3 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 6. We continue through the for loop: `number` is the next in the `array`: 8.While `answer` % `number` ‚â† 0: \t6 % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 12.\t12 % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 18.\t18 % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 24.\t24 % 8 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 24.</code></pre></div></div><p>One thing to note going forward is that <strong>all the numbers of the bus IDs are prime numbers</strong>, as if they were not, there would have to be some factorization in preparing to find the least common multiple. Finding the LCM of all primes is to just multiply them together, but with the offsets, we need this longhand to get there.</p><h3 id=\"adding-the-offsets\">Adding the Offsets</h3><p>Now that we have this pseudocode, adding the offsets is easier for me to grok. The biggest difference is that we are going to utilize the <code class=\"highlighter-rouge\">least common multiple</code> and the <code class=\"highlighter-rouge\">answer</code> a <em>tiny</em> bit differently. Assuming we have our list of bus IDs from before, where each ID is a tuple containing the <strong>offset</strong> and the <strong>bus ID/interval</strong>, we now have to adjust our test in the while loop. Instead of testing for if the remainder of the <code class=\"highlighter-rouge\">answer</code> divided by the <code class=\"highlighter-rouge\">number</code> is not zero, we are going to test whether the remainder of the sum of the <code class=\"highlighter-rouge\">answer</code> and the <code class=\"highlighter-rouge\">offset</code> all divided by the <code class=\"highlighter-rouge\">number</code> is not zero.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>('answer' + 'offset') % `number` ‚â† 0</code></pre></div></div><p>Now, here is the pseudocode, taking into account the <code class=\"highlighter-rouge\">offset</code> needed to calculate the answer.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Set the initial value of the 'answer' number to 0Set the initial value of 'least common multiple' to 1For each 'offset' and 'number' in the array:\tWhile the remainder of the sum of the 'answer' and the 'offset' value all divided by the 'number' is not zero:\t\tAdd the value of the 'least common multiple' to the 'answer'\tSet the 'least common multiple' to the 'least common multiple' multiplied by the 'number'Return the 'answer'</code></pre></div></div><h4 id=\"example-1\">Example</h4><p>I‚Äôll again use an <code class=\"highlighter-rouge\">array</code> containing [2,3,8], keeping in mind the new problem: our solution must look for what number is:</p><ul>  <li>A multiple of the first element, and</li>  <li>The sum of the offset plus a multiple of the number, for every other element.</li></ul><p>First we will need to parse our array into tuples containing their <strong>offsets</strong> and <strong>numbers</strong>:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[(0, 2), (1, 3), (2, 4)]</code></pre></div></div><p>Next, we define <code class=\"highlighter-rouge\">answer</code> as 0 and <code class=\"highlighter-rouge\">least common multiple</code> as 1. Then we continue into the For loop:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Set `offset` to the first number of the first tuple in `array`: 0; and set `number` to second number in the first tuple in `array`: 2.While (`answer` + `offset`) % `number` ‚â† 0: \t(0 + 0) % 2 ‚â† 0 is true, so add `least common multiple` to `answer`: 1.\t(1 + 0) % 2 ‚â† 0 is true, so add `least common multiple` to `answer`: 2.\t(2 + 0) % 2 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 2.We continue through the for loop: set `offset` and `number` as the numbers in the next tuple: 1 and 3.While (`answer` + `offset`) % `number` ‚â† 0: \t(2 + 1) % 3 ‚â† 0 is true, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 6.We continue through the for loop: set `offset` and `number` as the numbers in the next tuple: 2 and 8.While (`answer` + `offset`) % `number` ‚â† 0: \t(2 + 2) % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 8.\t(8 + 2) % 8 ‚â† 0 is true, so add `least common multiple` to `answer`: 14.\t(14 + 2) % 8 ‚â† 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 48.Return the `answer`: 14.</code></pre></div></div><h2 id=\"other-solutions\">Other Solutions</h2><p>The ones using the <a href=\"https://en.wikipedia.org/wiki/Chinese_remainder_theorem\">Chinese remainder theorem</a> went <em>way</em> over my head and the videos I watched were not enough to compel me to spend time trying to: first, understand it and then second, write the program out. It was well beyond my understanding, but I think it probably is the ‚Äúdesired‚Äù solution.</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/12/13/aoc-day-13",
            
            
            
            
            
            "date_published": "2020-12-13T00:00:00-08:00",
            "date_modified": "2020-12-13T00:00:00-08:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/12/01/advent-of-code",
            "title": "üß© Advent Of Code 2020 - Solutions",
            "summary": "Here's some solutions I made for the AoC 2020",
            "content_text": "These are my solutions. I‚Äôm trying to do as many as I can in both Python and in Javascript. Plus I‚Äôm going to scope out people‚Äôs answers in C and see what I can glean.Check out the solutions on GitHub  20201201: Solved the first challenge, starting up number 2  20201202: Solved day 2  20201203: Solved day 3 and 4  20201204: Solved day 5  20201205: Solved day 6  20201206: Solved day 7. Definitely noticing the desire to be on the leaderboards and ‚Äúcool‚Äù or ‚Äúfast‚Äù or whatever and trying to go against that feeling. I would rather have effective solutions ‚Äúslowly‚Äù than flail around and hope stuff works.  20201207: Solved day 8. Worked much more purposefully and without (as much) regard to the clock; still working on focusing on the process over the product.  20201208: Solved day 9. Brute forcing a problem I should probably use an algorithm for, but don‚Äôt know enough. Now is the time to really dig! Look through solutions on Reddit, Mastodon, etc.  20201209: Revised my work for day 9 to find a better solution. Ended up using a solution from ‚Äòneelakantankk‚Äô I found on Reddit, utilizing a deque, which I have very little experience with. It is a very interesting solution that utilizes a truth I missed in the iteration. When iterating through the contiguous numbers, if the sum of those contiguous numbers is higher than the target, you can safely remove the first number in the contiguous numbers. I‚Äôm having a hard time fully grokking it but it intuitively feels right, so I‚Äôm going to try and work it out on paper until it really makes sense.  20201209: Solved day 10 part 1 but do not have the know how for part 2 without just stealing an answer without any understanding. Will come back later.  20201210: Solved day 11  20201211: Solved day 12  20201211: Solved day 13 part 1 and have a brute force solution for part 2; however this solution has been spinning for a half hour at least and is showing no signs of progress.  20201213: Went and searched for solutions and found one that I was really able to understand from gravitar64, using a ‚Äúsieving‚Äù method. This didn‚Äôt use some intense number theory, like other solutions which used the Chinese Remainder Theorem. I did cheat, but I understand the answer and how it works and that‚Äôs all I wanted anyway.  20201213: Made a write up of how the sieve method works to repent for what feels like cheating.  20201215: Solved day 14 and 15. Day 15 was really tough to understand while I was doing it, as there was a lot to juggle, but it was a very fun one to solve. Ended up refactoring quite a bit by reading the code of Scarymagi I found on Reddit.  20201216: Solved day 16, and parsing was the majority of the work. It was kind of its own challenge in itself. The problem for part 1 after that was pretty straightforward with a set. Part 2 presented an interesting challenge of essentially trying to solve a logic grid puzzle using programming, which I hadn‚Äôt done before. That was a good time!  20201218: Started on day 17 and realized I need to finally learn how to use Numpy and deal with 3 dimensional arrays, as this is essentially Conway‚Äôs Game of Life but in 3 dimensions.  20201219: Solved day 17 and learned how to use Numpy fairly well with it. Ended up doing Game of Life as a 3 dimensional and 4 dimensional version, which was wild. 3-dimensions required a lot from me, a guy who doesn‚Äôt ever do anything like this and probably solved it in a very long-winded inelegant way, but dammit I solved it.  20201219: Solved day 10 part 2 finally. Tried a recursive solution but it was blasting my computer and taking way too long, so I went searching. The solutions I found using defaultdict was super elegant, so went with that and am pretty happy with it.  20201221: Solved day 18, which was all about essentially making math that solved in the wrong order (i.e. not PEMDAS).  20201222: Solved day 19 part 1, which was really hard to grok, but I got it. A recursion puzzle that was hard to wrap my head around the initial parts. Part 2 is beyond the scope of what my late night brain can handle.  20201225: Solved day 20 and it took me a few hours yesterday and most of today. This was really fun, essentially automating putting together a puzzle, which was a really satisfying project.  20201228: Solved day 21 and it was much, much easier than 20. Essentially logic grid puzzle solving again, like in day 16, which is so satisfying to implement!",
            "content_html": "<p>These are my solutions. I‚Äôm trying to do as many as I can in both Python and in Javascript. Plus I‚Äôm going to scope out people‚Äôs answers in C and see what I can glean.</p><p><a href=\"https://github.com/milofultz/aoc2020\"><strong>Check out the solutions on GitHub</strong></a></p><ul>  <li>20201201: Solved the first challenge, starting up number 2</li>  <li>20201202: Solved day 2</li>  <li>20201203: Solved day 3 and 4</li>  <li>20201204: Solved day 5</li>  <li>20201205: Solved day 6</li>  <li>20201206: Solved day 7. Definitely noticing the desire to be on the leaderboards and ‚Äúcool‚Äù or ‚Äúfast‚Äù or whatever and trying to go against that feeling. I would rather have effective solutions ‚Äúslowly‚Äù than flail around and hope stuff works.</li>  <li>20201207: Solved day 8. Worked much more purposefully and without (as much) regard to the clock; still working on focusing on the process over the product.</li>  <li>20201208: Solved day 9. Brute forcing a problem I should probably use an algorithm for, but don‚Äôt know enough. Now is the time to really dig! Look through solutions on Reddit, Mastodon, etc.</li>  <li>20201209: Revised my work for day 9 to find a better solution. Ended up using <a href=\"https://github.com/neelakantankk/Advent_of_Code_2020/blob/main/Day_09/day_09.py\">a solution from ‚Äòneelakantankk‚Äô I found on Reddit</a>, utilizing a deque, which I have very little experience with. It is a very interesting solution that utilizes a truth I missed in the iteration. When iterating through the contiguous numbers, if the sum of those contiguous numbers is higher than the target, you can safely remove the first number in the contiguous numbers. I‚Äôm having a hard time fully grokking it but it intuitively feels right, so I‚Äôm going to try and work it out on paper until it really makes sense.</li>  <li>20201209: Solved day 10 part 1 but do not have the know how for part 2 without just stealing an answer without any understanding. Will come back later.</li>  <li>20201210: Solved day 11</li>  <li>20201211: Solved day 12</li>  <li>20201211: Solved day 13 part 1 and have a brute force solution for part 2; however this solution has been spinning for a half hour at least and is showing no signs of progress.</li>  <li>20201213: Went and searched for solutions and <a href=\"https://www.reddit.com/r/adventofcode/comments/kc4njx/comment/gfqeouq\">found one that I was really able to understand from gravitar64</a>, using a <a href=\"https://en.wikipedia.org/wiki/Sieve_theory\">‚Äúsieving‚Äù method</a>. This didn‚Äôt use some intense number theory, like other solutions which used the <a href=\"https://en.wikipedia.org/wiki/Chinese_remainder_theorem\">Chinese Remainder Theorem</a>. I did cheat, but I understand the answer and how it works and that‚Äôs all I wanted anyway.</li>  <li>20201213: <a href=\"/2020/12/13/aoc-day-13\">Made a write up of how the sieve method works to repent for what feels like cheating.</a></li>  <li>20201215: Solved day 14 and 15. Day 15 was really tough to understand while I was doing it, as there was a lot to juggle, but it was a very fun one to solve. Ended up refactoring quite a bit by reading the code of <a href=\"https://github.com/Scarygami/aoc2020/blob/main/15/day15.py\">Scarymagi</a> I found on Reddit.</li>  <li>20201216: Solved day 16, and parsing was the majority of the work. It was kind of its own challenge in itself. The problem for part 1 after that was pretty straightforward with a set. Part 2 presented an interesting challenge of essentially trying to solve a <a href=\"https://en.wikipedia.org/wiki/Logic_puzzle#Logic_grid_puzzles\">logic grid puzzle</a> using programming, which I hadn‚Äôt done before. That was a good time!</li>  <li>20201218: Started on day 17 and realized I need to finally learn how to use Numpy and deal with 3 dimensional arrays, as this is essentially <a href=\"https://en.wikipedia.org/wiki/Conway's_Game_of_Life\">Conway‚Äôs Game of Life</a> but in 3 dimensions.</li>  <li>20201219: Solved day 17 and learned how to use Numpy fairly well with it. Ended up doing Game of Life as a 3 dimensional and <em>4 dimensional</em> version, which was wild. 3-dimensions required a lot from me, a guy who doesn‚Äôt ever do anything like this and probably solved it in a very long-winded inelegant way, but dammit I solved it.</li>  <li>20201219: Solved day 10 part 2 finally. Tried a recursive solution but it was blasting my computer and taking way too long, so I went searching. The solutions I found using <code class=\"highlighter-rouge\">defaultdict</code> was super elegant, so went with that and am pretty happy with it.</li>  <li>20201221: Solved day 18, which was all about essentially making math that solved in the wrong order (i.e. not <a href=\"https://blog.prepscholar.com/pemdas-meaning-rule\">PEMDAS</a>).</li>  <li>20201222: Solved day 19 part 1, which was really hard to grok, but I got it. A recursion puzzle that was hard to wrap my head around the initial parts. Part 2 is beyond the scope of what my late night brain can handle.</li>  <li>20201225: Solved day 20 and it took me a few hours yesterday and most of today. This was really fun, essentially automating putting together a puzzle, which was a really satisfying project.</li>  <li>20201228: Solved day 21 and it was much, much easier than 20. Essentially logic grid puzzle solving again, like in day 16, which is so satisfying to implement!</li></ul>",
            "url": "http://milofultz.com/2020/12/01/advent-of-code",
            
            
            
            
            
            "date_published": "2020-12-01T00:00:00-08:00",
            "date_modified": "2020-12-01T00:00:00-08:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/11/10/bytebeat",
            "title": "Bytebeat - Overview and How To Make/Record on OSX",
            "summary": "Bytebeat - Overview and How To Make/Record on OSX",
            "content_text": "‚ÄúBytebeat‚Äù is the name given to the method of piping mathematical equations to an audio device make lo-fidelity gritty sounds. They often sound pretty musical due to the mathematical nature of the equations and bitwise operations. But that does not mean that it has to be ‚Äúmusical‚Äù to be good either, as you will discover when messing around with it.For a good dive into what Bytebeat is and how it started, check out these links:  Kragen‚Äôs Writeup  The original post from  Ville-Matias Heikkil√§ and his follow up post  ZSerge‚Äôs article where I first heard about itExamples:  Bytebeat: Experimental music from very short C programs  Bytebeat: Experimental one-line algorithmic music - the 2nd iteration  Bytebeat: Music from very short programs - the 3rd iterationHow To Make Your OwnA fantastic how-to of the basics including the math operations and how to use them can be found in PDF at TuesdayNightMachine‚Äôs Github page. I would highly recommend starting here if you don‚Äôt get binary or bitwise operations.The super simplest way to implement and test (hear) Bytebeat code is through the many online HTML5/JS apps online.  Gregg Tavares  Bemmu and rarefluid (in stereo!)Making It Offline On OSXMy desire when starting to mess with this stuff was trying to figure out how I could do it in the command line, as that was how I had seen it laid out in many examples in Linux. The problem was that the built in tools to pipe data into your audio device was not built in to OSX the way it is built in to Linux, so I had to do some sleuthing. With a lot of help from the Merveilles community, I was able to finally figure out the process and I wanted to document it here.Step 1. Install SoX with homebrewbrew install sox (you can follow this tutorial here if you are confused)Step 2. Create a bash script to automate the build, compile, and piping of your Bytebeat formulas all on the CLI.The way that I did this was pretty much completely stolen from Cole Ingraham‚Äôs post that I dug up on archive.org. Essentially without this, you have to do quite a few very boring and uninteresting steps which means very little instant gratification, which is what we want.Here is the script that I created for using it in bash on OSX:#!/bin/bash# This script creates and plays a simple ByteBeat# ARGS# $1: a string with the ByteBeat algorithm e.g. \"((t * 3) &amp; (t &gt;&gt; 5))\"# $2: the name of the file to be creates (without an extension)#### create the C programecho \"#include &lt;math.h&gt;int s(double num){    return 256*sin(num);};int c(double num){    return 256*cos(num);};main(t){    for(t=0;;t++){        putchar( $1 );    }};\" &gt; \"$2.c\"# compile the sourcegcc \"$2.c\" -o \"$2\"# play it with standard ByteBeat settings./\"$2\" | sox -t u8 -r 8k -c 1 - -dTake this script and copy it into a code editor/text editor, saving it as a file with an .sh extension (I called it bytebeat.sh). Put it in a folder where you can access it easily with the command line in your terminal. There you will be able to make the audio using the arguments written in the script. But before that,Step 3. Turn down your volume!Trust me, it‚Äôs LOUD. Don‚Äôt forget!Step 4. Try it out!Once you have saved that script and you have navigated to the enclosing folder in your terminal, you can make some noises! Your script takes two arguments:  The Bytebeat algorithm/equation  The name of the file that will be gnenerated and played (can be whatever, I usually go with test)For example:./bytebeat.sh \"(t/4)*(t&gt;&gt;8|((14 &amp; t)^3))\" testThis runs the bash script (bytebeat.sh) and uses the Bytebeat algorithm/equation \"(t/4)*(t&gt;&gt;8|((14 &amp; t)^3))\" to generate the compiled C program test. This program test is then piped into sox and plays through the speakers. You‚Äôre done!Record it!There are two ways you can save the audio you‚Äôve created. One is fairly user friendly and the other one is a bit clunky.The easiest way is to download and install Rogue Amoeba‚Äôs Loopback to record your system audio. THis is very simple and highly recommend it.If for whatever reason that doesn‚Äôt work for you, you can create a raw audio file on your computer and use Audacity to open it. This may not output exactly what you heard when playing it using the bash script, but it may yield some cool variations.  Run your script to create the compiled Bytebeat script (give it a proper name instead of test if that‚Äôs easier to find). Within your folder, you should find a file of that name.  Send the output of this newly compiled script to a file instead of piped to SoX. (NOTE: This can create endlessly large files on your computer and possibly eat up all empty memory if you don‚Äôt stop it quickly. To avoid this, cancel (ctrl + C) the process around a half-second to a second after you start it.) To do this, write this in your shell, assuming your newly compiled file is called test and the output file is called output.raw: ./test &gt; output.raw  As said before, you will want to cancel this process very quickly after you start it with ctrl + C, as it can otherwise create a massive file.  Open Audacity. Select File &gt; Import &gt; Raw Data... and choose your newly output file (output.raw in our example). Use the following settings in the dialog box:          Encoding: Unsigned 8-bit PCM      Byte Order: No endianness      Channels: 1 (Mono)      Start Offset: 0      Amount to Import: 100      Sample Rate: 8000        Listen to your hideous creation.Other Resources/Implementations  C and Python: http://royal-paw.com/2012/01/bytebeats-in-c-and-python-generative-symphonies-from-extremely-small-programs/  Python: https://gist.github.com/bzamecnik/a2d45dc0addb8d602d70b1d8df0f9fd0",
            "content_html": "<p>‚ÄúBytebeat‚Äù is the name given to the method of piping mathematical equations to an audio device make lo-fidelity gritty sounds. They often sound pretty musical due to the mathematical nature of the equations and bitwise operations. But that does not mean that it has to be ‚Äúmusical‚Äù to be good either, as you will discover when messing around with it.</p><p>For a good dive into what Bytebeat is and how it started, check out these links:</p><ul>  <li><a href=\"http://canonical.org/~kragen/bytebeat/\">Kragen‚Äôs Writeup</a></li>  <li><a href=\"https://countercomplex.blogspot.com/2011/10/algorithmic-symphonies-from-one-line-of.html\">The original post from  Ville-Matias Heikkil√§</a> and <a href=\"https://countercomplex.blogspot.com/2011/10/some-deep-analysis-of-one-line-music.html\">his follow up post</a></li>  <li><a href=\"https://zserge.com/posts/etude-in-c/\">ZSerge‚Äôs article where I first heard about it</a></li></ul><h3 id=\"examples\">Examples:</h3><ul>  <li><a href=\"https://www.youtube.com/watch?v=GtQdIYUtAHg\">Bytebeat: Experimental music from very short C programs</a></li>  <li><a href=\"https://www.youtube.com/watch?v=qlrs2Vorw2Y\">Bytebeat: Experimental one-line algorithmic music - the 2nd iteration</a></li>  <li><a href=\"https://www.youtube.com/watch?v=tCRPUv8V22o\">Bytebeat: Music from very short programs - the 3rd iteration</a></li></ul><h3 id=\"how-to-make-your-own\">How To Make Your Own</h3><p>A fantastic how-to of the basics including the math operations and how to use them can be found in PDF at <a href=\"https://github.com/TuesdayNightMachines/Bytebeats\">TuesdayNightMachine‚Äôs Github page</a>. I would highly recommend starting here if you don‚Äôt get binary or bitwise operations.</p><p>The super simplest way to implement and test (hear) Bytebeat code is through the many online HTML5/JS apps online.</p><ul>  <li><a href=\"https://greggman.com/downloads/examples/html5bytebeat/html5bytebeat.html#t=0&amp;e=0&amp;s=8000&amp;bb=5d00000100180000000000000000141d0150043e1f062919296ab90380807628655b351388d1ffe7d4a000\">Gregg Tavares</a></li>  <li><a href=\"http://wurstcaptures.untergrund.net/music/\">Bemmu and rarefluid (in stereo!)</a></li></ul><h3 id=\"making-it-offline-on-osx\">Making It Offline On OSX</h3><p>My desire when starting to mess with this stuff was trying to figure out how I could do it in the command line, as that was how I had seen it laid out in many examples in Linux. The problem was that the built in tools to pipe data into your audio device was not built in to OSX the way it is built in to Linux, so I had to do some sleuthing. With <a href=\"https://merveilles.town/web/statuses/105096777143471978\">a lot of help from the Merveilles community</a>, I was able to finally figure out the process and I wanted to document it here.</p><h4 id=\"step-1-install-sox-with-homebrew\">Step 1. Install SoX with homebrew</h4><p><code class=\"highlighter-rouge\">brew install sox</code> (<a href=\"https://chrisrosser.net/posts/2020/04/06/using-sox-on-macos/\">you can follow this tutorial here if you are confused</a>)</p><h4 id=\"step-2-create-a-bash-script-to-automate-the-build-compile-and-piping-of-your-bytebeat-formulas-all-on-the-cli\">Step 2. Create a bash script to automate the build, compile, and piping of your Bytebeat formulas all on the CLI.</h4><p>The way that I did this was pretty much completely stolen from <a href=\"https://web.archive.org/web/20160610140821/http://coleingraham.com/2013/04/28/bytebeat-shell-script/\">Cole Ingraham‚Äôs post</a> that I dug up on archive.org. Essentially without this, you have to do quite a few very boring and uninteresting steps which means very little instant gratification, which is what we want.</p><p>Here is the script that I created for using it in bash on OSX:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#!/bin/bash</span><span class=\"c\"># This script creates and plays a simple ByteBeat</span><span class=\"c\"># ARGS</span><span class=\"c\"># $1: a string with the ByteBeat algorithm e.g. \"((t * 3) &amp; (t &gt;&gt; 5))\"</span><span class=\"c\"># $2: the name of the file to be creates (without an extension)</span><span class=\"c\">###</span><span class=\"c\"># create the C program</span><span class=\"nb\">echo</span> <span class=\"s2\">\"#include &lt;math.h&gt;int s(double num){    return 256*sin(num);};int c(double num){    return 256*cos(num);};main(t){    for(t=0;;t++){        putchar( </span><span class=\"nv\">$1</span><span class=\"s2\"> );    }};\"</span> <span class=\"o\">&gt;</span> <span class=\"s2\">\"</span><span class=\"nv\">$2</span><span class=\"s2\">.c\"</span><span class=\"c\"># compile the source</span>gcc <span class=\"s2\">\"</span><span class=\"nv\">$2</span><span class=\"s2\">.c\"</span> <span class=\"nt\">-o</span> <span class=\"s2\">\"</span><span class=\"nv\">$2</span><span class=\"s2\">\"</span><span class=\"c\"># play it with standard ByteBeat settings</span>./<span class=\"s2\">\"</span><span class=\"nv\">$2</span><span class=\"s2\">\"</span> | sox <span class=\"nt\">-t</span> u8 <span class=\"nt\">-r</span> 8k <span class=\"nt\">-c</span> 1 - <span class=\"nt\">-d</span></code></pre></div></div><p>Take this script and copy it into a code editor/text editor, saving it as a file with an <code class=\"highlighter-rouge\">.sh</code> extension (I called it <code class=\"highlighter-rouge\">bytebeat.sh</code>). Put it in a folder where you can access it easily with the command line in your terminal. There you will be able to make the audio using the arguments written in the script. But before that,</p><h4 id=\"step-3-turn-down-your-volume\">Step 3. Turn down your volume!</h4><p>Trust me, it‚Äôs LOUD. Don‚Äôt forget!</p><h4 id=\"step-4-try-it-out\">Step 4. Try it out!</h4><p>Once you have saved that script and you have navigated to the enclosing folder in your terminal, you can make some noises! Your script takes two arguments:</p><ol>  <li>The Bytebeat algorithm/equation</li>  <li>The name of the file that will be gnenerated and played (can be whatever, I usually go with test)</li></ol><p>For example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./bytebeat.sh \"(t/4)*(t&gt;&gt;8|((14 &amp; t)^3))\" test</code></pre></div></div><p>This runs the bash script (<code class=\"highlighter-rouge\">bytebeat.sh</code>) and uses the Bytebeat algorithm/equation <code class=\"highlighter-rouge\">\"(t/4)*(t&gt;&gt;8|((14 &amp; t)^3))\"</code> to generate the compiled C program <code class=\"highlighter-rouge\">test</code>. This program <code class=\"highlighter-rouge\">test</code> is then piped into sox and plays through the speakers. You‚Äôre done!</p><h3 id=\"record-it\">Record it!</h3><p>There are two ways you can save the audio you‚Äôve created. One is fairly user friendly and the other one is a bit clunky.</p><p>The easiest way is to download and install Rogue Amoeba‚Äôs <a href=\"https://rogueamoeba.com/loopback/\">Loopback</a> to record your system audio. THis is very simple and highly recommend it.</p><p>If for whatever reason that doesn‚Äôt work for you, you can create a raw audio file on your computer and use <a href=\"https://www.audacityteam.org/\">Audacity</a> to open it. This may not output exactly what you heard when playing it using the bash script, but it may yield some cool variations.</p><ol>  <li>Run your script to create the compiled Bytebeat script (give it a proper name instead of <code class=\"highlighter-rouge\">test</code> if that‚Äôs easier to find). Within your folder, you should find a file of that name.</li>  <li>Send the output of this newly compiled script to a file instead of piped to SoX. (NOTE: This can create endlessly large files on your computer and possibly eat up all empty memory if you don‚Äôt stop it quickly. To avoid this, cancel (ctrl + C) the process around a half-second to a second after you start it.) To do this, write this in your shell, assuming your newly compiled file is called <code class=\"highlighter-rouge\">test</code> and the output file is called <code class=\"highlighter-rouge\">output.raw</code>: <code class=\"highlighter-rouge\">./test &gt; output.raw</code></li>  <li>As said before, you will want to cancel this process very quickly after you start it with ctrl + C, as it can otherwise create a massive file.</li>  <li>Open Audacity. Select <code class=\"highlighter-rouge\">File</code> &gt; <code class=\"highlighter-rouge\">Import</code> &gt; <code class=\"highlighter-rouge\">Raw Data...</code> and choose your newly output file (<code class=\"highlighter-rouge\">output.raw</code> in our example). Use the following settings in the dialog box:    <ul>      <li>Encoding: Unsigned 8-bit PCM</li>      <li>Byte Order: No endianness</li>      <li>Channels: 1 (Mono)</li>      <li>Start Offset: 0</li>      <li>Amount to Import: 100</li>      <li>Sample Rate: 8000</li>    </ul>  </li>  <li>Listen to your hideous creation.</li></ol><h3 id=\"other-resourcesimplementations\">Other Resources/Implementations</h3><ul>  <li>C and Python: <a href=\"http://royal-paw.com/2012/01/bytebeats-in-c-and-python-generative-symphonies-from-extremely-small-programs/\">http://royal-paw.com/2012/01/bytebeats-in-c-and-python-generative-symphonies-from-extremely-small-programs/</a></li>  <li>Python: <a href=\"https://gist.github.com/bzamecnik/a2d45dc0addb8d602d70b1d8df0f9fd0\">https://gist.github.com/bzamecnik/a2d45dc0addb8d602d70b1d8df0f9fd0</a></li></ul><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/11/10/bytebeat",
            
            
            
            
            
            "date_published": "2020-11-10T00:00:00-08:00",
            "date_modified": "2020-11-10T00:00:00-08:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/11/09/the-point-of-diminis",
            "title": "The point of diminishing returns is already here",
            "summary": null,
            "content_text": "The point of diminishing returns is well before we think it is. What is the point of a crazy fast computer when most of what you do is send messages to people and read text? We were able to download and watch videos on our computer 15 years ago and were only limited by internet speed. Now we have it all and we want more for some reason. Is convenience via minimal time saved with a faster piece of hardware worth the money, your time, and the waste it makes?Here is the talk that got me really thinking about this today.",
            "content_html": "<p>The point of diminishing returns is well before we think it is. What is the point of a crazy fast computer when most of what you do is send messages to people and read text? We were able to download and watch videos on our computer 15 years ago and were only limited by internet speed. Now we have it all and we want more for some reason. Is convenience via minimal time saved with a faster piece of hardware worth the money, your time, and the waste it makes?</p><p><a href=\"https://idlewords.com/talks/web_design_first_100_years.htm\">Here is the talk that got me really thinking about this today.</a></p><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/11/09/the-point-of-diminis",
            
            
            
            
            
            "date_published": "2020-11-09T00:00:00-08:00",
            "date_modified": "2020-11-09T00:00:00-08:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/11/01/koi-koi-rules",
            "title": "Rules for Hanafuda game \"Koi-Koi\"",
            "summary": "Rules for Hanafuda game Koi-Koi: Hanafuda, meaning 'flower cards' is a traditional Japanese card game that dates back to the 1500s.",
            "content_text": "All text pulled from Nintendo‚Äôs PDF online for a much easier to read pageKoi-Koi is a two-player game that is playedwith Hanafuda cards. It requires a sharpmind, strategic thinking, and risk-taking inthe spirit of friendly competition. It is truly aclassic brain training game.Goal:The goal of Koi-Koi is to earn points bymaking sets as fast as you can. Unlikepoker, whoever makes a set first can win agame. A full session is 12 games, and theplayer with the most points after 12 gamesis the winner.Choosing a Dealer:Players will choose one of the cards facedown, and the player who has the earliestmonth card becomes the dealer (alsocalled ‚Äúoya,‚Äù meaning ‚Äúparent‚Äù), who takestheir turn first. Try not to choose the‚Äúparent‚Äù in any other way, as this is theauthentic way of choosing the dealer inKoi-KoiPlaying the GameThe dealer will deal two cards at a time inorder of the player, field, and dealer. Dealeight cards face down for each player, andeight cards face up in the field in-between.Place the remaining deck of cards to theside of the field face downAfter the players look at their cards, thegame will begin with the first player (thedealer) taking one card from their handand placing it face up on the field. If thecard matches the month of any of thecards on the field, the dealer takes the pair.If there are no matching cards on the field,that card will remain on the field face up.The player will then pick a card from thetop of the remaining deck, and again ifthere is a card of a matching month on thefield, the two cards will become a matchingpair. If not, the card will be placed on thefield face up. The player takes thematching pairs, if they have any. andplaces them face up in front of them,ending their turn.Continue to take turns playing until one ofthe players comes up with a set. Tally thepoints scored for that set, and continueplaying with a new game, with the winnerbecoming the dealer. If either player isunable to make a set and their cards runout, the game is a draw and the other playerbecomes the dealer in the next game.The Koi-KoiAfter you make a set you can either end thegame there and earn the points for that oneset, or if you think you can get another, youcan call ‚ÄúKoi-Koi!‚Äù and keep playing to getanother set. Be careful though, because ifyour opponent makes a set after you callKoi-Koi before you make your second set,the other player will double their points, andthe game will end. Koi-Koi can only becalled once per game.MultipliersIf your sets total 7 or more points in a singlegame, you earn a multiplier and get doublepoints! This is where you can win big, sorack those points up!Lucky HandsIf the sets below are already made in yourhand when the cards are first handed out,that player wins these points and the nextgame will begin.Four HandsWhen there are four cards of the samemonth: 6ptsStickyWhen there are four sets of two cardsfram the same month: 6ptsSpecial CardThe Chrysanthemum and Sake Cup card can be usedas a 10 or a 1 point card.The SetsObtaining one of these sets will earn you points and give youthe opportunity to claim victory, or call ‚ÄúKoi-Koi!‚Äù  Kasu (Plains) - 10 Plain cards. 1 point. Each Additional 1P after.  Tanzaku (Ribbons) - 5 Ribbons. 1 point. Each Additional 1P after.  Tane (Animals) - 5 Animals. 1 point. Each Additional 1P after.  Ino-Shika-Cho (Boar-Deer-Butterfly) - Animal cards of Clover, Maple, Peony. 5 points.  Akatan (Red Poetry Ribbons) - All 3 red poetry ribbons. 6 points.  Aotan (Blue Ribbons) - All 3 blue ribbons. 6 points.  Sanko (3Brights) - 3 Bright cards not containing Rain man card. 6 points.  Ame-Shiko (Rain man) - 4Brights containing Rain man card. 8 points.  Shiko (4Brights) - 4 Bright cards not containing Rain man card. 10 points.  Goko (5Brights) - All 5 Bright cards. 15 points.  Tsuki-fuda (Monthly Cards) - All four cards in one group shown right on screen. 4 points.  Oya-Ken (Dealer‚Äôs Privilege) - If neither gets any Yaku, Dealer wins 6 points.  Bake-Fuda (Wild Card) - The animal card of Chrysanthemum (sake cup) can be regarded as a plain card as well. If you have this, 9 plain cards and this card will be the Yaku of Kasu.Suits            Month      Suit/Plant                  January      Pine              February      Plum Blossom              March      Cherry Blossoms              April      Wisteria              May      Iris              June      Peony              July      Clover              August      Pampas              September      Chrysanthemum              October      Maple              November      Willow              December      Paulownia      ",
            "content_html": "<p><em>All text pulled from Nintendo‚Äôs PDF online for a much easier to read page</em></p><p>Koi-Koi is a two-player game that is playedwith Hanafuda cards. It requires a sharpmind, strategic thinking, and risk-taking inthe spirit of friendly competition. It is truly aclassic brain training game.</p><h3 id=\"goal\">Goal:</h3><p>The goal of Koi-Koi is to earn points bymaking sets as fast as you can. Unlikepoker, whoever makes a set first can win agame. A full session is 12 games, and theplayer with the most points after 12 gamesis the winner.</p><h3 id=\"choosing-a-dealer\">Choosing a Dealer:</h3><p>Players will choose one of the cards facedown, and the player who has the earliestmonth card becomes the dealer (alsocalled ‚Äúoya,‚Äù meaning ‚Äúparent‚Äù), who takestheir turn first. Try not to choose the‚Äúparent‚Äù in any other way, as this is theauthentic way of choosing the dealer inKoi-Koi</p><h3 id=\"playing-the-game\">Playing the Game</h3><p>The dealer will deal two cards at a time inorder of the player, field, and dealer. Dealeight cards face down for each player, andeight cards face up in the field in-between.Place the remaining deck of cards to theside of the field face down</p><p>After the players look at their cards, thegame will begin with the first player (thedealer) taking one card from their handand placing it face up on the field. If thecard matches the month of any of thecards on the field, the dealer takes the pair.If there are no matching cards on the field,that card will remain on the field face up.The player will then pick a card from thetop of the remaining deck, and again ifthere is a card of a matching month on thefield, the two cards will become a matchingpair. If not, the card will be placed on thefield face up. The player takes thematching pairs, if they have any. andplaces them face up in front of them,ending their turn.</p><p>Continue to take turns playing until one ofthe players comes up with a set. Tally thepoints scored for that set, and continueplaying with a new game, with the winnerbecoming the dealer. If either player isunable to make a set and their cards runout, the game is a draw and the other playerbecomes the dealer in the next game.</p><h3 id=\"the-koi-koi\">The Koi-Koi</h3><p>After you make a set you can either end thegame there and earn the points for that oneset, or if you think you can get another, youcan call ‚ÄúKoi-Koi!‚Äù and keep playing to getanother set. Be careful though, because ifyour opponent makes a set after you callKoi-Koi before you make your second set,the other player will double their points, andthe game will end. Koi-Koi can only becalled once per game.</p><h4 id=\"multipliers\">Multipliers</h4><p>If your sets total 7 or more points in a singlegame, you earn a multiplier and get doublepoints! This is where you can win big, sorack those points up!</p><h3 id=\"lucky-hands\">Lucky Hands</h3><p>If the sets below are already made in yourhand when the cards are first handed out,that player wins these points and the nextgame will begin.</p><h4 id=\"four-hands\">Four Hands</h4><p>When there are four cards of the samemonth: 6pts</p><h4 id=\"sticky\">Sticky</h4><p>When there are four sets of two cardsfram the same month: 6pts</p><h4 id=\"special-card\">Special Card</h4><p>The Chrysanthemum and Sake Cup card can be usedas a 10 or a 1 point card.</p><h3 id=\"the-sets\">The Sets</h3><p>Obtaining one of these sets will earn you points and give youthe opportunity to claim victory, or call ‚ÄúKoi-Koi!‚Äù</p><ul>  <li>Kasu (Plains) - 10 Plain cards. 1 point. Each Additional 1P after.</li>  <li>Tanzaku (Ribbons) - 5 Ribbons. 1 point. Each Additional 1P after.</li>  <li>Tane (Animals) - 5 Animals. 1 point. Each Additional 1P after.</li>  <li>Ino-Shika-Cho (Boar-Deer-Butterfly) - Animal cards of Clover, Maple, Peony. 5 points.</li>  <li>Akatan (Red Poetry Ribbons) - All 3 red poetry ribbons. 6 points.</li>  <li>Aotan (Blue Ribbons) - All 3 blue ribbons. 6 points.</li>  <li>Sanko (3Brights) - 3 Bright cards not containing Rain man card. 6 points.</li>  <li>Ame-Shiko (Rain man) - 4Brights containing Rain man card. 8 points.</li>  <li>Shiko (4Brights) - 4 Bright cards not containing Rain man card. 10 points.</li>  <li>Goko (5Brights) - All 5 Bright cards. 15 points.</li>  <li>Tsuki-fuda (Monthly Cards) - All four cards in one group shown right on screen. 4 points.</li>  <li>Oya-Ken (Dealer‚Äôs Privilege) - If neither gets any Yaku, Dealer wins 6 points.</li>  <li>Bake-Fuda (Wild Card) - The animal card of Chrysanthemum (sake cup) can be regarded as a plain card as well. If you have this, 9 plain cards and this card will be the Yaku of Kasu.</li></ul><h3 id=\"suits\">Suits</h3><table>  <thead>    <tr>      <th>Month</th>      <th>Suit/Plant</th>    </tr>  </thead>  <tbody>    <tr>      <td>January</td>      <td>Pine</td>    </tr>    <tr>      <td>February</td>      <td>Plum Blossom</td>    </tr>    <tr>      <td>March</td>      <td>Cherry Blossoms</td>    </tr>    <tr>      <td>April</td>      <td>Wisteria</td>    </tr>    <tr>      <td>May</td>      <td>Iris</td>    </tr>    <tr>      <td>June</td>      <td>Peony</td>    </tr>    <tr>      <td>July</td>      <td>Clover</td>    </tr>    <tr>      <td>August</td>      <td>Pampas</td>    </tr>    <tr>      <td>September</td>      <td>Chrysanthemum</td>    </tr>    <tr>      <td>October</td>      <td>Maple</td>    </tr>    <tr>      <td>November</td>      <td>Willow</td>    </tr>    <tr>      <td>December</td>      <td>Paulownia</td>    </tr>  </tbody></table><p><img src=\"http://milofultz.com/assets/fudasuits.png\" alt=\"Suits of Hanafuda\" /></p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/11/01/koi-koi-rules",
            
            
            
            
            
            "date_published": "2020-11-01T00:00:00-07:00",
            "date_modified": "2020-11-01T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/31/tablatal-parser",
            "title": "üìä Tablatal Parser - Plaintext Database to JSON (Python)",
            "summary": "Tablatal is a flat file plaintext database, and this parser made in Python allows you to utilize it with other software.",
            "content_text": "Check out the up-to-date version on GitHubI‚Äôm rethinking my Track and Tod apps for tracking my tasks, mood, and otherdata after checking out Josh Avanier‚Äôs Log,V‚Äôs Log, Devine Lu Linvega‚Äôs Horaire andothers. I am determined to keep my log plaintext and was notsatisfied with options like CSV or TSV, as they look terrible when readingin a plain text editor. I eventually found Devine‚Äôs Tablatal and am lookingforward to using it with my system.From Devine‚Äôs site: ‚ÄúIn the Tablatal file, the first line declares the key, thespacing between each key defines the length of the parameters for allsubsequent lines.‚Äù It is a much more aesthetically pleasing plaintext dataformat, though the tradeoff is malleability, as you must define how largethe field sizes are before getting going (I‚Äôll solve this with some kind ofutility if it ever comes up as a problem).There is both a to- and from-Tablatal utility. Both use a list of dicts astheir starting point, but can also be used directly in the CLI to interfacewith JSON files.Syntax  Comments are preceded by a semicolon.  The header line is expected to be all caps and may be preceded by asemicolon as if a comment. The spacing of this header line sets the spacingfor all content that follows.  The content is everything that follows the header line. Empty fieldsdefault to None.Examples can be found here at neauoire‚Äôs page.UsageAs a CLI, the parser takes in a plaintext Tablatal file (tbtl) andreturns a JSON file. There is one optional argument --headers, whichyou can supply a set of custom headers separated by commas for the parserto use when outputting. For instance, if the beginning of your fileincluding your headers looks like this:; The horaire is a collection of logs.; https://wiki.xxiivv.com/site/tablatal.html;     CODE HOST                 PIC NAME;     7    12                   33  3720X09 +300 talk                     Talk at Speakers Series, SNSYC20X07 +300 talk                     Grundlagen der digitalen Kommunikation20V08 -332 orca...The header line is started by a semicolon, which would obfuscate the parserfrom giving it a useful name. This can be remedied via the CLI:python3 tbtl_parse.py input.tbtl output.json --headers \"DATE, CODE, HOST, PIC, NAME\"The JSON-to-Tablatal parser needs a little user input to determine the order of the fields, but otherwise operates the same as the other utility.",
            "content_html": "<p><a href=\"https://github.com/milofultz/tablatal_parser\"><strong>Check out the up-to-date version on GitHub</strong></a></p><p>I‚Äôm rethinking my Track and Tod apps for tracking my tasks, mood, and otherdata after checking out <a href=\"https://avanier.now.sh/w/log.html\">Josh Avanier‚Äôs Log</a>,<a href=\"https://v-os.ca/timekeeping\">V‚Äôs Log</a>, <a href=\"https://wiki.xxiivv.com/site/horaire.html\">Devine Lu Linvega‚Äôs Horaire</a> andothers. I am determined to keep my log plaintext and was notsatisfied with options like CSV or TSV, as they look terrible when readingin a plain text editor. I eventually found <a href=\"https://wiki.xxiivv.com/site/tablatal.html\">Devine‚Äôs Tablatal</a> and am lookingforward to using it with my system.</p><p>From Devine‚Äôs site: ‚ÄúIn the Tablatal file, the first line declares the key, thespacing between each key defines the length of the parameters for allsubsequent lines.‚Äù It is a much more aesthetically pleasing plaintext dataformat, though the tradeoff is malleability, as you must define how largethe field sizes are before getting going (I‚Äôll solve this with some kind ofutility if it ever comes up as a problem).</p><p>There is both a to- and from-Tablatal utility. Both use a list of dicts astheir starting point, but can also be used directly in the CLI to interfacewith JSON files.</p><h3 id=\"syntax\">Syntax</h3><ul>  <li>Comments are preceded by a semicolon.</li>  <li>The header line is expected to be all caps and may be preceded by asemicolon as if a comment. The spacing of this header line sets the spacingfor all content that follows.</li>  <li>The content is everything that follows the header line. Empty fieldsdefault to None.</li></ul><p>Examples can be found <a href=\"https://github.com/XXIIVV/oscean/tree/master/src/database\">here at neauoire‚Äôs page</a>.</p><h3 id=\"usage\">Usage</h3><p>As a CLI, the parser takes in a plaintext Tablatal file (<code class=\"highlighter-rouge\">tbtl</code>) andreturns a <code class=\"highlighter-rouge\">JSON</code> file. There is one optional argument <code class=\"highlighter-rouge\">--headers</code>, whichyou can supply a set of custom headers separated by commas for the parserto use when outputting. For instance, if the beginning of your fileincluding your headers looks like this:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>; The horaire is a collection of logs.; https://wiki.xxiivv.com/site/tablatal.html;     CODE HOST                 PIC NAME;     7    12                   33  3720X09 +300 talk                     Talk at Speakers Series, SNSYC20X07 +300 talk                     Grundlagen der digitalen Kommunikation20V08 -332 orca...</code></pre></div></div><p>The header line is started by a semicolon, which would obfuscate the parserfrom giving it a useful name. This can be remedied via the CLI:</p><p><code class=\"highlighter-rouge\">python3 tbtl_parse.py input.tbtl output.json --headers \"DATE, CODE, HOST, PIC, NAME\"</code></p><p>The JSON-to-Tablatal parser needs a little user input to determine the order of the fields, but otherwise operates the same as the other utility.</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/31/tablatal-parser",
            
            
            
            
            
            "date_published": "2020-10-31T00:00:00-07:00",
            "date_modified": "2020-10-31T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/25/hiitimer",
            "title": "üíª HIITimer - Exercise Timer w/Routines and TTS (Python)",
            "summary": "I made a basic HIIT timer so I wouldn't have to rely on online pages and terrible phone apps. Loads up premade routines and uses TTS for the workout.",
            "content_text": "Check out the up-to-date version on GitHubI made a basic HIIT timer so I wouldn‚Äôt have to rely on online pages and really terrible HIIT phone apps that do too much for me anyway. It‚Äôs thebare minimum:  Say (with TTS) and display the current state of the routine (exercise name, rest, upcoming exercise)  Make your routine on the fly  Load up created plaintext routinesIt doesn‚Äôt do anything else and there is no reason I can find for it to do anything more.Preset RoutinesPreset routines can be loaded into HIITimer with the -f flag followed by the filename:python3 hiitimer.py -f preset1.hiitThere are four fields necessary for a successful routine file:  exercises: - A list of exercises which will comprise one rep. This list is comprised of an exercises: line, followed by an exercise oneach subsequent line.  exercise_time: - How long to spend on one exercise in seconds. This and all the following fields are to be comprised of the key and value onthe same line.  rest_time: - How long to spend resting between exercises in seconds.  reps: - How many cycles of the list of exercises to do in total.The parser overlooks blank lines and lines that begin with #.A sample routine that I created looks like this:# Sample Exercise Routine 1exercises:\tPushups\tSquats\tPlank\tJumping Jacksexercise_time: 30rest_time: 10reps: 4This program and all the TTS has only been tested on OSX, so please letme know if you get any errors, as I‚Äôd love to figure it out :)",
            "content_html": "<p><a href=\"https://github.com/milofultz/hiitimer\"><strong>Check out the up-to-date version on GitHub</strong></a></p><p>I made a basic HIIT timer so I wouldn‚Äôt have to rely on online pages and really terrible HIIT phone apps that do too much for me anyway. It‚Äôs thebare minimum:</p><ul>  <li>Say (with TTS) and display the current state of the routine (exercise name, rest, upcoming exercise)</li>  <li>Make your routine on the fly</li>  <li>Load up created plaintext routines</li></ul><p>It doesn‚Äôt do anything else and there is no reason I can find for it to do anything more.</p><h3 id=\"preset-routines\">Preset Routines</h3><p>Preset routines can be loaded into HIITimer with the <code class=\"highlighter-rouge\">-f</code> flag followed by the filename:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>python3 hiitimer.py -f preset1.hiit</code></pre></div></div><p>There are four fields necessary for a successful routine file:</p><ul>  <li><code class=\"highlighter-rouge\">exercises:</code> - A list of exercises which will comprise one rep. This list is comprised of an <code class=\"highlighter-rouge\">exercises:</code> line, followed by an exercise oneach subsequent line.</li>  <li><code class=\"highlighter-rouge\">exercise_time:</code> - How long to spend on one exercise in seconds. This and all the following fields are to be comprised of the key and value onthe same line.</li>  <li><code class=\"highlighter-rouge\">rest_time:</code> - How long to spend resting between exercises in seconds.</li>  <li><code class=\"highlighter-rouge\">reps:</code> - How many cycles of the list of exercises to do in total.</li></ul><p>The parser overlooks blank lines and lines that begin with <code class=\"highlighter-rouge\">#</code>.</p><p><a href=\"/2020/05/25/exercise-routine\">A sample routine that I created</a> looks like this:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Sample Exercise Routine 1exercises:\tPushups\tSquats\tPlank\tJumping Jacksexercise_time: 30rest_time: 10reps: 4</code></pre></div></div><p><em>This program and all the TTS has only been tested on OSX, so please letme know if you get any errors, as I‚Äôd love to figure it out :)</em></p><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/25/hiitimer",
            
            
            
            
            
            "date_published": "2020-10-25T00:00:00-07:00",
            "date_modified": "2020-10-25T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/21/html-css-js",
            "title": "HTML / CSS / JS Resources",
            "summary": "A compilation of various HTML / CSS / JS resources I think are rad, compelling, or helpful.",
            "content_text": "Jonas Schmedtmann‚Äôs Coding Resources - Chock full of good resources and helpful links for all of these.HTML  Learn to Code HTML &amp; CSS  This page is a truly naked, brutalist html quine.CSS  CSS Utility Classes and ‚ÄúSeparation of Concerns‚Äù - Going over the differences between semantic CSS and ‚Äúfunctional‚Äù CSS, where reuse and ease of understanding is paramount.  Learn to Code HTML &amp; CSS - Good overview of the basics of HTML and CSS design (pre-Flex or Grid systems).  Advanced CSS &amp; Sass - Shows best practices in structure, design, implementation, and working through problems, taught by Jonas Schmedtmann.  58 bytes of css to look great nearly everywhere - It‚Äôs like a hyper-minimal version of Skeleton CSS. Does one thing really well, but if that‚Äôs what you need, it‚Äôs perfect.  Web Design in 4 minutesJS  Modern JavaScript From The Beginning",
            "content_html": "<p><a href=\"http://codingheroes.io/resources/\">Jonas Schmedtmann‚Äôs Coding Resources</a> - Chock full of good resources and helpful links for all of these.</p><p><em>HTML</em></p><ul>  <li><a href=\"https://learn.shayhowe.com/html-css/\">Learn to Code HTML &amp; CSS</a></li>  <li><a href=\"https://secretgeek.github.io/html_wysiwyg/html.html\">This page is a truly naked, brutalist html quine.</a></li></ul><p><em>CSS</em></p><ul>  <li><a href=\"https://adamwathan.me/css-utility-classes-and-separation-of-concerns/\">CSS Utility Classes and ‚ÄúSeparation of Concerns‚Äù</a> - Going over the differences between semantic CSS and ‚Äúfunctional‚Äù CSS, where reuse and ease of understanding is paramount.</li>  <li><a href=\"https://learn.shayhowe.com/html-css/\">Learn to Code HTML &amp; CSS</a> - Good overview of the basics of HTML and CSS design (pre-Flex or Grid systems).</li>  <li><a href=\"https://www.udemy.com/course/advanced-css-and-sass/\">Advanced CSS &amp; Sass</a> - Shows best practices in structure, design, implementation, and working through problems, taught by Jonas Schmedtmann.</li>  <li><a href=\"https://jrl.ninja/etc/1/\">58 bytes of css to look great nearly everywhere</a> - It‚Äôs like a hyper-minimal version of <a href=\"http://getskeleton.com/\">Skeleton CSS</a>. Does one thing really well, but if that‚Äôs what you need, it‚Äôs perfect.</li>  <li><a href=\"https://jgthms.com/web-design-in-4-minutes/\">Web Design in 4 minutes</a></li></ul><p><em>JS</em></p><ul>  <li><a href=\"https://www.udemy.com/course/modern-javascript-from-the-beginning/\">Modern JavaScript From The Beginning</a></li></ul><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/21/html-css-js",
            
            
            
            
            
            "date_published": "2020-10-21T00:00:00-07:00",
            "date_modified": "2020-10-21T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/17/tod-python",
            "title": "üíª Tod - Plan and Manage Daily Tasks In The CLI (Python)",
            "summary": "Tod helps you plan and manage daily tasks. Deliberately simple so I can stay focused on what I need to do.",
            "content_text": "Check out the up-to-date version on GitHubPlan and manage daily tasks. Deliberately simple so I can stay focused on what I need to do.  Saves tasks in an easy to read plaintext file in the root folder called ~/.tod  Includes built in timer for timeboxing/focused work time  Pulls most recent MIT from Track when starting a new set of daily tasks  Allows pulling of completed tasks for Track‚Äôs accomplishment trackingTasks on screen are shown as below. On the left is the task number, followed by the task name, and lastly the time spent on that task so far, if any. Time spent can be changed manually or can be changed automatically through use of the timer. A green task represents a completed task.",
            "content_html": "<p><a href=\"https://github.com/milofultz/tod\"><strong>Check out the up-to-date version on GitHub</strong></a></p><p>Plan and manage daily tasks. Deliberately simple so I can stay focused on what I need to do.</p><ul>  <li>Saves tasks in an easy to read plaintext file in the root folder called <code class=\"highlighter-rouge\">~/.tod</code></li>  <li>Includes built in timer for timeboxing/focused work time</li>  <li>Pulls most recent MIT from <a href=\"/2020/10/12/track-python\">Track</a> when starting a new set of daily tasks</li>  <li>Allows pulling of completed tasks for <a href=\"/2020/10/12/track-python\">Track‚Äôs</a> accomplishment tracking</li></ul><hr /><p>Tasks on screen are shown as below. On the left is the task number, followed by the task name, and lastly the time spent on that task so far, if any. Time spent can be changed manually or can be changed automatically through use of the timer. A green task represents a completed task.</p><p><img src=\"http://milofultz.com/assets/20201017tod/tod1.png\" /><img src=\"http://milofultz.com/assets/20201017tod/tod2.png\" /></p><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/17/tod-python",
            
            
            
            
            
            "date_published": "2020-10-17T00:00:00-07:00",
            "date_modified": "2020-10-17T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/16/friends-dont",
            "title": "Friends don't let friends look at pageviews",
            "summary": null,
            "content_text": "‚ÄúFriends don‚Äôt let friends look at pageviews. Ever.‚Äù - Avinash Kaushik (from Algorithms To Live By)",
            "content_html": "<p>‚ÄúFriends don‚Äôt let friends look at pageviews. Ever.‚Äù - Avinash Kaushik (<em>from Algorithms To Live By</em>)</p><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/16/friends-dont",
            
            
            
            
            
            "date_published": "2020-10-16T00:00:00-07:00",
            "date_modified": "2020-10-16T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/12/track-python",
            "title": "üíª Track - Daily Journal and Log (Python)",
            "summary": "Track your accomplishments, mood, most important task, and journal entries over time in a simple CLI Python program.",
            "content_text": "Check out the up-to-date version on GitHubI wanted to have a way to track my mood and accomplishments over time, keep track of my priority for the next day, as well as a basic journaling platform that was not pretentious or leading. Seemed like a good project and I had seen a few people on http://merveilles.town making some fun CLI tools in this vein, so I took a swing at it.Inspo from lon by dstn.  Tracks mood, accomplishments, journal entries, and MIT for next day  Saves data in an easy to read plaintext file in the root folder called ~/.track  Integrates with Tod to pull in completed accomplishments  Allows pulling of MIT into Tod‚Äôs task listUsageOn prompting, input:  Your mood on a 1-5 scale.  Your accomplishments for the day. When finished, leave the line blank and press enter.  Your most important task for the next day.  A 50 character or less summary of your day.  A longer journal entry of anything you feel is relevant.This will save this data into a file named .track in your root folder, formatted like so:---20201011 (4) Spend time on programming, exercise, and work.* Write daily tracker program* Exercise with 1.5hr walk* Brainstorm programming projects* Vote in election&gt; Prepare for next week and resolve all open tasksI walked farther south than I have since moving here, and I really like how quietthe side streets are.Been listening to vogue ball playlists all night.",
            "content_html": "<p><a href=\"https://github.com/milofultz/track\"><strong>Check out the up-to-date version on GitHub</strong></a></p><p>I wanted to have a way to track my mood and accomplishments over time, keep track of my priority for the next day, as well as a basic journaling platform that was not pretentious or leading. Seemed like a good project and I had seen a few people on <a href=\"http://merveilles.town\">http://merveilles.town</a> making some fun CLI tools in this vein, so I took a swing at it.</p><p>Inspo from <a href=\"https://github.com/0xdstn/lon\">lon by dstn</a>.</p><ul>  <li>Tracks mood, accomplishments, journal entries, and MIT for next day</li>  <li>Saves data in an easy to read plaintext file in the root folder called <code class=\"highlighter-rouge\">~/.track</code></li>  <li>Integrates with <a href=\"/2020/10/17/tod-python\">Tod</a> to pull in completed accomplishments</li>  <li>Allows pulling of MIT into <a href=\"/2020/10/17/tod-python\">Tod‚Äôs</a> task list</li></ul><h3 id=\"usage\">Usage</h3><p>On prompting, input:</p><ol>  <li>Your mood on a 1-5 scale.</li>  <li>Your accomplishments for the day. When finished, leave the line blank and press enter.</li>  <li>Your most important task for the next day.</li>  <li>A 50 character or less summary of your day.</li>  <li>A longer journal entry of anything you feel is relevant.</li></ol><p>This will save this data into a file named <code class=\"highlighter-rouge\">.track</code> in your root folder, formatted like so:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>---20201011 (4) Spend time on programming, exercise, and work.* Write daily tracker program* Exercise with 1.5hr walk* Brainstorm programming projects* Vote in election&gt; Prepare for next week and resolve all open tasksI walked farther south than I have since moving here, and I really like how quietthe side streets are.Been listening to vogue ball playlists all night.</code></pre></div></div><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/12/track-python",
            
            
            
            
            
            "date_published": "2020-10-12T00:00:00-07:00",
            "date_modified": "2020-10-12T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/12/sleep-realms",
            "title": "üéß Sleep Realms (Paulstretch)",
            "summary": "Amp up your Star Realms game through osmotically absorbing the epic music.",
            "content_text": "Listen hereIf you want to get better at Star Realms, listen to this while you sleep and it will increase your ability to win by 341%.Used Paulstretch that is built in to Audacity.",
            "content_html": "<p><a href=\"https://www.youtube.com/watch?v=ie5z6AsEMQU\"><img src=\"https://i.ytimg.com/vi/ie5z6AsEMQU/hqdefault.jpg\" alt=\"Sleep Realms\" /></a></p><p><a href=\"https://www.youtube.com/watch?v=ie5z6AsEMQU\">Listen here</a></p><p>If you want to get better at Star Realms, listen to this while you sleep and it will increase your ability to win by 341%.</p><p>Used <a href=\"http://hypermammut.sourceforge.net/paulstretch/\">Paulstretch</a> that is built in to <a href=\"https://www.audacityteam.org/\">Audacity</a>.</p><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/12/sleep-realms",
            
            
            
            
            
            "date_published": "2020-10-12T00:00:00-07:00",
            "date_modified": "2020-10-12T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/04/two-minute-rule",
            "title": "The Two-Minute Rule",
            "summary": null,
            "content_text": "I‚Äôm a big self-help junkie and there honestly isn‚Äôt a lot that I feel I have taken action and eventually has stuck. Usually it‚Äôs a lot of ‚Äúshould‚Äùing about random things in my life that in hindsight is not that big of a deal. Or it‚Äôs stuff that makes a real difference but is really hard[1], which means a lot more work.But one thing has amazingly made it through this filter in the background, being both successful and impactful in my life: the Two-Minute Rule from Getting Things Done.It‚Äôs simple and has been tossed around in a zillion different books by a billion different people under just as many names (thirty-second rule, five-minute rule). Essentially, if it takes less that two minutes to do, do it now. It‚Äôs so easy and honestly is such a small time investment, it somehow just happened for me. And even better, when something does fall through the cracks even though I know it will only take a couple of minutes, this now means something. It means that this task or to-do has some emotional weight that I need to deal with, and at least I‚Äôve made it easier to see this and now actionable.The thing that I like most about this is that it‚Äôs not about ‚Äú‚Äúgetting things done‚Äù (particularly for the sake of getting things done, which is the worst), it‚Äôs about closing open loops. I realized I ran around all day seeing these open loops and it weighted me down: a dirty dish, unopened mail, a difficult email, etc. Using this rule helps with the toughest part of completing these difficult tasks: starting.References:  https://tjcx.me/posts/defense-self-help/",
            "content_html": "<p>I‚Äôm a big self-help junkie and there honestly isn‚Äôt a lot that I feel I have taken action and eventually has stuck. Usually it‚Äôs a lot of ‚Äúshould‚Äùing about random things in my life that in hindsight is not that big of a deal. Or it‚Äôs <a href=\"https://tjcx.me/posts/defense-self-help/\">stuff that makes a real difference but is really hard[1]</a>, which means a lot more work.</p><p>But one thing has amazingly made it through this filter in the background, being both successful and impactful in my life: the Two-Minute Rule from Getting Things Done.</p><p>It‚Äôs simple and has been tossed around in a zillion different books by a billion different people under just as many names (thirty-second rule, five-minute rule). Essentially, <strong>if it takes less that two minutes to do, do it now</strong>. It‚Äôs so easy and honestly is such a small time investment, it somehow just happened for me. And even better, when something does fall through the cracks even though I know it will only take a couple of minutes, this now <em>means</em> something. It means that this task or to-do has some emotional weight that I need to deal with, and at least I‚Äôve made it easier to see this and now actionable.</p><p>The thing that I like most about this is that it‚Äôs not about ‚Äú‚Äúgetting things done‚Äù (particularly for the <em>sake</em> of getting things done, which is the worst), it‚Äôs about closing open loops. I realized I ran around all day seeing these open loops and it weighted me down: a dirty dish, unopened mail, a difficult email, etc. Using this rule helps with the toughest part of completing these difficult tasks: <strong>starting</strong>.</p><hr /><p>References:</p><ol>  <li><a href=\"https://tjcx.me/posts/defense-self-help/\">https://tjcx.me/posts/defense-self-help/</a></li></ol><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/04/two-minute-rule",
            
            
            
            
            
            "date_published": "2020-10-04T00:00:00-07:00",
            "date_modified": "2020-10-04T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/04/doing",
            "title": "Trying to become reacquainted with being bored",
            "summary": null,
            "content_text": "During quarantine, I‚Äôve been trying to just be bored and not constantly DO things and it‚Äôs weird how hard that is. Blah blah, every complaint about technology bad. But that aside, I do like techology and love spending time with it. And trying to reconcile these two things in particular has been difficult.Tech has had a weird hold on me since I was a kid, and it has been what I have always wanted to spend my time doing. But I felt like I was also getting signals from various places that technology was bad and I shouldn‚Äôt spend so much time on it, probably a recoil from video games and the like.So now looking back, I think my reticence was due to a conflict between my love of tech and the avoidance of doing ‚Äúthe bad thing‚Äù, in this case, ‚Äúwaste my life‚Äù on computers, etc. Realizing this recently has led to a feverish pursuit of so many things I have pursued but guiltily so for years: programming, video games, and electronics in general.During these COVID times, I couldn‚Äôt have really asked for a better hobby than sitting on a computer and creating things alone in a room. However, these times of reclusivity also create this problem where I find I can‚Äôt let it go and I have to keep working because I ‚Äúshould‚Äù or ‚Äúelse‚Äù ‚Äúsomething‚Äù might happen.So now I am on a quest to try and be bored more. Like not do anything for as long as possible until I feel an urge to do it or a really strong desire, and not just a tiny pinprick of discomfort. At this point, I am completely out of practice, but I‚Äôm excited to see how this develops and if this space leaves me a bit more relaxed and mindful.",
            "content_html": "<p>During quarantine, I‚Äôve been trying to just be bored and not constantly DO things and it‚Äôs weird how hard that is. Blah blah, every complaint about technology bad. But that aside, I <em>do</em> like techology and love spending time with it. And trying to reconcile these two things in particular has been difficult.</p><p>Tech has had a weird hold on me since I was a kid, and it has been what I have always wanted to spend my time doing. But I felt like I was also getting signals from various places that technology was bad and I shouldn‚Äôt spend so much time on it, probably a recoil from video games and the like.</p><p>So now looking back, I think my reticence was due to a conflict between my love of tech and the avoidance of doing ‚Äúthe bad thing‚Äù, in this case, ‚Äúwaste my life‚Äù on computers, etc. Realizing this recently has led to a feverish pursuit of so many things I have pursued but guiltily so for years: programming, video games, and electronics in general.</p><p>During these COVID times, I couldn‚Äôt have really asked for a better hobby than sitting on a computer and creating things alone in a room. However, these times of reclusivity also create this problem where I find I can‚Äôt let it go and I have to keep <em>working</em> because I ‚Äúshould‚Äù or ‚Äúelse‚Äù ‚Äúsomething‚Äù might happen.</p><p>So now I am on a quest to try and be bored more. Like not do anything for as long as possible until I feel an <strong>urge</strong> to do it or a really strong desire, and not just a tiny pinprick of discomfort. At this point, I am completely out of practice, but I‚Äôm excited to see how this develops and if this space leaves me a bit more relaxed and mindful.</p><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/04/doing",
            
            
            
            
            
            "date_published": "2020-10-04T00:00:00-07:00",
            "date_modified": "2020-10-04T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/09/30/evernote-images",
            "title": "üíª Maximize Evernote Storage Using Web Clipper (JS)",
            "summary": "Either using a Google Chrome extension or one line of JS, maximize your snippets in Evernote and stay away from $8 subscriptions for a tiny feature.",
            "content_text": "Check out the up-to-date version on GitHubWhen using Evernote‚Äôs web clipper, I was using too much of my upload cap with Evernote every month, mostly because images are too big when cropping the whole article. So I decided to practice some JS and see if I could make it work better without paying an $8 per month subscription for just a few extra megs of upload per month.On an average article with supporting (but not necessarily useful) pictures, I‚Äôve seen about a 90%+ reduction in note sizes.This extension has been tested to work on the ‚ÄúArticle‚Äù, ‚ÄúSimplified Article‚Äù, and ‚ÄúFull Page‚Äù options.Cheap and Easy No-Install Browser Agnostic VersionIn the console of your browser, type the following:document.querySelectorAll('img').forEach(image =&gt; image.remove());To reset this, reload your page.Chrome ExtensionThis extension is really simple: on click, it goes through all the img elements on the page and removes them from the DOM. On another click, the page is refreshed.The original implementation set the element‚Äôs display to none on clicking the button again, all display settings for the images were set to their original value. Unfortunately, Evernote adds and modifies inline style on import, so it negated this otherwise more elegant implementation.Installation:To install this extension, please go to the Github page for updated information and instructions.  20201007: Changed to avoid Evernote‚Äôs inline styling on import  20201030: Added average space savings",
            "content_html": "<p><a href=\"https://github.com/milofultz/no-images\"><strong>Check out the up-to-date version on GitHub</strong></a></p><p>When using Evernote‚Äôs web clipper, I was using too much of my upload cap with Evernote every month, mostly because images are too big when cropping the whole article. So I decided to practice some JS and see if I could make it work better without paying an $8 per month subscription for just a few extra megs of upload per month.</p><p>On an average article with supporting (but not necessarily useful) pictures, I‚Äôve seen about a <strong>90%+ reduction</strong> in note sizes.</p><p>This extension has been tested to work on the ‚ÄúArticle‚Äù, ‚ÄúSimplified Article‚Äù, and ‚ÄúFull Page‚Äù options.</p><h2 id=\"cheap-and-easy-no-install-browser-agnostic-version\">Cheap and Easy No-Install Browser Agnostic Version</h2><p>In the console of your browser, type the following:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>document.querySelectorAll('img').forEach(image =&gt; image.remove());</code></pre></div></div><p>To reset this, reload your page.</p><h2 id=\"chrome-extension\">Chrome Extension</h2><p>This extension is really simple: on click, it goes through all the <code class=\"highlighter-rouge\">img</code> elements on the page and removes them from the DOM. On another click, the page is refreshed.</p><p>The original implementation set the element‚Äôs display to <code class=\"highlighter-rouge\">none</code> on clicking the button again, all display settings for the images were set to their original value. Unfortunately, Evernote adds and modifies inline style on import, so it negated this otherwise more elegant implementation.</p><h3 id=\"installation\">Installation:</h3><p>To install this extension, please go to the Github page for updated information and instructions.</p><hr /><ul>  <li><em>20201007: Changed to avoid Evernote‚Äôs inline styling on import</em></li>  <li><em>20201030: Added average space savings</em></li></ul>",
            "url": "http://milofultz.com/2020/09/30/evernote-images",
            
            
            
            
            
            "date_published": "2020-09-30T00:00:00-07:00",
            "date_modified": "2020-09-30T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/09/26/zentube",
            "title": "üíª Zentube - Youtube Lite w/Note Taking (HTML/CSS/JS)",
            "summary": "Distraction-free note taking on Youtube videos. Includes file export and automatic timestamps.",
            "content_text": "This was designed for desktop use only, so the user experience on mobile is really not great.Try it out here // You can find the updated project and all necessary files here on GitHub.I wanted to be able to take notes on a Youtube video without having to tab out of the window to a text editor all of the time. After seeing Josh Avanier‚Äôs Down and Hundred Rabbit‚Äôs Left, I realized I didn‚Äôt need to do anything fancy, and in fact I preferred the minimalist layout that vanilla JS can provide.This saves the text you write for a given Youtube video into local storage and will load it up again upon returning to the same video. Supports exporting to a text file and adding automatic timestamps.Borrowed/stole heavily from Skeleton CSS and Josh Avanier‚Äôs Down for code, stylesheets, and ideas.  20210105: Overhauled the program a bit. Added a title and refactored the CSS a bunch. Changed the style on a few elements and added a webfont to look better than the stock one.  20210106: Did some centering of the bottom editor in sub-1000px screens.",
            "content_html": "<p><em>This was designed for desktop use only, so the user experience on mobile is really not great.</em></p><p><a href=\"https://milofultz.com/zentube/\"><strong>Try it out here</strong></a> // <a href=\"https://github.com/milofultz/zentube\">You can find the updated project and all necessary files here on GitHub.</a></p><p>I wanted to be able to take notes on a Youtube video without having to tab out of the window to a text editor all of the time. After seeing Josh Avanier‚Äôs <a href=\"https://down.avanier.now.sh\">Down</a> and Hundred Rabbit‚Äôs <a href=\"https://github.com/hundredrabbits/left\">Left</a>, I realized I didn‚Äôt need to do anything fancy, and in fact I preferred the minimalist layout that vanilla JS can provide.</p><p>This saves the text you write for a given Youtube video into local storage and will load it up again upon returning to the same video. Supports exporting to a text file and adding automatic timestamps.</p><p>Borrowed/stole heavily from <a href=\"http://getskeleton.com/\">Skeleton CSS</a> and Josh Avanier‚Äôs <a href=\"https://down.avanier.now.sh\">Down</a> for code, stylesheets, and ideas.</p><ul>  <li><em>20210105: Overhauled the program a bit. Added a title and refactored the CSS a bunch. Changed the style on a few elements and added a webfont to look better than the stock one.</em></li>  <li><em>20210106: Did some centering of the bottom editor in sub-1000px screens.</em></li></ul>",
            "url": "http://milofultz.com/2020/09/26/zentube",
            
            
            
            
            
            "date_published": "2020-09-26T00:00:00-07:00",
            "date_modified": "2020-09-26T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/09/23/mastodon",
            "title": "Mastodon",
            "summary": null,
            "content_text": "Been digging into Mastodon, as it brings all the good things I like about social media and none of the trash. Find me there.- 20201009: Moved to https://merveilles.town",
            "content_html": "<p>Been digging into Mastodon, as it brings all the good things I like about social media and none of the trash. <a rel=\"me\" href=\"https://merveilles.town/@milofultz\">Find me there.</a></p><p><em>- 20201009: Moved to <a href=\"https://merveilles.town\">https://merveilles.town</a></em></p>",
            "url": "http://milofultz.com/2020/09/23/mastodon",
            
            
            
            
            
            "date_published": "2020-09-23T00:00:00-07:00",
            "date_modified": "2020-09-23T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/09/01/domine",
            "title": "Domine (game from Hundred Rabbits)",
            "summary": "I transcribed the rules for this simple game from Hundred Rabbits since it looks really fun and I can't find their rules page anymore.",
            "content_text": "I recently came across this video from Hundred Rabbits of a game called Domine. Super simple game you can play with a set of dominoes. I transcribed the rules for this game from the video since it looks really fun and I can‚Äôt find the rules page anymore.Equipment: Double 9 domino setGoal: To have the most ‚Äúliving‚Äù dominoes at the end of the round.  Each player draws a hand of seven dominoes and keeps them hidden from their opponent. The two numbers on either side of a domino are the attack and defense points, facing the opponent and the player respectively. The dominoes can be flipped as long as it‚Äôs before they are played.  Each turn consists of an attack using a domino and choosing which is the attack side and which is the defense.  Players alternate turns until all dominoes have been played. The player with the most living dominoes wins.Attack RulesWhen a player attacks with a domino, the opponent must defend with a value equal to or higher than the attack. If the opponent‚Äôs domino defense value is lower than the attack, the domino is killed. If the opponent‚Äôs domino defense value is equal to or higher, then they have survived. If the opponent can defend and has an attack number higher than the player‚Äôs domino defense value, the opponent can counter to kill the player‚Äôs domino. Double dominoes get first strike, regardless if they initiate the attack.Part of Inexpensive and Minimal Equipment Games To Spend Time On  20201127: Played as I finally got a hold of dominoes. Can it be played with playing cards?",
            "content_html": "<p>I recently came across this <a href=\"https://www.youtube.com/watch?v=fjZb190qn00\">video</a> from Hundred Rabbits of a game called Domine. Super simple game you can play with a set of dominoes. I transcribed the rules for this game from the video since it looks really fun and I can‚Äôt find the rules page anymore.</p><hr /><p>Equipment: Double 9 domino set</p><p>Goal: To have the most ‚Äúliving‚Äù dominoes at the end of the round.</p><ul>  <li>Each player draws a hand of seven dominoes and keeps them hidden from their opponent. The two numbers on either side of a domino are the attack and defense points, facing the opponent and the player respectively. The dominoes can be flipped as long as it‚Äôs before they are played.</li>  <li>Each turn consists of an attack using a domino and choosing which is the attack side and which is the defense.</li>  <li>Players alternate turns until all dominoes have been played. The player with the most living dominoes wins.</li></ul><h3 id=\"attack-rules\">Attack Rules</h3><p>When a player attacks with a domino, the opponent must defend with a value equal to or higher than the attack. If the opponent‚Äôs domino defense value is lower than the attack, the domino is killed. If the opponent‚Äôs domino defense value is equal to or higher, then they have survived. If the opponent can defend and has an attack number higher than the player‚Äôs domino defense value, the opponent can counter to kill the player‚Äôs domino. Double dominoes get first strike, regardless if they initiate the attack.</p><p>Part of <a href=\"/2020/06/25/inexpensive-games\">Inexpensive and Minimal Equipment Games To Spend Time On</a></p><hr /><ul>  <li><em>20201127: Played as I finally got a hold of dominoes. Can it be played with playing cards?</em></li></ul>",
            "url": "http://milofultz.com/2020/09/01/domine",
            
            
            
            
            
            "date_published": "2020-09-01T00:00:00-07:00",
            "date_modified": "2020-09-01T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/08/26/random-note",
            "title": "üíª Open A Random Note/Lo-Fi Idea Generator (Python)",
            "summary": "I got inspired by Tiago Forte's RandomNote Web and decided to make my own simple version using Python, Applescript, and nvALT, and it's easy to port.",
            "content_text": "For the last few months, I have been feeding my Zettelkasten with essentially anything that I find interesting: programming, emotional development, quotes, productivity, book or video reviews, whatever. If I think it‚Äôs something that will help me or make me excited later, I put it in there.The problem I had was that even though I had these notes for reference, I wasn‚Äôt finding myself reviewing them just for creating those interesting and random connections, which was something that I had initially started using the Zettelkasten for. Those random connections are what creates interesting ideas and diffuse connections, as well as a spaced repetition for ideas that I already decided are worth knowing.I found a solution that was implemented by productivity dude and Twitter instigator Tiago Forte. Essentially, his ‚Äúsecond brain‚Äù, analogous to a Zettelkasten, is housed in Evernote, and he had an app developed that would pop open a random Evernote every time he clicked it. He found that this boosted his creativity and because of how easy it was, he was able to do it between meetings, during his breaks, essentially in any spare moment. In doing some research, I found somebody who made a random note Applescript for the Evernote app that looks like this:# Applescripttell application \"Evernote\"\tset noteList to find notes\tset randomNote to some item of noteList\tset query string of window 1 to (title of randomNote as string)end tellI figured it was just as simple of a task if you had your notes saved locally, which I do as text/Markdown files, so I set out to make a Python script that did this, along with an app implementation that can sit in my dock. I used the same process I did in my ‚ÄúMake Python ‚ÄòApps‚Äô and Shortcuts To Run Them on OSX‚Äù post, so obviously this is geared towards OSX users.  Create your Python script, replacing the paths and extension to yours:import osimport randomfolder = \"/path/to/notes\"prog = \"/path/to/application.app\"ext = \"txt\"file_list = os.listdir(folder)txt_list = [file for file in file_list if file.endswith(ext)]random_file = random.choice(file_list)random_fp = os.path.join(folder, random_file)os.system('open \"{}\" -a \"{}\"'.format(random_fp, prog))  Save this file and name it whatever you like .py, like random_note.py. (I saved it where all my code projects are, but you could also create a folder in your Applications folder and stick it there)  Open Script Editor and make a new document. Ensure that AppleScript is selected in the dropdown menu in the upper left of the window.  Create your Applescript, replacing the paths and script name to yours:do shell script \"cd '/path/to/script'; python script_name.py\"  Save the script in your Applications folder as an ‚ÄúApplication‚Äù file format.  Put it on your dock and go wild.I added a little light bulb icon on mine[6], as is tradition, and it is a great way to pass the time. I spent all this time curating ideas, recipes, thoughts, information, and experiences I thought were interesting, and now I can really enjoy the payoff in a very fun way.References:    RandomNote app from Tiago Forte  RandomNote Web  random note Applescript for the Evernote app  Make Python ‚ÄòApps‚Äô and Shortcuts To Run Them on OSX  Add icon",
            "content_html": "<p>For the last few months, I have been feeding my <a href=\"/2020/05/22/zettelkasten\">Zettelkasten</a> with essentially anything that I find interesting: programming, emotional development, quotes, productivity, book or video reviews, whatever. If I think it‚Äôs something that will help me or make me excited later, I put it in there.</p><p>The problem I had was that even though I had these notes for reference, I wasn‚Äôt finding myself reviewing them just for creating those interesting and random connections, which was something that I had initially started using the Zettelkasten for. Those random connections are what creates interesting ideas and diffuse connections, as well as a spaced repetition for ideas that I already decided are worth knowing.</p><p>I found a solution that was implemented by productivity dude and Twitter instigator Tiago Forte. Essentially, his ‚Äúsecond brain‚Äù, analogous to a Zettelkasten, is housed in Evernote, and he had <a href=\"\">an app</a> developed that would pop open a random Evernote every time he clicked it. He found that this boosted his creativity and because of how easy it was, he was able to do it between meetings, during his breaks, essentially in any spare moment. In doing some research, I found somebody who made a <a href=\"\">random note Applescript for the Evernote app</a> that looks like this:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Applescripttell application \"Evernote\"\tset noteList to find notes\tset randomNote to some item of noteList\tset query string of window 1 to (title of randomNote as string)end tell</code></pre></div></div><p>I figured it was just as simple of a task if you had your notes saved locally, which I do as text/Markdown files, so I set out to make a Python script that did this, along with an app implementation that can sit in my dock. I used the same process I did in my ‚Äú<a href=\"/2020/07/22/make-python-apps\">Make Python ‚ÄòApps‚Äô and Shortcuts To Run Them on OSX</a>‚Äù post, so obviously this is geared towards OSX users.</p><hr /><ul>  <li>Create your Python script, replacing the paths and extension to yours:</li></ul><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>import osimport randomfolder = \"/path/to/notes\"prog = \"/path/to/application.app\"ext = \"txt\"file_list = os.listdir(folder)txt_list = [file for file in file_list if file.endswith(ext)]random_file = random.choice(file_list)random_fp = os.path.join(folder, random_file)os.system('open \"{}\" -a \"{}\"'.format(random_fp, prog))</code></pre></div></div><ul>  <li>Save this file and name it whatever you like <code class=\"highlighter-rouge\">.py</code>, like <code class=\"highlighter-rouge\">random_note.py</code>. (I saved it where all my code projects are, but you could also create a folder in your Applications folder and stick it there)</li>  <li>Open Script Editor and make a new document. Ensure that AppleScript is selected in the dropdown menu in the upper left of the window.</li>  <li>Create your Applescript, replacing the paths and script name to yours:</li></ul><p><code class=\"highlighter-rouge\">do shell script \"cd '/path/to/script'; python script_name.py\"</code></p><ul>  <li>Save the script in your Applications folder as an ‚ÄúApplication‚Äù file format.</li>  <li>Put it on your dock and go wild.</li></ul><p>I added a little light bulb icon on mine[6], as is tradition, and it is a great way to pass the time. I spent all this time curating ideas, recipes, thoughts, information, and experiences I thought were interesting, and now I can really enjoy the payoff in a very fun way.</p><hr /><p>References:</p><ol>  <li><a href=\"\"></a></li>  <li><a href=\"\">RandomNote app from Tiago Forte</a></li>  <li><a href=\"\">RandomNote Web</a></li>  <li><a href=\"\">random note Applescript for the Evernote app</a></li>  <li><a href=\"/2020/07/22/make-python-apps\">Make Python ‚ÄòApps‚Äô and Shortcuts To Run Them on OSX</a></li>  <li><a href=\"\">Add icon</a></li></ol>",
            "url": "http://milofultz.com/2020/08/26/random-note",
            
            
            
            
            
            "date_published": "2020-08-26T00:00:00-07:00",
            "date_modified": "2020-08-26T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/08/22/purple-rain-outro",
            "title": "üéº Purple Rain Outro Transcription",
            "summary": "A transcription of the DX7 strings outro for Purple Rain.",
            "content_text": "You can listen to it here on YouTube.",
            "content_html": "<p><img src=\"/assets/20200822PurpleRain.jpg\" alt=\"Purple Rain Outro Transcription\" /></p><p><a href=\"https://www.youtube.com/watch?v=km6Ryvor5_k\">You can listen to it here on YouTube.</a></p>",
            "url": "http://milofultz.com/2020/08/22/purple-rain-outro",
            
            
            
            
            
            "date_published": "2020-08-22T00:00:00-07:00",
            "date_modified": "2020-08-22T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/08/19/soulja-realms",
            "title": "üéß Soulja Realms",
            "summary": "I mashed up the Star Realms music with a bunch of Soulja Boy acapellas.",
            "content_text": "Listen hereMy brain started mashing together Crank Dat Soulja Boy with the first Star Realms song and I could not stop until they were all combined into one dumb megamix. If you don‚Äôt know Star Realms or Soulja Boy, this probably won‚Äôt make much sense, but you should at least check out Star Realms, because it‚Äôs a great deck-building game and a fun app to pass the time.",
            "content_html": "<p><a href=\"https://www.youtube.com/watch?v=xb6MV25Ktjc\"><img src=\"https://i.ytimg.com/vi/xb6MV25Ktjc/maxresdefault.jpg\" alt=\"Soulja Realms\" /></a></p><p><a href=\"https://www.youtube.com/watch?v=xb6MV25Ktjc\">Listen here</a></p><p>My brain started mashing together <a href=\"https://www.youtube.com/watch?v=8UFIYGkROII\">Crank Dat Soulja Boy</a> with the first Star Realms song and I could not stop until they were all combined into one dumb megamix. If you don‚Äôt know Star Realms or Soulja Boy, this probably won‚Äôt make much sense, but you should at least check out <a href=\"https://www.starrealms.com/\">Star Realms</a>, because it‚Äôs a great deck-building game and a fun app to pass the time.</p>",
            "url": "http://milofultz.com/2020/08/19/soulja-realms",
            
            
            
            
            
            "date_published": "2020-08-19T00:00:00-07:00",
            "date_modified": "2020-08-19T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/08/04/piu-piu-ringtone",
            "title": "üéß Piu Piu ringtone but it's only Avgustina's laugh",
            "summary": "Piu Piu ringtone but it's only Avgustina's laugh",
            "content_text": "I am starting a project to see how long my roommates and I can handle listening to Avgustina‚Äôs laugh as my text message notification sound. I set it to where it only does it when my partner messages me, but it should be horrible enough.You can download this atrocity as an m4r file here. Made using Mediahuman Audio Converter for OSX.",
            "content_html": "<p>I am starting a project to see how long my roommates and I can handle listening to Avgustina‚Äôs laugh as my text message notification sound. I set it to where it only does it when my partner messages me, but it should be horrible enough.</p><p>You can download this atrocity as an m4r file <a href=\"/assets/20200804PiuPiu.m4r\">here</a>. Made using Mediahuman Audio Converter for OSX.</p>",
            "url": "http://milofultz.com/2020/08/04/piu-piu-ringtone",
            
            
            
            
            
            "date_published": "2020-08-04T00:00:00-07:00",
            "date_modified": "2020-08-04T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/07/23/awfulizer",
            "title": "üíª Awfulizer - Make Surfing The Web Awful (Firefox)",
            "summary": "I made this Firefox extension to see if I could do it, and I could. This extension cycles colors on every element 6 times per second.",
            "content_text": "You can get the add-on here and see the code on GitHub.Watch a video of it in action.While studying some CSS and HTML on FreeCodeCamp, I was trying to figure out how I could exercise some of the skills I was learning. One of the basics of CSS is just changing style of fonts and backgrounds, so I figured why not try and make some program that cycles all of those over and over? I found that making your first extension is very easy, so I tried it. After a ton of trial and error, I made a button that allows you to manually turn it on on a given tab, but you can only turn it off through refreshing it. I‚Äôve added a static feature and the ability to choose (wow!) in v1.2. In the future, I‚Äôm hoping to add an option to turn it off once it starts.References:  https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Your_first_WebExtension",
            "content_html": "<p>You can get the add-on <a href=\"https://addons.mozilla.org/en-US/firefox/addon/awfulizer/\">here</a> and see the code on <a href=\"https://github.com/milofultz/awfulizer\">GitHub</a>.</p><p><a href=\"https://www.youtube.com/watch?v=dx7hZAAHFuk&amp;feature=youtu.be\">Watch a video of it in action.</a></p><p>While studying some CSS and HTML on <a href=\"https://www.freecodecamp.org/\">FreeCodeCamp</a>, I was trying to figure out how I could exercise some of the skills I was learning. One of the basics of CSS is just changing style of fonts and backgrounds, so I figured why not try and make some program that cycles all of those over and over? I found that <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Your_first_WebExtension\">making your first extension is very easy</a>, so I tried it. After a ton of trial and error, I made a button that allows you to manually turn it on on a given tab, but you can only turn it off through refreshing it. I‚Äôve added a static feature and the ability to choose (wow!) in v1.2. In the future, I‚Äôm hoping to add an option to turn it off once it starts.</p><hr /><p>References:</p><ol>  <li>https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Your_first_WebExtension</li></ol>",
            "url": "http://milofultz.com/2020/07/23/awfulizer",
            
            
            
            
            
            "date_published": "2020-07-23T00:00:00-07:00",
            "date_modified": "2020-07-23T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/07/22/make-python-apps",
            "title": "Make Python 'Apps' and Shortcuts To Run Them on OSX",
            "summary": "Using Automator and the built in Services of OSX, you can make simple Python apps run on command.",
            "content_text": "After experimenting with PyInstaller and Platypus to create a standalone app in OSX with no success, I went the much lower fidelity route. But it was successful, so I‚Äôm happy with it. YOu can see the script I made here.The goal of this was first to make a standalone app that will run Python script, but second to assign it to a keystroke. I have only tested this with running a Python script, but I can‚Äôt imagine it would be much more difficult for any other bash script. So here is the process:  Open Script Editor (in Applications/Utilities).      Using the do shell script command, add the script you want to run. Essentially, you‚Äôll want to write in what you normally put into the Terminal, separated by semicolons.    do shell script \"cd 'path/to/script'; source venv/bin/activate; python main.py\"    Save this as an Application to your Applications folder (or wherever makes sense).  Close Script Editor. (If you don‚Äôt want to add a shortcut, you can stop here)  Open Automator (in Applications).  Create a ‚ÄúQuick Action‚Äù or ‚ÄúService‚Äù, whatever one your OS says.  In the top bar, set the following setting: Workflow receives current no input in any application.  In the column second from the left, drag the ‚ÄúLaunch Application‚Äù task into the ‚ÄúDrag actions or files here‚Äù area.  Select your application within that dropdown menu.  Save this with a memorable name.  Close Automator.  Open System Preferences and go to ‚ÄúKeyboard‚Äù.  Within this window, click ‚ÄúShortcuts‚Äù.  Click on the ‚ÄúServices‚Äù menu on the left hand side.  Scroll to the bottom of the right window until you see your new service you created.  Double-click where it says ‚Äònone‚Äô and set a new shortcut (make sure it‚Äôs unique and won‚Äôt conflict with other programs or special characters. I chose ctrl+opt+shift+A). NOTE: If you don‚Äôt do the following steps, your shortcut will not work.  Close your System Preferences.  Click on Finder in your dock.  Open the Finder dropdown menu and go into Services. Click on your new service to run it manually.References:  https://www.makeuseof.com/tag/applescript-bash-scripts-apps/  https://discussions.apple.com/thread/5048120",
            "content_html": "<p>After experimenting with <a href=\"https://pyinstaller.readthedocs.io/en/stable/\">PyInstaller</a> and <a href=\"https://sveinbjorn.org/platypus\">Platypus</a> to create a standalone app in OSX with no success, I went the much lower fidelity route. But it was successful, so I‚Äôm happy with it. YOu can see the script I made <a href=\"https://github.com/milofultz/email_service/\">here</a>.</p><p>The goal of this was first to make a standalone app that will run Python script, but second to assign it to a keystroke. I have only tested this with running a Python script, but I can‚Äôt imagine it would be much more difficult for any other bash script. So here is the process:</p><ol>  <li>Open Script Editor (in Applications/Utilities).</li>  <li>    <p>Using the <code class=\"highlighter-rouge\">do shell script</code> command, add the script you want to run. Essentially, you‚Äôll want to write in what you normally put into the Terminal, separated by semicolons.</p>    <p><code class=\"highlighter-rouge\">do shell script \"cd 'path/to/script'; source venv/bin/activate; python main.py\"</code></p>  </li>  <li>Save this as an Application to your Applications folder (or wherever makes sense).</li>  <li>Close Script Editor. <em>(If you don‚Äôt want to add a shortcut, you can stop here)</em></li>  <li>Open Automator (in Applications).</li>  <li>Create a ‚ÄúQuick Action‚Äù or ‚ÄúService‚Äù, whatever one your OS says.</li>  <li>In the top bar, set the following setting: Workflow receives current <strong>no input</strong> in <strong>any application</strong>.</li>  <li>In the column second from the left, drag the ‚ÄúLaunch Application‚Äù task into the ‚ÄúDrag actions or files here‚Äù area.</li>  <li>Select your application within that dropdown menu.</li>  <li>Save this with a memorable name.</li>  <li>Close Automator.</li>  <li>Open System Preferences and go to ‚ÄúKeyboard‚Äù.</li>  <li>Within this window, click ‚ÄúShortcuts‚Äù.</li>  <li>Click on the ‚ÄúServices‚Äù menu on the left hand side.</li>  <li>Scroll to the bottom of the right window until you see your new service you created.</li>  <li>Double-click where it says ‚Äònone‚Äô and set a new shortcut (make sure it‚Äôs unique and won‚Äôt conflict with other programs or special characters. I chose <code class=\"highlighter-rouge\">ctrl+opt+shift+A</code>). <strong>NOTE: If you don‚Äôt do the following steps, your shortcut will not work.</strong></li>  <li>Close your System Preferences.</li>  <li>Click on Finder in your dock.</li>  <li>Open the Finder dropdown menu and go into Services. Click on your new service to run it manually.</li></ol><hr /><p>References:</p><ol>  <li><a href=\"https://www.makeuseof.com/tag/applescript-bash-scripts-apps/\">https://www.makeuseof.com/tag/applescript-bash-scripts-apps/</a></li>  <li><a href=\"https://discussions.apple.com/thread/5048120\">https://discussions.apple.com/thread/5048120</a></li></ol>",
            "url": "http://milofultz.com/2020/07/22/make-python-apps",
            
            
            
            
            
            "date_published": "2020-07-22T00:00:00-07:00",
            "date_modified": "2020-07-22T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/07/18/programming-outline",
            "title": "Create a better program faster with an outline V2",
            "summary": "I've written so much spaghetti code for so long and finally learned from my roommate how to write better code. This is how I use this method.",
            "content_text": "Like before, stay in abstract thinking as long as possible. The longer you take to implement your concepts, the better.Big Overview:  Understanding the Problem  Breaking It Down  Inspection  Development/TestingUnderstanding the Problem      Describe what the problem is in abstract terms as clearly as you can. What is the thing that you can‚Äôt do or isn‚Äôt happening right now?        Describe the solution to this problem in abstract terms as the desired result. Don‚Äôt worry about the how yet, just what the result will be.        Describe in abstract terms what things the program will do, as if it was a person doing it, not a computer. What are all of the smaller tasks within this bigger problem/solution?        From there, describe how your program will handle data on the way in and the way out (not within the program). What do you as the user want to give it and what do you want it to spit back out? Like when you give the dry cleaner your clothes: input is dirty clothes, output is clean clothes.  Breaking It Down      Break down the process further in abstract terms. What are the distinct actions the program will need to take to solve this problem? If you were asking a very pedantic person to do this task for you, what would you tell them?        What are the biggest distinct functions you can perceive in the description you just created?        Can you break these down further into sub-tasks? If so, go back to breaking it down (5.) in abstract terms until you can‚Äôt do it anymore.        With the many discrete functions you have, what data types would be best to give to and get from them?        Make a very rough outline of each function in your program using information from chunking steps. Include only necessary in/out information (e.g. if you are wanting to eat and the data type is ‚Äòfood‚Äô and it will return ‚Äòpoop‚Äô: def eat(food): return poop)        Within these functions, write out an overview for each function. Write again for this ultra pedantic person.        See if you can break down elements of the functions into even smaller parts. The more that functions can be used and reused all around the whole program, the better.  Inspection      Once the program has been broken down into its most atomistic functions, start writing pseudocode into them to have an idea of what you‚Äôre going to do.        Look again for similarities in between functions and see if there is any process the functions could share. If so, then take that and break it down into it‚Äôs own function.        When you feel it has been fully broken down and the flow of data makes sense, create a basic outline of how the different functions will flow together from beginning to the end of the program. Do the data types match? If not, can you use a different data type? Is an adaptation needed between one function and another?  Development/Testing      Make a basic way to develop each function and test it as it goes (in Python, by adding an if __name__ == '__main__': section).        Figure out what is the easiest thing to program and test. Go with the pseudocode you‚Äôve written and start fleshing it out with real functionality. Test each part as you go in the terminal.        Repeat this process with each element of your code, ensuring that it works exactly as you expect. You don‚Äôt have to go in a linear fashion, if it is easier or more sensible to jump around.        Don‚Äôt be afraid to go back to previous steps if you realize further possibilities of chunking or other revisions.  ",
            "content_html": "<p>Like before, <strong>stay in abstract thinking as long as possible. The longer you take to implement your concepts, the better.</strong></p><h1 id=\"big-overview\">Big Overview:</h1><ul>  <li>Understanding the Problem</li>  <li>Breaking It Down</li>  <li>Inspection</li>  <li>Development/Testing</li></ul><hr /><h2 id=\"understanding-the-problem\">Understanding the Problem</h2><ol>  <li>    <p>Describe what the problem is in abstract terms as clearly as you can. What is the thing that you can‚Äôt do or isn‚Äôt happening right now?</p>  </li>  <li>    <p>Describe the solution to this problem in abstract terms as the desired result. Don‚Äôt worry about the how yet, just what the result will be.</p>  </li>  <li>    <p>Describe in abstract terms what things the program will do, as if it was a person doing it, not a computer. What are all of the smaller tasks within this bigger problem/solution?</p>  </li>  <li>    <p>From there, describe how your program will handle data on the way in and the way out (not within the program). What do you as the user want to give it and what do you want it to spit back out? Like when you give the dry cleaner your clothes: input is dirty clothes, output is clean clothes.</p>  </li></ol><h2 id=\"breaking-it-down\">Breaking It Down</h2><ol>  <li>    <p>Break down the process further in abstract terms. What are the distinct actions the program will need to take to solve this problem? If you were asking a very pedantic person to do this task for you, what would you tell them?</p>  </li>  <li>    <p>What are the biggest distinct functions you can perceive in the description you just created?</p>  </li>  <li>    <p>Can you break these down further into sub-tasks? If so, go back to breaking it down (5.) in abstract terms until you can‚Äôt do it anymore.</p>  </li>  <li>    <p>With the many discrete functions you have, what data types would be best to give to and get from them?</p>  </li>  <li>    <p>Make a very rough outline of each function in your program using information from chunking steps. Include only necessary in/out information (e.g. if you are wanting to eat and the data type is ‚Äòfood‚Äô and it will return ‚Äòpoop‚Äô: <code class=\"highlighter-rouge\">def eat(food): return poop</code>)</p>  </li>  <li>    <p>Within these functions, write out an overview for each function. Write again for this ultra pedantic person.</p>  </li>  <li>    <p>See if you can break down elements of the functions into even smaller parts. The more that functions can be used and reused all around the whole program, the better.</p>  </li></ol><h2 id=\"inspection\">Inspection</h2><ol>  <li>    <p>Once the program has been broken down into its most atomistic functions, start writing pseudocode into them to have an idea of what you‚Äôre going to do.</p>  </li>  <li>    <p>Look again for similarities in between functions and see if there is any process the functions could share. If so, then take that and break it down into it‚Äôs own function.</p>  </li>  <li>    <p>When you feel it has been fully broken down and the flow of data makes sense, create a basic outline of how the different functions will flow together from beginning to the end of the program. Do the data types match? If not, can you use a different data type? Is an adaptation needed between one function and another?</p>  </li></ol><h2 id=\"developmenttesting\">Development/Testing</h2><ol>  <li>    <p>Make a basic way to develop each function and test it as it goes (in Python, by adding an <code class=\"highlighter-rouge\">if __name__ == '__main__':</code> section).</p>  </li>  <li>    <p>Figure out what is the easiest thing to program and test. Go with the pseudocode you‚Äôve written and start fleshing it out with real functionality. Test each part as you go in the terminal.</p>  </li>  <li>    <p>Repeat this process with each element of your code, ensuring that it works exactly as you expect. You don‚Äôt have to go in a linear fashion, if it is easier or more sensible to jump around.</p>  </li>  <li>    <p>Don‚Äôt be afraid to go back to previous steps if you realize further possibilities of chunking or other revisions.</p>  </li></ol>",
            "url": "http://milofultz.com/2020/07/18/programming-outline",
            
            
            
            
            
            "date_published": "2020-07-18T00:00:00-07:00",
            "date_modified": "2020-07-18T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/07/08/star-maker",
            "title": "üíª star_maker - a lo-fi ambient visual (Python)",
            "summary": "star_maker - a lo-fi ambient visual (Python)",
            "content_text": "You can visit the project and download the files on GitHub.star_maker is a lo-fi screen saver or ambient visual using blessed. I originally made it so I could make a star visual for a page on my website and then mucked around and realized it offered me both a chance to mess around with blessed and a really funny but relatively simple challenge.It looks like this, but much more interesting.  20200708: Added color and more special characters  20200708: Added parallax effect in  c o l o r",
            "content_html": "<p><a href=\"https://github.com/milofultz/star_maker\">You can visit the project and download the files on GitHub.</a></p><p>star_maker is a lo-fi screen saver or ambient visual using blessed. I originally made it so I could make a star visual for <a href=\"/2020/07/07/spacelove\">a page on my website</a> and then mucked around and realized it offered me both a chance to mess around with <a href=\"https://github.com/jquast/blessed\">blessed</a> and a really funny but relatively simple challenge.</p><p>It looks like <a href=\"/2020/07/07/spacelove\">this</a>, but much more interesting.</p><ul>  <li><em>20200708: Added color and more special characters</em></li>  <li><em>20200708: Added parallax effect in  c o l o r</em></li></ul>",
            "url": "http://milofultz.com/2020/07/08/star-maker",
            
            
            
            
            
            "date_published": "2020-07-08T00:00:00-07:00",
            "date_modified": "2020-07-08T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/07/07/spacelove",
            "title": "üéß spacelove.xm - Made using an old E-MAX sample",
            "summary": "spacelove.xm - Made in MilkyTracker with an old E-MAX sample",
            "content_text": "&nbsp;` &nbsp; &nbsp; ' . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; ` &nbsp; ` &nbsp;. , &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; . &nbsp; \" &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;, &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; ` \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; . &nbsp; + , ' &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;. ` &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; \" &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; + . &nbsp; ` &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp;` &nbsp; &nbsp;` ' ` &nbsp; &nbsp;, + &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;. ` &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp;+ &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp;` &nbsp;\" &nbsp; &nbsp; &nbsp;\" , &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;' &nbsp; &nbsp;. &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;, , &nbsp; &nbsp; &nbsp; \" ' &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;` &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;. &nbsp; ' &nbsp; &nbsp; . ' &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp;\" . &nbsp; &nbsp;\" &nbsp; &nbsp;+ &nbsp;+ &nbsp; &nbsp;\" + &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;+ , &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;+ &nbsp; &nbsp;` &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; ` \" \" &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; , . &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; + . &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;, ` &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; + ` &nbsp; &nbsp; \" &nbsp;. &nbsp; &nbsp; ' &nbsp; &nbsp; + &nbsp; + &nbsp; + \" &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; ' &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; . \" &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; ' &nbsp; ` &nbsp; &nbsp; &nbsp;\" . &nbsp; &nbsp; &nbsp;+ &nbsp; ` &nbsp; &nbsp; &nbsp; ' &nbsp; ' &nbsp; \" \" &nbsp;\" &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp;' &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; ` &nbsp; &nbsp; &nbsp;' &nbsp;. &nbsp; \" &nbsp; + . , &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; , &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp;' . &nbsp; , &nbsp;\" &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp;+ , &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; ' &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; , &nbsp; &nbsp; ` ` &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; . &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp;\" &nbsp;` &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;, &nbsp; &nbsp; ` &nbsp;` ` &nbsp; &nbsp; &nbsp;, &nbsp;' &nbsp;\" &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; \" &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp;. &nbsp; &nbsp; ' ` &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; . &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; + + &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; , &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; + &nbsp; ' + &nbsp; &nbsp; &nbsp; + . + &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;. &nbsp; &nbsp; + &nbsp;+ &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;+ &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;, &nbsp; ' &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;\" &nbsp;` &nbsp; ' &nbsp; &nbsp;, &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp;\" &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;' , ' &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp;, &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; , ` &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp;` &nbsp;+ &nbsp;` &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; ' \" + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;+ ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;+ , . &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; + &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" , &nbsp; &nbsp; &nbsp;, &nbsp;` &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;, ' ' &nbsp; ` \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; \" &nbsp;' &nbsp;` \" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; ` \" &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp;` &nbsp; ' &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; \" &nbsp; `  Your browser does not support the audio element.Download the XM file here What's an XM file and how do I open it? &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp;+ &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;+ &nbsp; + &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; + &nbsp; &nbsp;+ &nbsp;+ &nbsp; &nbsp; + &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;, &nbsp; &nbsp; \" &nbsp; , &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;+ ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; + &nbsp;. &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; + , &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; + &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; . . &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; + &nbsp;, &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;\" ' &nbsp; &nbsp;+ &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; ` &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp;, &nbsp; &nbsp; \" &nbsp; &nbsp; ' &nbsp; + ` &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp;` &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; ' &nbsp; . &nbsp; &nbsp; ` &nbsp; + , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; . &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp;\" + &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;+ &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp;. &nbsp;, &nbsp;. &nbsp; &nbsp; ` &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; \" &nbsp;, &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp;' &nbsp;\" &nbsp; &nbsp;. &nbsp; &nbsp; , &nbsp; &nbsp;' &nbsp; . &nbsp; &nbsp; &nbsp;' &nbsp;, &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp;, &nbsp;\" &nbsp; , &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; + &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; + &nbsp; ' &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;. &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp;, + &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp;\" &nbsp;' &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; , \" &nbsp; ' &nbsp; ' &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; , &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; ' &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;, . &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp;' ` &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` ` &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;` &nbsp;' &nbsp;\" &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;\" &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; + &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; , &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; + ' \" &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;+ &nbsp;. \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;, &nbsp;. &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;+ \" &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp;+ &nbsp; &nbsp; ' ` &nbsp;' &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; ' , &nbsp; &nbsp; , &nbsp; &nbsp; ` &nbsp;+ &nbsp; ` ' &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;` &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; ' + &nbsp; \" &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp;' , &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; ` &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;' &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" ' &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` , &nbsp; &nbsp;, &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp;\" &nbsp; &nbsp;. &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;' &nbsp;+ &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; . &nbsp; + + &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; ' + &nbsp;. &nbsp; + + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp;+ \" &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp;\" &nbsp; , &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; + &nbsp; \" &nbsp; &nbsp; &nbsp; , &nbsp;+ &nbsp; , &nbsp;, &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; \" &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; + , &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;` ' &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; \" &nbsp; . &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" \" &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp;, ` &nbsp; &nbsp; &nbsp; + &nbsp;` &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;' , &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; . &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp;+ &nbsp; ` &nbsp; &nbsp; &nbsp;, &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;, + &nbsp; &nbsp; &nbsp; &nbsp;` ' &nbsp; &nbsp; , &nbsp; &nbsp; . &nbsp;' &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;`",
            "content_html": "<p class=\"stars\">&nbsp;` &nbsp; &nbsp; ' . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; ` &nbsp; ` &nbsp;. , &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; . &nbsp; \" &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;, &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; ` \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; . &nbsp; + , ' &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;. ` &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; \" &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; + . &nbsp; ` &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp;` &nbsp; &nbsp;` ' ` &nbsp; &nbsp;, + &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;. ` &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp;+ &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp;` &nbsp;\" &nbsp; &nbsp; &nbsp;\" , &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;' &nbsp; &nbsp;. &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;, , &nbsp; &nbsp; &nbsp; \" ' &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;` &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;. &nbsp; ' &nbsp; &nbsp; . ' &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp;\" . &nbsp; &nbsp;\" &nbsp; &nbsp;+ &nbsp;+ &nbsp; &nbsp;\" + &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;+ , &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;+ &nbsp; &nbsp;` &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; ` \" \" &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; , . &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; + . &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;, ` &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; + ` &nbsp; &nbsp; \" &nbsp;. &nbsp; &nbsp; ' &nbsp; &nbsp; + &nbsp; + &nbsp; + \" &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; ' &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; . \" &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; ' &nbsp; ` &nbsp; &nbsp; &nbsp;\" . &nbsp; &nbsp; &nbsp;+ &nbsp; ` &nbsp; &nbsp; &nbsp; ' &nbsp; ' &nbsp; \" \" &nbsp;\" &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp;' &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; ` &nbsp; &nbsp; &nbsp;' &nbsp;. &nbsp; \" &nbsp; + . , &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; , &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp;' . &nbsp; , &nbsp;\" &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp;+ , &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; ' &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; , &nbsp; &nbsp; ` ` &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; . &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp;\" &nbsp;` &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;, &nbsp; &nbsp; ` &nbsp;` ` &nbsp; &nbsp; &nbsp;, &nbsp;' &nbsp;\" &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; \" &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp;. &nbsp; &nbsp; ' ` &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; . &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; + + &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; , &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; + &nbsp; ' + &nbsp; &nbsp; &nbsp; + . + &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;. &nbsp; &nbsp; + &nbsp;+ &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;+ &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;, &nbsp; ' &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;\" &nbsp;` &nbsp; ' &nbsp; &nbsp;, &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp;\" &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;' , ' &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp;, &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; , ` &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp;` &nbsp;+ &nbsp;` &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; ' \" + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;+ ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;+ , . &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; + &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" , &nbsp; &nbsp; &nbsp;, &nbsp;` &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;, ' ' &nbsp; ` \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; \" &nbsp;' &nbsp;` \" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; ` \" &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp;` &nbsp; ' &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; \" &nbsp; `</p><p><br /></p><audio controls=\"\">  <source src=\"http://milofultz.com/assets/20200707spacelove.mp3\" type=\"audio/mpeg\" />Your browser does not support the audio element.</audio><p><a href=\"http://milofultz.com/assets/20200707spacelove.xm\">Download the XM file here</a> <sub><a href=\"http://modarchive.org/index.php?article-trackers#milkytracker\">What's an XM file and how do I open it?</a></sub></p><p><br /></p><p class=\"stars\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp;+ &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;+ &nbsp; + &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; + &nbsp; &nbsp;+ &nbsp;+ &nbsp; &nbsp; + &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;, &nbsp; &nbsp; \" &nbsp; , &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;+ ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; + &nbsp;. &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; + , &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; + &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; . . &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; + &nbsp;, &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;\" ' &nbsp; &nbsp;+ &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; ` &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp;, &nbsp; &nbsp; \" &nbsp; &nbsp; ' &nbsp; + ` &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp;` &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; ' &nbsp; . &nbsp; &nbsp; ` &nbsp; + , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; . &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp;\" + &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;+ &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp;. &nbsp;, &nbsp;. &nbsp; &nbsp; ` &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; \" &nbsp;, &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp;' &nbsp;\" &nbsp; &nbsp;. &nbsp; &nbsp; , &nbsp; &nbsp;' &nbsp; . &nbsp; &nbsp; &nbsp;' &nbsp;, &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp;, &nbsp;\" &nbsp; , &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; + &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; + &nbsp; ' &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;. &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp;, + &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp;\" &nbsp;' &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; , \" &nbsp; ' &nbsp; ' &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; , &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; ' &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;, . &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp;' ` &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` ` &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;` &nbsp;' &nbsp;\" &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;\" &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; + &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; , &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; + ' \" &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;+ &nbsp;. \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;, &nbsp;. &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;+ \" &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp;+ &nbsp; &nbsp; ' ` &nbsp;' &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; ' , &nbsp; &nbsp; , &nbsp; &nbsp; ` &nbsp;+ &nbsp; ` ' &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;` &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; ' + &nbsp; \" &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp;' , &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; ` &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;' &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" ' &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` , &nbsp; &nbsp;, &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp;\" &nbsp; &nbsp;. &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;' &nbsp;+ &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; . &nbsp; + + &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; ' + &nbsp;. &nbsp; + + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp;+ \" &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp;\" &nbsp; , &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; + &nbsp; \" &nbsp; &nbsp; &nbsp; , &nbsp;+ &nbsp; , &nbsp;, &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; \" &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; + , &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;` ' &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; \" &nbsp; . &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" \" &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp;, ` &nbsp; &nbsp; &nbsp; + &nbsp;` &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;' , &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; . &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp;+ &nbsp; ` &nbsp; &nbsp; &nbsp;, &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;, + &nbsp; &nbsp; &nbsp; &nbsp;` ' &nbsp; &nbsp; , &nbsp; &nbsp; . &nbsp;' &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;`</p>",
            "url": "http://milofultz.com/2020/07/07/spacelove",
            
            
            
            
            
            "date_published": "2020-07-07T00:00:00-07:00",
            "date_modified": "2020-07-07T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/07/03/wordsmash",
            "title": "üíª Wordsmash Explosion - Mastermind With Words (Python)",
            "summary": "This game is Mastermind but with words. Guess a random word chosen by the computer based on how many letters there are in common.",
            "content_text": "You can visit the project and download the files on GitHub.The GameThe easiest way to think of this game is as Mastermind but with words. You can see a more detailed explanation of the rules here.The program will pick a random 5 letter word that the user will try to guess. The user will guess a 5 letter word and the program will return how many of the letters from the user‚Äôs word exist in the random word. This process will repeat until the user guesses the word correctly.Future Implementation  Different word lengths as a measure of difficulty.  Options for keeping tabs on which letters you‚Äôve guessed. Implemented 20200708  Hints.",
            "content_html": "<p><a href=\"https://github.com/milofultz/wordmastermind\">You can visit the project and download the files on GitHub.</a></p><h2 id=\"the-game\">The Game</h2><p>The easiest way to think of this game is as Mastermind but with words. <a href=\"https://www.word-grabber.com/printable-word-games/a-mastermind-with-words-jotto\">You can see a more detailed explanation of the rules here.</a></p><p>The program will pick a random 5 letter word that the user will try to guess. The user will guess a 5 letter word and the program will return how many of the letters from the user‚Äôs word exist in the random word. This process will repeat until the user guesses the word correctly.</p><hr /><h2 id=\"future-implementation\">Future Implementation</h2><ul>  <li>Different word lengths as a measure of difficulty.</li>  <li><del>Options for keeping tabs on which letters you‚Äôve guessed.</del> <em>Implemented 20200708</em></li>  <li>Hints.</li></ul>",
            "url": "http://milofultz.com/2020/07/03/wordsmash",
            
            
            
            
            
            "date_published": "2020-07-03T00:00:00-07:00",
            "date_modified": "2020-07-03T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        }
    
    ]
}